/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 366:
/***/ (() => {

eval("{\n// UNUSED EXPORTS: DASHVIEW_VERSION, default\n\n;// ./node_modules/tslib/tslib.es6.mjs\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nfunction __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nfunction __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nfunction __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nfunction __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nfunction __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nfunction __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nfunction __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nfunction __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nfunction __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nfunction __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\n/* harmony default export */ const tslib_es6 = ({\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n});\n\n;// ./node_modules/@lit/reactive-element/css-tag.js\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=globalThis,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,s=Symbol(),o=new WeakMap;class n{constructor(t,e,o){if(this._$cssResult$=!0,o!==s)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const s=this.t;if(e&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=o.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&o.set(s,t))}return t}toString(){return this.cssText}}const r=t=>new n(\"string\"==typeof t?t:t+\"\",void 0,s),i=(t,...e)=>{const o=1===t.length?t[0]:e.reduce(((e,s,o)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(s)+t[o+1]),t[0]);return new n(o,t,s)},S=(s,o)=>{if(e)s.adoptedStyleSheets=o.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet));else for(const e of o){const o=document.createElement(\"style\"),n=t.litNonce;void 0!==n&&o.setAttribute(\"nonce\",n),o.textContent=e.cssText,s.appendChild(o)}},c=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const s of t.cssRules)e+=s.cssText;return r(e)})(t):t;\n//# sourceMappingURL=css-tag.js.map\n\n;// ./node_modules/@lit/reactive-element/reactive-element.js\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const{is:reactive_element_i,defineProperty:reactive_element_e,getOwnPropertyDescriptor:h,getOwnPropertyNames:reactive_element_r,getOwnPropertySymbols:reactive_element_o,getPrototypeOf:reactive_element_n}=Object,a=globalThis,reactive_element_c=a.trustedTypes,l=reactive_element_c?reactive_element_c.emptyScript:\"\",p=a.reactiveElementPolyfillSupport,d=(t,s)=>t,u={toAttribute(t,s){switch(s){case Boolean:t=t?l:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,s){let i=t;switch(s){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},f=(t,s)=>!reactive_element_i(t,s),b={attribute:!0,type:String,converter:u,reflect:!1,useDefault:!1,hasChanged:f};Symbol.metadata??=Symbol(\"metadata\"),a.litPropertyMetadata??=new WeakMap;class y extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,s=b){if(s.state&&(s.attribute=!1),this._$Ei(),this.prototype.hasOwnProperty(t)&&((s=Object.create(s)).wrapped=!0),this.elementProperties.set(t,s),!s.noAccessor){const i=Symbol(),h=this.getPropertyDescriptor(t,i,s);void 0!==h&&reactive_element_e(this.prototype,t,h)}}static getPropertyDescriptor(t,s,i){const{get:e,set:r}=h(this.prototype,t)??{get(){return this[s]},set(t){this[s]=t}};return{get:e,set(s){const h=e?.call(this);r?.call(this,s),this.requestUpdate(t,h,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??b}static _$Ei(){if(this.hasOwnProperty(d(\"elementProperties\")))return;const t=reactive_element_n(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(d(\"finalized\")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(d(\"properties\"))){const t=this.properties,s=[...reactive_element_r(t),...reactive_element_o(t)];for(const i of s)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const s=litPropertyMetadata.get(t);if(void 0!==s)for(const[t,i]of s)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,s]of this.elementProperties){const i=this._$Eu(t,s);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(s){const i=[];if(Array.isArray(s)){const e=new Set(s.flat(1/0).reverse());for(const s of e)i.unshift(c(s))}else void 0!==s&&i.push(c(s));return i}static _$Eu(t,s){const i=s.attribute;return!1===i?void 0:\"string\"==typeof i?i:\"string\"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((t=>t(this)))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,s=this.constructor.elementProperties;for(const i of s.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return S(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((t=>t.hostConnected?.()))}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach((t=>t.hostDisconnected?.()))}attributeChangedCallback(t,s,i){this._$AK(t,i)}_$ET(t,s){const i=this.constructor.elementProperties.get(t),e=this.constructor._$Eu(t,i);if(void 0!==e&&!0===i.reflect){const h=(void 0!==i.converter?.toAttribute?i.converter:u).toAttribute(s,i.type);this._$Em=t,null==h?this.removeAttribute(e):this.setAttribute(e,h),this._$Em=null}}_$AK(t,s){const i=this.constructor,e=i._$Eh.get(t);if(void 0!==e&&this._$Em!==e){const t=i.getPropertyOptions(e),h=\"function\"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:u;this._$Em=e;const r=h.fromAttribute(s,t.type);this[e]=r??this._$Ej?.get(e)??r,this._$Em=null}}requestUpdate(t,s,i){if(void 0!==t){const e=this.constructor,h=this[t];if(i??=e.getPropertyOptions(t),!((i.hasChanged??f)(h,s)||i.useDefault&&i.reflect&&h===this._$Ej?.get(t)&&!this.hasAttribute(e._$Eu(t,i))))return;this.C(t,s,i)}!1===this.isUpdatePending&&(this._$ES=this._$EP())}C(t,s,{useDefault:i,reflect:e,wrapped:h},r){i&&!(this._$Ej??=new Map).has(t)&&(this._$Ej.set(t,r??s??this[t]),!0!==h||void 0!==r)||(this._$AL.has(t)||(this.hasUpdated||i||(s=void 0),this._$AL.set(t,s)),!0===e&&this._$Em!==t&&(this._$Eq??=new Set).add(t))}async _$EP(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,s]of this._$Ep)this[t]=s;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[s,i]of t){const{wrapped:t}=i,e=this[s];!0!==t||this._$AL.has(s)||void 0===e||this.C(s,void 0,i,e)}}let t=!1;const s=this._$AL;try{t=this.shouldUpdate(s),t?(this.willUpdate(s),this._$EO?.forEach((t=>t.hostUpdate?.())),this.update(s)):this._$EM()}catch(s){throw t=!1,this._$EM(),s}t&&this._$AE(s)}willUpdate(t){}_$AE(t){this._$EO?.forEach((t=>t.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EM(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Eq&&=this._$Eq.forEach((t=>this._$ET(t,this[t]))),this._$EM()}updated(t){}firstUpdated(t){}}y.elementStyles=[],y.shadowRootOptions={mode:\"open\"},y[d(\"elementProperties\")]=new Map,y[d(\"finalized\")]=new Map,p?.({ReactiveElement:y}),(a.reactiveElementVersions??=[]).push(\"2.1.1\");\n//# sourceMappingURL=reactive-element.js.map\n\n;// ./node_modules/lit-html/lit-html.js\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst lit_html_t=globalThis,lit_html_i=lit_html_t.trustedTypes,lit_html_s=lit_html_i?lit_html_i.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,lit_html_e=\"$lit$\",lit_html_h=`lit$${Math.random().toFixed(9).slice(2)}$`,lit_html_o=\"?\"+lit_html_h,lit_html_n=`<${lit_html_o}>`,lit_html_r=document,lit_html_l=()=>lit_html_r.createComment(\"\"),lit_html_c=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,lit_html_a=Array.isArray,lit_html_u=t=>lit_html_a(t)||\"function\"==typeof t?.[Symbol.iterator],lit_html_d=\"[ \\t\\n\\f\\r]\",lit_html_f=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,v=/-->/g,_=/>/g,m=RegExp(`>|${lit_html_d}(?:([^\\\\s\"'>=/]+)(${lit_html_d}*=${lit_html_d}*(?:[^ \\t\\n\\f\\r\"'\\`<>=]|(\"|')|))|$)`,\"g\"),lit_html_p=/'/g,g=/\"/g,$=/^(?:script|style|textarea|title)$/i,lit_html_y=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),x=lit_html_y(1),lit_html_b=lit_html_y(2),w=lit_html_y(3),T=Symbol.for(\"lit-noChange\"),E=Symbol.for(\"lit-nothing\"),A=new WeakMap,C=lit_html_r.createTreeWalker(lit_html_r,129);function P(t,i){if(!lit_html_a(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return void 0!==lit_html_s?lit_html_s.createHTML(i):i}const V=(t,i)=>{const s=t.length-1,o=[];let r,l=2===i?\"<svg>\":3===i?\"<math>\":\"\",c=lit_html_f;for(let i=0;i<s;i++){const s=t[i];let a,u,d=-1,y=0;for(;y<s.length&&(c.lastIndex=y,u=c.exec(s),null!==u);)y=c.lastIndex,c===lit_html_f?\"!--\"===u[1]?c=v:void 0!==u[1]?c=_:void 0!==u[2]?($.test(u[2])&&(r=RegExp(\"</\"+u[2],\"g\")),c=m):void 0!==u[3]&&(c=m):c===m?\">\"===u[0]?(c=r??lit_html_f,d=-1):void 0===u[1]?d=-2:(d=c.lastIndex-u[2].length,a=u[1],c=void 0===u[3]?m:'\"'===u[3]?g:lit_html_p):c===g||c===lit_html_p?c=m:c===v||c===_?c=lit_html_f:(c=m,r=void 0);const x=c===m&&t[i+1].startsWith(\"/>\")?\" \":\"\";l+=c===lit_html_f?s+lit_html_n:d>=0?(o.push(a),s.slice(0,d)+lit_html_e+s.slice(d)+lit_html_h+x):s+lit_html_h+(-2===d?i:x)}return[P(t,l+(t[s]||\"<?>\")+(2===i?\"</svg>\":3===i?\"</math>\":\"\")),o]};class N{constructor({strings:t,_$litType$:s},n){let r;this.parts=[];let c=0,a=0;const u=t.length-1,d=this.parts,[f,v]=V(t,s);if(this.el=N.createElement(f,n),C.currentNode=this.el.content,2===s||3===s){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(r=C.nextNode())&&d.length<u;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(lit_html_e)){const i=v[a++],s=r.getAttribute(t).split(lit_html_h),e=/([.?@])?(.*)/.exec(i);d.push({type:1,index:c,name:e[2],strings:s,ctor:\".\"===e[1]?H:\"?\"===e[1]?I:\"@\"===e[1]?L:k}),r.removeAttribute(t)}else t.startsWith(lit_html_h)&&(d.push({type:6,index:c}),r.removeAttribute(t));if($.test(r.tagName)){const t=r.textContent.split(lit_html_h),s=t.length-1;if(s>0){r.textContent=lit_html_i?lit_html_i.emptyScript:\"\";for(let i=0;i<s;i++)r.append(t[i],lit_html_l()),C.nextNode(),d.push({type:2,index:++c});r.append(t[s],lit_html_l())}}}else if(8===r.nodeType)if(r.data===lit_html_o)d.push({type:2,index:c});else{let t=-1;for(;-1!==(t=r.data.indexOf(lit_html_h,t+1));)d.push({type:7,index:c}),t+=lit_html_h.length-1}c++}}static createElement(t,i){const s=lit_html_r.createElement(\"template\");return s.innerHTML=t,s}}function lit_html_S(t,i,s=t,e){if(i===T)return i;let h=void 0!==e?s._$Co?.[e]:s._$Cl;const o=lit_html_c(i)?void 0:i._$litDirective$;return h?.constructor!==o&&(h?._$AO?.(!1),void 0===o?h=void 0:(h=new o(t),h._$AT(t,s,e)),void 0!==e?(s._$Co??=[])[e]=h:s._$Cl=h),void 0!==h&&(i=lit_html_S(t,h._$AS(t,i.values),h,e)),i}class M{constructor(t,i){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:i},parts:s}=this._$AD,e=(t?.creationScope??lit_html_r).importNode(i,!0);C.currentNode=e;let h=C.nextNode(),o=0,n=0,l=s[0];for(;void 0!==l;){if(o===l.index){let i;2===l.type?i=new R(h,h.nextSibling,this,t):1===l.type?i=new l.ctor(h,l.name,l.strings,this,t):6===l.type&&(i=new z(h,this,t)),this._$AV.push(i),l=s[++n]}o!==l?.index&&(h=C.nextNode(),o++)}return C.currentNode=lit_html_r,e}p(t){let i=0;for(const s of this._$AV)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class R{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,i,s,e){this.type=2,this._$AH=E,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cv=e?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t?.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=lit_html_S(this,t,i),lit_html_c(t)?t===E||null==t||\"\"===t?(this._$AH!==E&&this._$AR(),this._$AH=E):t!==this._$AH&&t!==T&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):lit_html_u(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==E&&lit_html_c(this._$AH)?this._$AA.nextSibling.data=t:this.T(lit_html_r.createTextNode(t)),this._$AH=t}$(t){const{values:i,_$litType$:s}=t,e=\"number\"==typeof s?this._$AC(t):(void 0===s.el&&(s.el=N.createElement(P(s.h,s.h[0]),this.options)),s);if(this._$AH?._$AD===e)this._$AH.p(i);else{const t=new M(e,this),s=t.u(this.options);t.p(i),this.T(s),this._$AH=t}}_$AC(t){let i=A.get(t.strings);return void 0===i&&A.set(t.strings,i=new N(t)),i}k(t){lit_html_a(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const h of t)e===i.length?i.push(s=new R(this.O(lit_html_l()),this.O(lit_html_l()),this,this.options)):s=i[e],s._$AI(h),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){for(this._$AP?.(!1,!0,i);t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class k{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,i,s,e,h){this.type=1,this._$AH=E,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=h,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=E}_$AI(t,i=this,s,e){const h=this.strings;let o=!1;if(void 0===h)t=lit_html_S(this,t,i,0),o=!lit_html_c(t)||t!==this._$AH&&t!==T,o&&(this._$AH=t);else{const e=t;let n,r;for(t=h[0],n=0;n<h.length-1;n++)r=lit_html_S(this,e[s+n],i,n),r===T&&(r=this._$AH[n]),o||=!lit_html_c(r)||r!==this._$AH[n],r===E?t=E:t!==E&&(t+=(r??\"\")+h[n+1]),this._$AH[n]=r}o&&!e&&this.j(t)}j(t){t===E?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??\"\")}}class H extends k{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===E?void 0:t}}class I extends k{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==E)}}class L extends k{constructor(t,i,s,e,h){super(t,i,s,e,h),this.type=5}_$AI(t,i=this){if((t=lit_html_S(this,t,i,0)??E)===T)return;const s=this._$AH,e=t===E&&s!==E||t.capture!==s.capture||t.once!==s.once||t.passive!==s.passive,h=t!==E&&(s===E||e);e&&this.element.removeEventListener(this.name,this,s),h&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){\"function\"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class z{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){lit_html_S(this,t)}}const Z={M:lit_html_e,P:lit_html_h,A:lit_html_o,C:1,L:V,R:M,D:lit_html_u,V:lit_html_S,I:R,H:k,N:I,U:L,B:H,F:z},j=lit_html_t.litHtmlPolyfillSupport;j?.(N,R),(lit_html_t.litHtmlVersions??=[]).push(\"3.3.1\");const B=(t,i,s)=>{const e=s?.renderBefore??i;let h=e._$litPart$;if(void 0===h){const t=s?.renderBefore??null;e._$litPart$=h=new R(i.insertBefore(lit_html_l(),t),t,void 0,s??{})}return h._$AI(t),h};\n//# sourceMappingURL=lit-html.js.map\n\n;// ./node_modules/lit-element/lit-element.js\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const lit_element_s=globalThis;class lit_element_i extends y{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const r=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=B(r,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return T}}lit_element_i._$litElement$=!0,lit_element_i[\"finalized\"]=!0,lit_element_s.litElementHydrateSupport?.({LitElement:lit_element_i});const lit_element_o=lit_element_s.litElementPolyfillSupport;lit_element_o?.({LitElement:lit_element_i});const lit_element_n={_$AK:(t,e,r)=>{t._$AK(e,r)},_$AL:t=>t._$AL};(lit_element_s.litElementVersions??=[]).push(\"4.2.1\");\n//# sourceMappingURL=lit-element.js.map\n\n;// ./node_modules/lit/index.js\n\n//# sourceMappingURL=index.js.map\n\n;// ./node_modules/@lit/reactive-element/decorators/custom-element.js\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst custom_element_t=t=>(e,o)=>{void 0!==o?o.addInitializer((()=>{customElements.define(t,e)})):customElements.define(t,e)};\n//# sourceMappingURL=custom-element.js.map\n\n;// ./node_modules/@lit/reactive-element/decorators/property.js\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const property_o={attribute:!0,type:String,converter:u,reflect:!1,hasChanged:f},property_r=(t=property_o,e,r)=>{const{kind:n,metadata:i}=r;let s=globalThis.litPropertyMetadata.get(i);if(void 0===s&&globalThis.litPropertyMetadata.set(i,s=new Map),\"setter\"===n&&((t=Object.create(t)).wrapped=!0),s.set(r.name,t),\"accessor\"===n){const{name:o}=r;return{set(r){const n=e.get.call(this);e.set.call(this,r),this.requestUpdate(o,n,t)},init(e){return void 0!==e&&this.C(o,void 0,t,e),e}}}if(\"setter\"===n){const{name:o}=r;return function(r){const n=this[o];e.call(this,r),this.requestUpdate(o,n,t)}}throw Error(\"Unsupported decorator location: \"+n)};function property_n(t){return(e,o)=>\"object\"==typeof o?property_r(t,e,o):((t,e,o)=>{const r=e.hasOwnProperty(o);return e.constructor.createProperty(o,t),r?Object.getOwnPropertyDescriptor(e,o):void 0})(t,e,o)}\n//# sourceMappingURL=property.js.map\n\n;// ./node_modules/@lit/reactive-element/decorators/state.js\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */function state_r(r){return property_n({...r,state:!0,attribute:!1})}\n//# sourceMappingURL=state.js.map\n\n;// ./node_modules/lit/decorators.js\n\n//# sourceMappingURL=decorators.js.map\n\n;// ./src/core/base-element.ts\n\n\n\nclass DashviewBaseElement extends lit_element_i {\n    shouldUpdate(changedProps) {\n        if (!this.hass) {\n            console.warn('DashviewBaseElement: hass object not available');\n            return false;\n        }\n        return super.shouldUpdate(changedProps);\n    }\n    async callWebSocket(command, data) {\n        if (!this.hass) {\n            throw new Error('Home Assistant connection not available');\n        }\n        try {\n            const result = await this.hass.callWS({\n                type: `dashview_v2/${command}`,\n                ...data,\n            });\n            return result;\n        }\n        catch (error) {\n            console.error(`WebSocket call failed for ${command}:`, error);\n            throw error;\n        }\n    }\n    handleError(error, context) {\n        console.error(`[Dashview V2] Error in ${context}:`, error);\n        // In the future, we can show user-friendly error messages here\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        console.log('DashviewBaseElement connected');\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        console.log('DashviewBaseElement disconnected');\n    }\n}\n__decorate([\n    property_n({ attribute: false }),\n    __metadata(\"design:type\", Object)\n], DashviewBaseElement.prototype, \"hass\", void 0);\n__decorate([\n    property_n({ type: Object }),\n    __metadata(\"design:type\", Object)\n], DashviewBaseElement.prototype, \"config\", void 0);\n\n;// ./src/core/websocket-connection.ts\nclass WebSocketConnection {\n    constructor(hass) {\n        this.hass = hass;\n    }\n    async getHomeInfo() {\n        try {\n            const result = await this.hass.callWS({\n                type: 'dashview_v2/get_home_info',\n            });\n            return result;\n        }\n        catch (error) {\n            console.error('Failed to get home info:', error);\n            throw error;\n        }\n    }\n    async subscribeToStateChanges(callback, entityIds) {\n        if (!this.hass.connection) {\n            throw new Error('WebSocket connection not available');\n        }\n        const unsubscribe = await this.hass.connection.subscribeEvents((event) => {\n            if (!entityIds || entityIds.includes(event.data.entity_id)) {\n                callback(event);\n            }\n        }, 'state_changed');\n        return unsubscribe;\n    }\n    isConnected() {\n        return !!this.hass && !!this.hass.connection;\n    }\n}\n\n;// ./src/utils/logger.ts\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n})(LogLevel || (LogLevel = {}));\nclass Logger {\n    constructor() {\n        this.level = LogLevel.INFO;\n        this.prefix = '[Dashview V2]';\n        // Check if we're in development mode\n        if (false) // removed by dead control flow\n{}\n    }\n    static getInstance() {\n        if (!Logger.instance) {\n            Logger.instance = new Logger();\n        }\n        return Logger.instance;\n    }\n    setLevel(level) {\n        this.level = level;\n    }\n    debug(...args) {\n        if (this.level <= LogLevel.DEBUG) {\n            console.debug(this.prefix, ...args);\n        }\n    }\n    info(...args) {\n        if (this.level <= LogLevel.INFO) {\n            console.info(this.prefix, ...args);\n        }\n    }\n    warn(...args) {\n        if (this.level <= LogLevel.WARN) {\n            console.warn(this.prefix, ...args);\n        }\n    }\n    error(...args) {\n        if (this.level <= LogLevel.ERROR) {\n            console.error(this.prefix, ...args);\n        }\n    }\n}\nconst logger_logger = Logger.getInstance();\n\n;// ./src/core/state-manager.ts\n/**\n * State management for Dashview V2 dashboard.\n * Handles efficient state updates with diffing and batching.\n */\n\nconst state_manager_logger = new Logger('StateManager');\nclass StateManager {\n    constructor(config = {}) {\n        this.updateQueue = [];\n        this.rafId = null;\n        this.lastState = new Map();\n        this.listeners = new Map();\n        this.globalListeners = new Set();\n        this.config = {\n            batchInterval: config.batchInterval ?? 16, // 60fps\n            maxBatchSize: config.maxBatchSize ?? 100,\n        };\n    }\n    /**\n     * Compute differences between old and new state.\n     */\n    computeStateDiff(entityId, newState) {\n        const oldState = this.lastState.get(entityId);\n        if (!oldState) {\n            return {\n                type: 'added',\n                entityId,\n                newState,\n            };\n        }\n        // Quick equality check\n        if (oldState.state === newState.state &&\n            JSON.stringify(oldState.attributes) === JSON.stringify(newState.attributes)) {\n            return null;\n        }\n        // Find changed properties\n        const changedProps = this.getChangedProps(oldState, newState);\n        if (changedProps.length === 0) {\n            return null;\n        }\n        return {\n            type: 'changed',\n            entityId,\n            oldState,\n            newState,\n            changedProps,\n        };\n    }\n    /**\n     * Get list of changed properties between states.\n     */\n    getChangedProps(oldState, newState) {\n        const changed = [];\n        // Check main state\n        if (oldState.state !== newState.state) {\n            changed.push('state');\n        }\n        // Check attributes\n        const oldAttrs = oldState.attributes || {};\n        const newAttrs = newState.attributes || {};\n        const allKeys = new Set([...Object.keys(oldAttrs), ...Object.keys(newAttrs)]);\n        for (const key of allKeys) {\n            if (JSON.stringify(oldAttrs[key]) !== JSON.stringify(newAttrs[key])) {\n                changed.push(`attributes.${key}`);\n            }\n        }\n        // Check last_changed and last_updated\n        if (oldState.last_changed !== newState.last_changed) {\n            changed.push('last_changed');\n        }\n        if (oldState.last_updated !== newState.last_updated) {\n            changed.push('last_updated');\n        }\n        return changed;\n    }\n    /**\n     * Batch state updates for efficient rendering.\n     */\n    batchUpdate(updates) {\n        this.updateQueue.push(...updates);\n        // If we have too many updates, process immediately\n        if (this.updateQueue.length >= this.config.maxBatchSize) {\n            this.processBatch();\n            return;\n        }\n        // Otherwise, schedule processing\n        if (!this.rafId) {\n            this.rafId = requestAnimationFrame(() => {\n                this.processBatch();\n                this.rafId = null;\n            });\n        }\n    }\n    /**\n     * Process a single state update immediately.\n     */\n    updateState(entityId, newState) {\n        this.batchUpdate([{\n                entityId,\n                state: newState,\n                timestamp: Date.now(),\n            }]);\n    }\n    /**\n     * Process all batched updates.\n     */\n    processBatch() {\n        if (this.updateQueue.length === 0) {\n            return;\n        }\n        const startTime = performance.now();\n        const updateMap = new Map();\n        const diffs = [];\n        // Deduplicate updates (keep latest for each entity)\n        for (const update of this.updateQueue) {\n            updateMap.set(update.entityId, update);\n        }\n        // Process each unique update\n        for (const [entityId, update] of updateMap) {\n            const diff = this.computeStateDiff(entityId, update.state);\n            if (diff) {\n                diffs.push(diff);\n                this.lastState.set(entityId, update.state);\n                // Notify entity-specific listeners\n                const entityListeners = this.listeners.get(entityId);\n                if (entityListeners) {\n                    for (const listener of entityListeners) {\n                        try {\n                            listener(diff);\n                        }\n                        catch (error) {\n                            state_manager_logger.error(`Error in entity listener for ${entityId}:`, error);\n                        }\n                    }\n                }\n            }\n        }\n        // Notify global listeners\n        if (diffs.length > 0) {\n            for (const listener of this.globalListeners) {\n                try {\n                    listener(diffs);\n                }\n                catch (error) {\n                    state_manager_logger.error('Error in global state listener:', error);\n                }\n            }\n        }\n        // Clear queue\n        this.updateQueue = [];\n        // Log performance\n        const processingTime = performance.now() - startTime;\n        if (processingTime > this.config.batchInterval) {\n            state_manager_logger.warn(`Batch processing took ${processingTime.toFixed(2)}ms for ${updateMap.size} updates`);\n        }\n    }\n    /**\n     * Subscribe to state changes for a specific entity.\n     */\n    subscribeToEntity(entityId, callback) {\n        if (!this.listeners.has(entityId)) {\n            this.listeners.set(entityId, new Set());\n        }\n        this.listeners.get(entityId).add(callback);\n        // Return unsubscribe function\n        return () => {\n            const listeners = this.listeners.get(entityId);\n            if (listeners) {\n                listeners.delete(callback);\n                if (listeners.size === 0) {\n                    this.listeners.delete(entityId);\n                }\n            }\n        };\n    }\n    /**\n     * Subscribe to all state changes.\n     */\n    subscribeToAll(callback) {\n        this.globalListeners.add(callback);\n        // Return unsubscribe function\n        return () => {\n            this.globalListeners.delete(callback);\n        };\n    }\n    /**\n     * Get current state for an entity.\n     */\n    getState(entityId) {\n        return this.lastState.get(entityId);\n    }\n    /**\n     * Get all current states.\n     */\n    getAllStates() {\n        return new Map(this.lastState);\n    }\n    /**\n     * Initialize state from Home Assistant.\n     */\n    initializeFromHass(hass) {\n        const updates = [];\n        for (const [entityId, state] of Object.entries(hass.states)) {\n            updates.push({\n                entityId,\n                state,\n                timestamp: Date.now(),\n            });\n        }\n        this.batchUpdate(updates);\n        state_manager_logger.info(`Initialized state for ${updates.length} entities`);\n    }\n    /**\n     * Clear all state and listeners.\n     */\n    clear() {\n        if (this.rafId) {\n            cancelAnimationFrame(this.rafId);\n            this.rafId = null;\n        }\n        this.updateQueue = [];\n        this.lastState.clear();\n        this.listeners.clear();\n        this.globalListeners.clear();\n    }\n    /**\n     * Get statistics about the state manager.\n     */\n    getStats() {\n        return {\n            entityCount: this.lastState.size,\n            listenerCount: this.listeners.size + this.globalListeners.size,\n            queueSize: this.updateQueue.length,\n        };\n    }\n}\n\n;// ./src/core/subscription-manager.ts\n/**\n * Subscription manager for smart entity subscriptions.\n * Only subscribes to visible entities to optimize performance.\n */\n\nconst subscription_manager_logger = new Logger('SubscriptionManager');\nclass SubscriptionManager {\n    constructor(websocket, stateManager, config = {}) {\n        this.visibleEntities = new Set();\n        this.subscribedEntities = new Set();\n        this.debounceTimer = null;\n        this.unsubscribeHandler = null;\n        this.websocket = websocket;\n        this.stateManager = stateManager;\n        this.config = {\n            debounceDelay: config.debounceDelay ?? 300,\n            maxSubscriptions: config.maxSubscriptions ?? 500,\n        };\n    }\n    /**\n     * Update the list of visible entities.\n     * This will trigger subscription updates after debouncing.\n     */\n    updateVisibleEntities(entities) {\n        const newVisible = new Set(entities);\n        // Check if there's actually a change\n        const hasChanges = entities.length !== this.visibleEntities.size ||\n            entities.some(id => !this.visibleEntities.has(id));\n        if (!hasChanges) {\n            return;\n        }\n        // Update visible set\n        this.visibleEntities = newVisible;\n        // Debounce the sync operation\n        if (this.debounceTimer) {\n            clearTimeout(this.debounceTimer);\n        }\n        this.debounceTimer = window.setTimeout(() => {\n            this.syncSubscriptions();\n            this.debounceTimer = null;\n        }, this.config.debounceDelay);\n    }\n    /**\n     * Sync subscriptions with the backend.\n     * Subscribes to newly visible entities and unsubscribes from hidden ones.\n     */\n    async syncSubscriptions() {\n        if (!this.websocket.isConnected()) {\n            subscription_manager_logger.warn('WebSocket not connected, skipping subscription sync');\n            return;\n        }\n        try {\n            // Limit subscriptions if needed\n            const targetEntities = Array.from(this.visibleEntities).slice(0, this.config.maxSubscriptions);\n            // Call backend to update subscriptions\n            const result = await this.callUpdateSubscriptions(targetEntities);\n            // Update local tracking\n            this.subscribedEntities = new Set([\n                ...this.subscribedEntities,\n                ...result.subscribed\n            ]);\n            for (const entityId of result.unsubscribed) {\n                this.subscribedEntities.delete(entityId);\n            }\n            subscription_manager_logger.info(`Subscription sync complete: ${result.subscribed.length} added, ` +\n                `${result.unsubscribed.length} removed, ${this.subscribedEntities.size} total`);\n            // Log any failures\n            if (result.failed.length > 0) {\n                subscription_manager_logger.warn(`Failed to subscribe to ${result.failed.length} entities:`, result.failed);\n            }\n        }\n        catch (error) {\n            subscription_manager_logger.error('Failed to sync subscriptions:', error);\n        }\n    }\n    /**\n     * Call the backend WebSocket command to update subscriptions.\n     */\n    async callUpdateSubscriptions(entities) {\n        const hass = this.websocket.hass;\n        const response = await hass.callWS({\n            type: 'dashview_v2/update_subscriptions',\n            entities: entities,\n        });\n        return response;\n    }\n    /**\n     * Subscribe to specific entities immediately.\n     */\n    async subscribeToEntities(entities) {\n        const hass = this.websocket.hass;\n        const response = await hass.callWS({\n            type: 'dashview_v2/subscribe_visible_entities',\n            entities: entities,\n        });\n        // Update local tracking\n        for (const entityId of response.subscribed) {\n            this.subscribedEntities.add(entityId);\n        }\n        return {\n            subscribed: response.subscribed,\n            unsubscribed: [],\n            failed: response.failed || [],\n        };\n    }\n    /**\n     * Unsubscribe from specific entities immediately.\n     */\n    async unsubscribeFromEntities(entities) {\n        const hass = this.websocket.hass;\n        const response = await hass.callWS({\n            type: 'dashview_v2/unsubscribe_hidden_entities',\n            entities: entities,\n        });\n        // Update local tracking\n        for (const entityId of response.unsubscribed) {\n            this.subscribedEntities.delete(entityId);\n        }\n        return {\n            subscribed: [],\n            unsubscribed: response.unsubscribed,\n            failed: response.failed || [],\n        };\n    }\n    /**\n     * Start listening for state changes.\n     * This sets up the WebSocket event listener for state updates.\n     */\n    async startListening() {\n        if (this.unsubscribeHandler) {\n            subscription_manager_logger.warn('Already listening for state changes');\n            return;\n        }\n        try {\n            // Set up WebSocket event listener\n            this.unsubscribeHandler = await this.websocket.subscribeToStateChanges((event) => {\n                if (event.event_type === 'state_changed' && event.data) {\n                    const { entity_id, new_state } = event.data;\n                    // Only process if we're subscribed to this entity\n                    if (this.subscribedEntities.has(entity_id) && new_state) {\n                        this.stateManager.updateState(entity_id, new_state);\n                    }\n                }\n            });\n            subscription_manager_logger.info('Started listening for state changes');\n        }\n        catch (error) {\n            subscription_manager_logger.error('Failed to start listening:', error);\n            throw error;\n        }\n    }\n    /**\n     * Stop listening for state changes.\n     */\n    stopListening() {\n        if (this.unsubscribeHandler) {\n            this.unsubscribeHandler();\n            this.unsubscribeHandler = null;\n            subscription_manager_logger.info('Stopped listening for state changes');\n        }\n    }\n    /**\n     * Get the current list of subscribed entities.\n     */\n    getSubscribedEntities() {\n        return Array.from(this.subscribedEntities);\n    }\n    /**\n     * Get the current list of visible entities.\n     */\n    getVisibleEntities() {\n        return Array.from(this.visibleEntities);\n    }\n    /**\n     * Check if an entity is currently subscribed.\n     */\n    isSubscribed(entityId) {\n        return this.subscribedEntities.has(entityId);\n    }\n    /**\n     * Get subscription statistics.\n     */\n    getStats() {\n        return {\n            visibleCount: this.visibleEntities.size,\n            subscribedCount: this.subscribedEntities.size,\n            maxSubscriptions: this.config.maxSubscriptions,\n        };\n    }\n    /**\n     * Clear all subscriptions and stop listening.\n     */\n    async clear() {\n        // Stop listening\n        this.stopListening();\n        // Clear debounce timer\n        if (this.debounceTimer) {\n            clearTimeout(this.debounceTimer);\n            this.debounceTimer = null;\n        }\n        // Unsubscribe from all entities\n        if (this.subscribedEntities.size > 0) {\n            await this.unsubscribeFromEntities(Array.from(this.subscribedEntities));\n        }\n        // Clear sets\n        this.visibleEntities.clear();\n        this.subscribedEntities.clear();\n        subscription_manager_logger.info('Cleared all subscriptions');\n    }\n}\n\n;// ./src/layouts/base-layout.ts\n/**\n * Base layout class for Dashview V2 dashboard layouts.\n * Provides grid system and responsive breakpoint handling.\n */\nclass BaseLayout {\n    constructor() {\n        this.currentBreakpoint = 'desktop';\n        this.containerWidth = 0;\n        this.config = this.getLayoutConfig();\n    }\n    /**\n     * Get current breakpoint based on container width.\n     */\n    getBreakpoint(width) {\n        const w = width || this.containerWidth;\n        if (w < this.config.breakpoints.tablet) {\n            return 'mobile';\n        }\n        else if (w < this.config.breakpoints.desktop) {\n            return 'tablet';\n        }\n        else if (w < this.config.breakpoints.large) {\n            return 'desktop';\n        }\n        else {\n            return 'large';\n        }\n    }\n    /**\n     * Update container width and return if breakpoint changed.\n     */\n    updateContainerWidth(width) {\n        this.containerWidth = width;\n        const newBreakpoint = this.getBreakpoint(width);\n        if (newBreakpoint !== this.currentBreakpoint) {\n            this.currentBreakpoint = newBreakpoint;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Get number of columns for current breakpoint.\n     */\n    getColumnCount(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        switch (bp) {\n            case 'mobile':\n                return 4;\n            case 'tablet':\n                return 8;\n            case 'desktop':\n                return 12;\n            case 'large':\n                return 12;\n            default:\n                return 12;\n        }\n    }\n    /**\n     * Get grid gap size for current breakpoint.\n     */\n    getGridGap(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        switch (bp) {\n            case 'mobile':\n                return '8px';\n            case 'tablet':\n                return '12px';\n            case 'desktop':\n                return '16px';\n            case 'large':\n                return '20px';\n            default:\n                return '16px';\n        }\n    }\n    /**\n     * Get container padding for current breakpoint.\n     */\n    getContainerPadding(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        switch (bp) {\n            case 'mobile':\n                return '8px';\n            case 'tablet':\n                return '16px';\n            case 'desktop':\n                return '24px';\n            case 'large':\n                return '32px';\n            default:\n                return '24px';\n        }\n    }\n    /**\n     * Check if layout is suitable for given area count.\n     */\n    isSuitableForAreaCount(areaCount) {\n        return areaCount >= this.config.minAreas &&\n            areaCount <= this.config.maxAreas;\n    }\n    /**\n     * Sort widgets by priority for placement.\n     */\n    sortWidgetsByPriority(widgets) {\n        // Priority order: room > climate > device-group > quick-controls\n        const priorityMap = {\n            'room': 4,\n            'climate': 3,\n            'device-group': 2,\n            'quick-controls': 1,\n        };\n        return [...widgets].sort((a, b) => {\n            const priorityA = priorityMap[a.type] || 0;\n            const priorityB = priorityMap[b.type] || 0;\n            // Sort by priority first\n            if (priorityA !== priorityB) {\n                return priorityB - priorityA;\n            }\n            // Then by entity count\n            return b.entities.length - a.entities.length;\n        });\n    }\n    /**\n     * Group widgets by type.\n     */\n    groupWidgetsByType(widgets) {\n        const groups = new Map();\n        for (const widget of widgets) {\n            const type = widget.type;\n            if (!groups.has(type)) {\n                groups.set(type, []);\n            }\n            groups.get(type).push(widget);\n        }\n        return groups;\n    }\n    /**\n     * Generate CSS for grid template.\n     */\n    generateGridCSS(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        const template = this.generateGridTemplate(bp);\n        const gap = this.getGridGap(bp);\n        const padding = this.getContainerPadding(bp);\n        return `\n      display: grid;\n      grid-template: ${template};\n      gap: ${gap};\n      padding: ${padding};\n      width: 100%;\n      height: 100%;\n      box-sizing: border-box;\n    `;\n    }\n    /**\n     * Get layout metadata.\n     */\n    getMetadata() {\n        return {\n            name: this.config.name,\n            description: this.config.description,\n            currentBreakpoint: this.currentBreakpoint,\n            supportedAreaRange: [this.config.minAreas, this.config.maxAreas],\n        };\n    }\n}\n\n;// ./src/layouts/standard-layout.ts\n/**\n * Standard layout for 2-3 bedroom homes.\n * Optimized grid layout with room widgets in main area,\n * device groups in sidebar, climate in header, and quick controls in footer.\n */\n\nclass StandardLayout extends BaseLayout {\n    getLayoutConfig() {\n        return {\n            name: 'Standard',\n            description: 'Optimized layout for 2-3 bedroom homes',\n            minAreas: 2,\n            maxAreas: 5,\n            breakpoints: {\n                mobile: 768,\n                tablet: 1024,\n                desktop: 1440,\n                large: 1920,\n            },\n        };\n    }\n    generateGridTemplate(breakpoint) {\n        switch (breakpoint) {\n            case 'mobile':\n                // Single column layout\n                return `\n          \"header\" auto\n          \"main\" 1fr\n          \"sidebar\" auto\n          \"footer\" auto\n          / 1fr\n        `;\n            case 'tablet':\n                // Two column layout\n                return `\n          \"header header\" auto\n          \"main main\" 1fr\n          \"sidebar sidebar\" auto\n          \"footer footer\" auto\n          / 1fr 1fr\n        `;\n            case 'desktop':\n                // Three column layout with sidebar\n                return `\n          \"header header header\" auto\n          \"main main sidebar\" 1fr\n          \"footer footer footer\" auto\n          / 1fr 1fr minmax(280px, 0.5fr)\n        `;\n            case 'large':\n                // Three column layout with larger sidebar\n                return `\n          \"header header header\" auto\n          \"main main sidebar\" 1fr\n          \"footer footer footer\" auto\n          / 1fr 1fr minmax(320px, 0.6fr)\n        `;\n            default:\n                return this.generateGridTemplate('desktop');\n        }\n    }\n    getGridAreas(breakpoint) {\n        const areas = [\n            {\n                name: 'header',\n                gridArea: 'header',\n                minWidgets: 0,\n                maxWidgets: 2,\n                widgetTypes: ['climate', 'quick-controls'],\n            },\n            {\n                name: 'main',\n                gridArea: 'main',\n                minWidgets: 1,\n                maxWidgets: 6,\n                widgetTypes: ['room'],\n            },\n            {\n                name: 'sidebar',\n                gridArea: 'sidebar',\n                minWidgets: 0,\n                maxWidgets: 4,\n                widgetTypes: ['device-group', 'quick-controls'],\n            },\n            {\n                name: 'footer',\n                gridArea: 'footer',\n                minWidgets: 0,\n                maxWidgets: 1,\n                widgetTypes: ['quick-controls'],\n            },\n        ];\n        // Adjust for mobile\n        if (breakpoint === 'mobile') {\n            // On mobile, everything stacks vertically\n            areas.forEach(area => {\n                if (area.name === 'main') {\n                    area.maxWidgets = 4; // Limit room widgets on mobile\n                }\n            });\n        }\n        return areas;\n    }\n    calculateWidgetPositions(widgets, areaCount) {\n        const positions = [];\n        const sortedWidgets = this.sortWidgetsByPriority(widgets);\n        const widgetsByType = this.groupWidgetsByType(sortedWidgets);\n        // Place climate widgets in header\n        const climateWidgets = widgetsByType.get('climate') || [];\n        climateWidgets.slice(0, 1).forEach((widget, index) => {\n            positions.push({\n                widgetId: this.generateWidgetId(widget),\n                gridArea: 'header',\n                order: index,\n            });\n        });\n        // Place room widgets in main area\n        const roomWidgets = widgetsByType.get('room') || [];\n        const mainColumns = this.currentBreakpoint === 'mobile' ? 1 : 2;\n        const mainRows = Math.ceil(roomWidgets.length / mainColumns);\n        roomWidgets.slice(0, 6).forEach((widget, index) => {\n            const col = (index % mainColumns) + 1;\n            const row = Math.floor(index / mainColumns) + 1;\n            positions.push({\n                widgetId: this.generateWidgetId(widget),\n                gridArea: 'main',\n                gridColumn: this.currentBreakpoint === 'mobile'\n                    ? '1'\n                    : `${col} / span 1`,\n                gridRow: `${row} / span 1`,\n                order: index,\n            });\n        });\n        // Place device groups in sidebar\n        const deviceGroups = widgetsByType.get('device-group') || [];\n        deviceGroups.slice(0, 3).forEach((widget, index) => {\n            positions.push({\n                widgetId: this.generateWidgetId(widget),\n                gridArea: 'sidebar',\n                order: index,\n            });\n        });\n        // Place quick controls\n        const quickControls = widgetsByType.get('quick-controls') || [];\n        if (quickControls.length > 0) {\n            // First quick controls in footer\n            positions.push({\n                widgetId: this.generateWidgetId(quickControls[0]),\n                gridArea: 'footer',\n                order: 0,\n            });\n            // Additional quick controls in sidebar\n            quickControls.slice(1, 3).forEach((widget, index) => {\n                positions.push({\n                    widgetId: this.generateWidgetId(widget),\n                    gridArea: 'sidebar',\n                    order: deviceGroups.length + index,\n                });\n            });\n        }\n        return positions;\n    }\n    /**\n     * Generate a unique widget ID.\n     */\n    generateWidgetId(widget) {\n        // Use type and first entity as ID\n        const firstEntity = widget.entities[0] || 'unknown';\n        return `${widget.type}-${firstEntity.replace(/\\./g, '_')}`;\n    }\n    /**\n     * Get recommended widget configuration for area count.\n     */\n    getRecommendedWidgets(areaCount) {\n        // Base recommendations\n        const config = {\n            roomWidgets: Math.min(areaCount, 4),\n            deviceGroups: 2,\n            climateWidgets: 1,\n            quickControls: 1,\n        };\n        // Adjust based on area count\n        if (areaCount <= 2) {\n            // Small home: fewer widgets\n            config.roomWidgets = areaCount;\n            config.deviceGroups = 1;\n        }\n        else if (areaCount >= 4) {\n            // Larger home: more widgets\n            config.deviceGroups = 3;\n            config.quickControls = 2;\n        }\n        // Adjust for breakpoint\n        if (this.currentBreakpoint === 'mobile') {\n            config.roomWidgets = Math.min(config.roomWidgets, 3);\n            config.deviceGroups = Math.min(config.deviceGroups, 2);\n        }\n        return config;\n    }\n    /**\n     * Get CSS for specific grid areas.\n     */\n    getAreaStyles(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        const baseStyles = {\n            header: `\n        grid-area: header;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 16px;\n        align-items: center;\n      `,\n            main: `\n        grid-area: main;\n        display: grid;\n        gap: 16px;\n        align-content: start;\n      `,\n            sidebar: `\n        grid-area: sidebar;\n        display: flex;\n        flex-direction: column;\n        gap: 16px;\n      `,\n            footer: `\n        grid-area: footer;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      `,\n        };\n        // Adjust main grid for different breakpoints\n        if (bp === 'mobile') {\n            baseStyles.main += `\n        grid-template-columns: 1fr;\n      `;\n        }\n        else {\n            baseStyles.main += `\n        grid-template-columns: repeat(2, 1fr);\n      `;\n        }\n        return baseStyles;\n    }\n}\n\n;// ./src/layouts/layout-engine.ts\n/**\n * Layout engine for Dashview V2.\n * Handles layout selection, widget organization, and overflow management.\n */\n\n\nconst layout_engine_logger = new Logger('LayoutEngine');\nclass LayoutEngine {\n    constructor(config = {}) {\n        this.currentLayout = null;\n        this.config = {\n            maxWidgetsPerArea: config.maxWidgetsPerArea ?? 2,\n            prioritizeByUsage: config.prioritizeByUsage ?? true,\n        };\n        // Initialize available layouts\n        this.layouts = new Map();\n        this.registerLayout('standard', new StandardLayout());\n        // Future layouts can be registered here:\n        // this.registerLayout('compact', new CompactLayout());\n        // this.registerLayout('complex', new ComplexLayout());\n        // this.registerLayout('estate', new EstateLayout());\n    }\n    /**\n     * Register a layout.\n     */\n    registerLayout(name, layout) {\n        this.layouts.set(name, layout);\n        layout_engine_logger.info(`Registered layout: ${name}`);\n    }\n    /**\n     * Select optimal layout based on complexity score.\n     */\n    selectLayout(complexityScore, areaCount) {\n        // For now, we only have StandardLayout\n        // In the future, this will select based on complexity\n        let selectedLayout;\n        let selectedName = '';\n        // Find suitable layout for area count\n        for (const [name, layout] of this.layouts) {\n            if (layout.isSuitableForAreaCount(areaCount)) {\n                selectedLayout = layout;\n                selectedName = name;\n                break;\n            }\n        }\n        // Fallback to standard if no suitable layout found\n        if (!selectedLayout) {\n            selectedLayout = this.layouts.get('standard');\n            selectedName = 'standard';\n            layout_engine_logger.warn(`No suitable layout for ${areaCount} areas, using standard layout`);\n        }\n        this.currentLayout = selectedLayout;\n        layout_engine_logger.info(`Selected ${selectedName} layout for complexity ${complexityScore} and ${areaCount} areas`);\n        return selectedLayout;\n    }\n    /**\n     * Organize widgets based on areas and layout.\n     */\n    organizeWidgets(areas) {\n        const widgets = [];\n        // Sort areas by entity count and priority\n        const sortedAreas = this.sortAreasByPriority(areas);\n        // Create room widgets for each area\n        for (const area of sortedAreas) {\n            if (area.entityCount === 0)\n                continue;\n            const roomWidget = {\n                type: 'room',\n                entities: area.entities,\n                title: area.name,\n            };\n            widgets.push(roomWidget);\n        }\n        // Create device group widgets\n        const deviceGroups = this.createDeviceGroups(areas);\n        widgets.push(...deviceGroups);\n        // Create climate widget if climate entities exist\n        const climateWidget = this.createClimateWidget(areas);\n        if (climateWidget) {\n            widgets.push(climateWidget);\n        }\n        // Create quick controls widget\n        const quickControls = this.createQuickControlsWidget(areas);\n        if (quickControls) {\n            widgets.push(quickControls);\n        }\n        layout_engine_logger.info(`Organized ${widgets.length} widgets from ${areas.length} areas`);\n        return widgets;\n    }\n    /**\n     * Handle widget overflow for current layout.\n     */\n    handleOverflow(widgets, layout, breakpoint) {\n        const areas = layout.getGridAreas(breakpoint);\n        const visible = [];\n        const overflow = [];\n        // Group widgets by type\n        const widgetsByType = new Map();\n        for (const widget of widgets) {\n            if (!widgetsByType.has(widget.type)) {\n                widgetsByType.set(widget.type, []);\n            }\n            widgetsByType.get(widget.type).push(widget);\n        }\n        // Place widgets according to area constraints\n        for (const area of areas) {\n            let remainingSlots = area.maxWidgets || 999;\n            for (const widgetType of area.widgetTypes || []) {\n                const availableWidgets = widgetsByType.get(widgetType) || [];\n                for (const widget of availableWidgets) {\n                    if (remainingSlots > 0 && !visible.includes(widget)) {\n                        visible.push(widget);\n                        remainingSlots--;\n                    }\n                    else if (!visible.includes(widget) && !overflow.includes(widget)) {\n                        overflow.push(widget);\n                    }\n                }\n            }\n        }\n        layout_engine_logger.info(`Layout overflow: ${visible.length} visible, ${overflow.length} overflow`);\n        return { visible, overflow };\n    }\n    /**\n     * Sort areas by priority.\n     */\n    sortAreasByPriority(areas) {\n        return [...areas].sort((a, b) => {\n            // Prioritize named areas over \"unassigned\"\n            if (a.areaId === 'unassigned')\n                return 1;\n            if (b.areaId === 'unassigned')\n                return -1;\n            // Prioritize by entity count\n            if (a.entityCount !== b.entityCount) {\n                return b.entityCount - a.entityCount;\n            }\n            // Then by device count\n            return b.deviceCount - a.deviceCount;\n        });\n    }\n    /**\n     * Create device group widgets.\n     */\n    createDeviceGroups(areas) {\n        const groups = [];\n        const allEntities = [];\n        // Collect all entities\n        for (const area of areas) {\n            allEntities.push(...area.entities);\n        }\n        // Group by domain\n        const entityByDomain = new Map();\n        for (const entityId of allEntities) {\n            const domain = entityId.split('.')[0];\n            if (!entityByDomain.has(domain)) {\n                entityByDomain.set(domain, []);\n            }\n            entityByDomain.get(domain).push(entityId);\n        }\n        // Create groups for specific domains\n        const groupableDomains = ['light', 'switch', 'cover', 'fan'];\n        for (const domain of groupableDomains) {\n            const entities = entityByDomain.get(domain) || [];\n            if (entities.length >= 3) { // Only create group if enough entities\n                groups.push({\n                    type: 'device-group',\n                    entities: entities,\n                    title: `All ${domain}s`,\n                });\n            }\n        }\n        return groups;\n    }\n    /**\n     * Create climate widget.\n     */\n    createClimateWidget(areas) {\n        const climateEntities = [];\n        for (const area of areas) {\n            for (const entityId of area.entities) {\n                if (entityId.startsWith('climate.') ||\n                    entityId.includes('temperature') ||\n                    entityId.includes('humidity')) {\n                    climateEntities.push(entityId);\n                }\n            }\n        }\n        if (climateEntities.length === 0) {\n            return null;\n        }\n        return {\n            type: 'climate',\n            entities: climateEntities,\n            title: 'Climate Control',\n        };\n    }\n    /**\n     * Create quick controls widget.\n     */\n    createQuickControlsWidget(areas) {\n        const quickEntities = [];\n        // Find most important entities (scenes, main lights, etc.)\n        for (const area of areas) {\n            for (const entityId of area.entities) {\n                if (entityId.startsWith('scene.') ||\n                    entityId.includes('main') ||\n                    entityId.includes('all')) {\n                    quickEntities.push(entityId);\n                }\n            }\n        }\n        // Limit to reasonable number\n        const limitedEntities = quickEntities.slice(0, 8);\n        if (limitedEntities.length === 0) {\n            return null;\n        }\n        return {\n            type: 'quick-controls',\n            entities: limitedEntities,\n            title: 'Quick Controls',\n        };\n    }\n    /**\n     * Get current layout.\n     */\n    getCurrentLayout() {\n        return this.currentLayout;\n    }\n    /**\n     * Calculate widget positions for current layout.\n     */\n    calculatePositions(widgets, areaCount) {\n        if (!this.currentLayout) {\n            layout_engine_logger.error('No layout selected');\n            return [];\n        }\n        return this.currentLayout.calculateWidgetPositions(widgets, areaCount);\n    }\n    /**\n     * Update container width and check for breakpoint changes.\n     */\n    updateContainerWidth(width) {\n        if (!this.currentLayout) {\n            return false;\n        }\n        return this.currentLayout.updateContainerWidth(width);\n    }\n}\n\n;// ./src/styles/theme.ts\n\nconst dashviewTheme = i `\n  :host {\n    --dashview-primary-color: var(--primary-color);\n    --dashview-primary-text-color: var(--primary-text-color);\n    --dashview-secondary-text-color: var(--secondary-text-color);\n    --dashview-disabled-text-color: var(--disabled-text-color);\n    --dashview-divider-color: var(--divider-color);\n    --dashview-error-color: var(--error-color);\n    --dashview-success-color: var(--success-color);\n    --dashview-warning-color: var(--warning-color);\n    --dashview-info-color: var(--info-color);\n    --dashview-background: var(--lovelace-background, var(--primary-background-color));\n    --dashview-card-background: var(--card-background-color);\n    --dashview-spacing-xs: 4px;\n    --dashview-spacing-sm: 8px;\n    --dashview-spacing-md: 16px;\n    --dashview-spacing-lg: 24px;\n    --dashview-spacing-xl: 32px;\n    --dashview-border-radius: var(--ha-card-border-radius, 12px);\n    --dashview-box-shadow: var(--ha-card-box-shadow, none);\n  }\n`;\nconst dashviewStyles = i `\n  * {\n    box-sizing: border-box;\n  }\n\n  .dashview-container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    background: var(--dashview-background);\n  }\n\n  .dashview-header {\n    padding: var(--dashview-spacing-lg);\n    background: var(--dashview-card-background);\n    border-bottom: 1px solid var(--dashview-divider-color);\n    box-shadow: var(--dashview-box-shadow);\n  }\n\n  .dashview-content {\n    flex: 1;\n    padding: var(--dashview-spacing-lg);\n    overflow-y: auto;\n  }\n\n  .dashview-card {\n    background: var(--dashview-card-background);\n    border-radius: var(--dashview-border-radius);\n    padding: var(--dashview-spacing-lg);\n    margin-bottom: var(--dashview-spacing-md);\n    box-shadow: var(--dashview-box-shadow);\n  }\n\n  .dashview-loading {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    color: var(--dashview-secondary-text-color);\n  }\n\n  .dashview-error {\n    color: var(--dashview-error-color);\n    padding: var(--dashview-spacing-md);\n    text-align: center;\n  }\n\n  @media (max-width: 768px) {\n    .dashview-header {\n      padding: var(--dashview-spacing-md);\n    }\n\n    .dashview-content {\n      padding: var(--dashview-spacing-md);\n    }\n  }\n`;\n\n;// ./src/utils/gestures.ts\n/**\n * Touch gesture utilities for Dashview V2.\n * Provides swipe detection, long press handling, and haptic feedback.\n */\nconst DEFAULT_OPTIONS = {\n    swipeThreshold: 50,\n    longPressDelay: 500,\n    velocityThreshold: 0.3,\n    preventScroll: false\n};\nclass GestureHandler {\n    constructor(element, options = {}) {\n        this.startX = 0;\n        this.startY = 0;\n        this.startTime = 0;\n        this.isLongPress = false;\n        this.isSwiping = false;\n        this.element = element;\n        this.options = { ...DEFAULT_OPTIONS, ...options };\n        this.bindEvents();\n    }\n    onSwipeDetected(callback) {\n        this.onSwipe = callback;\n    }\n    onLongPressDetected(callback) {\n        this.onLongPress = callback;\n    }\n    onTapDetected(callback) {\n        this.onTap = callback;\n    }\n    bindEvents() {\n        this.element.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: !this.options.preventScroll });\n        this.element.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: !this.options.preventScroll });\n        this.element.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true });\n        this.element.addEventListener('touchcancel', this.handleTouchCancel.bind(this), { passive: true });\n    }\n    handleTouchStart(event) {\n        const touch = event.touches[0];\n        this.startX = touch.clientX;\n        this.startY = touch.clientY;\n        this.startTime = Date.now();\n        this.isLongPress = false;\n        this.isSwiping = false;\n        // Start long press timer\n        if (this.onLongPress) {\n            this.longPressTimeout = window.setTimeout(() => {\n                this.isLongPress = true;\n                this.onLongPress({\n                    element: this.element,\n                    x: this.startX,\n                    y: this.startY\n                });\n                this.triggerHapticFeedback('medium');\n            }, this.options.longPressDelay);\n        }\n    }\n    handleTouchMove(event) {\n        if (this.isLongPress)\n            return;\n        const touch = event.touches[0];\n        const deltaX = Math.abs(touch.clientX - this.startX);\n        const deltaY = Math.abs(touch.clientY - this.startY);\n        // Cancel long press if moving too much\n        if ((deltaX > 10 || deltaY > 10) && this.longPressTimeout) {\n            clearTimeout(this.longPressTimeout);\n            this.longPressTimeout = undefined;\n        }\n        // Detect swipe start\n        if (!this.isSwiping && (deltaX > this.options.swipeThreshold || deltaY > this.options.swipeThreshold)) {\n            this.isSwiping = true;\n            if (this.options.preventScroll) {\n                event.preventDefault();\n            }\n        }\n    }\n    handleTouchEnd(event) {\n        const touch = event.changedTouches[0];\n        const endTime = Date.now();\n        const deltaX = touch.clientX - this.startX;\n        const deltaY = touch.clientY - this.startY;\n        const duration = endTime - this.startTime;\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n        // Clear long press timer\n        if (this.longPressTimeout) {\n            clearTimeout(this.longPressTimeout);\n            this.longPressTimeout = undefined;\n        }\n        if (this.isLongPress) {\n            // Long press already handled\n            return;\n        }\n        if (this.isSwiping && distance >= this.options.swipeThreshold) {\n            // Handle swipe\n            const velocity = distance / duration;\n            if (velocity >= this.options.velocityThreshold) {\n                const direction = this.getSwipeDirection(deltaX, deltaY);\n                if (this.onSwipe) {\n                    this.onSwipe({\n                        direction,\n                        distance,\n                        velocity,\n                        element: this.element\n                    });\n                }\n                this.triggerHapticFeedback('light');\n            }\n        }\n        else if (!this.isSwiping && duration < 200) {\n            // Handle tap\n            if (this.onTap) {\n                this.onTap(event);\n            }\n        }\n        this.reset();\n    }\n    handleTouchCancel() {\n        if (this.longPressTimeout) {\n            clearTimeout(this.longPressTimeout);\n            this.longPressTimeout = undefined;\n        }\n        this.reset();\n    }\n    getSwipeDirection(deltaX, deltaY) {\n        const absDeltaX = Math.abs(deltaX);\n        const absDeltaY = Math.abs(deltaY);\n        if (absDeltaX > absDeltaY) {\n            return deltaX > 0 ? 'right' : 'left';\n        }\n        else {\n            return deltaY > 0 ? 'down' : 'up';\n        }\n    }\n    reset() {\n        this.isLongPress = false;\n        this.isSwiping = false;\n    }\n    triggerHapticFeedback(intensity) {\n        if ('vibrate' in navigator) {\n            const patterns = {\n                light: 10,\n                medium: 20,\n                heavy: 50\n            };\n            navigator.vibrate(patterns[intensity]);\n        }\n    }\n    destroy() {\n        if (this.longPressTimeout) {\n            clearTimeout(this.longPressTimeout);\n        }\n        this.element.removeEventListener('touchstart', this.handleTouchStart.bind(this));\n        this.element.removeEventListener('touchmove', this.handleTouchMove.bind(this));\n        this.element.removeEventListener('touchend', this.handleTouchEnd.bind(this));\n        this.element.removeEventListener('touchcancel', this.handleTouchCancel.bind(this));\n    }\n}\n/**\n * Simple swipe detection for elements\n */\nfunction addSwipeListener(element, callback, options) {\n    const handler = new GestureHandler(element, options);\n    handler.onSwipeDetected(callback);\n    return () => handler.destroy();\n}\n/**\n * Simple long press detection for elements\n */\nfunction addLongPressListener(element, callback, options) {\n    const handler = new GestureHandler(element, options);\n    handler.onLongPressDetected(callback);\n    return () => handler.destroy();\n}\n/**\n * Haptic feedback utilities\n */\nclass HapticFeedback {\n    static isSupported() {\n        return 'vibrate' in navigator;\n    }\n    static light() {\n        if (this.isSupported()) {\n            navigator.vibrate(10);\n        }\n    }\n    static medium() {\n        if (this.isSupported()) {\n            navigator.vibrate(20);\n        }\n    }\n    static heavy() {\n        if (this.isSupported()) {\n            navigator.vibrate([50, 50, 50]);\n        }\n    }\n    static success() {\n        if (this.isSupported()) {\n            navigator.vibrate([10, 100, 10]);\n        }\n    }\n    static error() {\n        if (this.isSupported()) {\n            navigator.vibrate([100, 50, 100, 50, 100]);\n        }\n    }\n    static selection() {\n        if (this.isSupported()) {\n            navigator.vibrate(5);\n        }\n    }\n    static custom(pattern) {\n        if (this.isSupported()) {\n            navigator.vibrate(pattern);\n        }\n    }\n}\n/**\n * Touch target size helpers\n */\nconst TouchTarget = {\n    /**\n     * Minimum touch target size (44px) as per WCAG guidelines\n     */\n    MIN_SIZE: 44,\n    /**\n     * Check if an element meets minimum touch target requirements\n     */\n    meetsMinimumSize(element) {\n        const rect = element.getBoundingClientRect();\n        return rect.width >= this.MIN_SIZE && rect.height >= this.MIN_SIZE;\n    },\n    /**\n     * Add touch target padding to an element if needed\n     */\n    ensureMinimumSize(element) {\n        const rect = element.getBoundingClientRect();\n        if (rect.width < this.MIN_SIZE) {\n            const padding = (this.MIN_SIZE - rect.width) / 2;\n            element.style.paddingLeft = `${padding}px`;\n            element.style.paddingRight = `${padding}px`;\n        }\n        if (rect.height < this.MIN_SIZE) {\n            const padding = (this.MIN_SIZE - rect.height) / 2;\n            element.style.paddingTop = `${padding}px`;\n            element.style.paddingBottom = `${padding}px`;\n        }\n    }\n};\n/**\n * Gesture-enabled base class for Lit elements\n */\nclass GestureElement extends (/* unused pure expression or super */ null && (EventTarget)) {\n    enableGestures(element, options) {\n        this.gestureHandler = new GestureHandler(element, options);\n        this.gestureHandler.onSwipeDetected((event) => {\n            this.dispatchEvent(new CustomEvent('gesture-swipe', { detail: event }));\n        });\n        this.gestureHandler.onLongPressDetected((event) => {\n            this.dispatchEvent(new CustomEvent('gesture-longpress', { detail: event }));\n        });\n        this.gestureHandler.onTapDetected((event) => {\n            this.dispatchEvent(new CustomEvent('gesture-tap', { detail: event }));\n        });\n    }\n    disableGestures() {\n        if (this.gestureHandler) {\n            this.gestureHandler.destroy();\n            this.gestureHandler = undefined;\n        }\n    }\n}\n\n;// ./src/styles/animations.ts\n/**\n * Animation constants and utilities for Dashview V2 widgets.\n * Provides consistent timing, easing, and keyframe animations.\n */\n\nconst ANIMATION_DURATION = {\n    fast: '150ms',\n    normal: '250ms',\n    slow: '350ms'\n};\nconst EASING = {\n    standard: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n    decelerate: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n    accelerate: 'cubic-bezier(0.4, 0.0, 1, 1)',\n    sharp: 'cubic-bezier(0.4, 0.0, 0.6, 1)'\n};\n/**\n * Skeleton loading animation styles\n */\nconst skeletonStyles = i `\n  @keyframes skeleton-loading {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n  \n  .skeleton {\n    background: linear-gradient(\n      90deg,\n      var(--card-background-color) 0%,\n      var(--divider-color) 50%,\n      var(--card-background-color) 100%\n    );\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s ease-in-out infinite;\n    border-radius: 4px;\n  }\n  \n  .skeleton-text {\n    height: 16px;\n    margin: 4px 0;\n  }\n  \n  .skeleton-text.large {\n    height: 20px;\n  }\n  \n  .skeleton-text.small {\n    height: 12px;\n  }\n  \n  .skeleton-button {\n    height: 36px;\n    width: 100px;\n  }\n  \n  .skeleton-icon {\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n  }\n  \n  .skeleton-card {\n    height: 120px;\n    width: 100%;\n    border-radius: 8px;\n  }\n`;\n/**\n * Smooth expand/collapse animation styles\n */\nconst expandCollapseStyles = i `\n  @keyframes expand {\n    from {\n      max-height: 0;\n      opacity: 0;\n    }\n    to {\n      max-height: 600px;\n      opacity: 1;\n    }\n  }\n  \n  @keyframes collapse {\n    from {\n      max-height: 600px;\n      opacity: 1;\n    }\n    to {\n      max-height: 0;\n      opacity: 0;\n    }\n  }\n  \n  .expand-enter {\n    animation: expand 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n    overflow: hidden;\n  }\n  \n  .collapse-exit {\n    animation: collapse 250ms cubic-bezier(0.4, 0.0, 1, 1);\n    overflow: hidden;\n  }\n  \n  .content-expandable {\n    overflow: hidden;\n    transition: max-height 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n  }\n  \n  .content-collapsed {\n    max-height: 0;\n  }\n  \n  .content-expanded {\n    max-height: 600px;\n  }\n`;\n/**\n * Touch interaction animations\n */\nconst touchStyles = i `\n  @keyframes touch-feedback {\n    0% { transform: scale(1); }\n    50% { transform: scale(0.95); }\n    100% { transform: scale(1); }\n  }\n  \n  .touch-target {\n    min-height: 44px;\n    min-width: 44px;\n    cursor: pointer;\n    -webkit-tap-highlight-color: transparent;\n    transition: transform 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n  \n  .touch-target:active {\n    animation: touch-feedback 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n  \n  .touch-target:hover {\n    background: var(--secondary-background-color);\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    .touch-target:active {\n      animation: none;\n      transform: scale(0.98);\n    }\n  }\n`;\n/**\n * Loading spinner animation\n */\nconst spinnerStyles = i `\n  @keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n  \n  .spinner {\n    animation: spin 1s linear infinite;\n  }\n  \n  .loading-dots {\n    display: inline-flex;\n    gap: 4px;\n  }\n  \n  .loading-dots::after {\n    content: '';\n    animation: loading-dots 1.5s ease-in-out infinite;\n  }\n  \n  @keyframes loading-dots {\n    0%, 20% { content: ''; }\n    40% { content: '.'; }\n    60% { content: '..'; }\n    80%, 100% { content: '...'; }\n  }\n`;\n/**\n * Fade in/out animations\n */\nconst fadeStyles = i `\n  @keyframes fade-in {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n  \n  @keyframes fade-out {\n    from { opacity: 1; }\n    to { opacity: 0; }\n  }\n  \n  .fade-in {\n    animation: fade-in 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n  }\n  \n  .fade-out {\n    animation: fade-out 250ms cubic-bezier(0.4, 0.0, 1, 1);\n  }\n  \n  .fade-transition {\n    transition: opacity 250ms cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n`;\n/**\n * Slide animations for mobile interactions\n */\nconst slideStyles = i `\n  @keyframes slide-in-right {\n    from { transform: translateX(100%); }\n    to { transform: translateX(0); }\n  }\n  \n  @keyframes slide-in-left {\n    from { transform: translateX(-100%); }\n    to { transform: translateX(0); }\n  }\n  \n  @keyframes slide-out-right {\n    from { transform: translateX(0); }\n    to { transform: translateX(100%); }\n  }\n  \n  @keyframes slide-out-left {\n    from { transform: translateX(0); }\n    to { transform: translateX(-100%); }\n  }\n  \n  .slide-in-right {\n    animation: slide-in-right 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n  }\n  \n  .slide-in-left {\n    animation: slide-in-left 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n  }\n  \n  .slide-out-right {\n    animation: slide-out-right 250ms cubic-bezier(0.4, 0.0, 1, 1);\n  }\n  \n  .slide-out-left {\n    animation: slide-out-left 250ms cubic-bezier(0.4, 0.0, 1, 1);\n  }\n`;\n/**\n * Combined animation styles for easy import\n */\nconst animationStyles = i `\n  ${skeletonStyles}\n  ${expandCollapseStyles}\n  ${touchStyles}\n  ${spinnerStyles}\n  ${fadeStyles}\n  ${slideStyles}\n  \n  /* Respect user's motion preferences */\n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n    }\n  }\n`;\n\n;// ./src/core/widget-base.ts\n/**\n * Base class for all Dashview widgets.\n * Provides lifecycle management, state handling, and visibility tracking.\n */\nvar _a;\n\n\n\n\n\n\nclass DashviewWidget extends DashviewBaseElement {\n    constructor() {\n        super(...arguments);\n        this.entityStates = new Map();\n        this.isVisible = false;\n        this.isLoading = true;\n        this.error = null;\n        this.stateUnsubscribers = [];\n        this.keyboardHandlers = new Map();\n    }\n    /**\n     * Get the list of entity IDs this widget wants to subscribe to.\n     * Can be overridden by subclasses for dynamic subscriptions.\n     */\n    subscribedEntities() {\n        return this.widgetConfig?.entities || [];\n    }\n    /**\n     * Called when widget configuration is set.\n     * Subclasses should override to validate their specific config.\n     */\n    setConfig(config) {\n        if (!config) {\n            throw new Error('Invalid configuration');\n        }\n        const errors = this.validateConfig(config);\n        if (errors.length > 0) {\n            throw new Error(`Configuration errors: ${errors.join(', ')}`);\n        }\n        this.widgetConfig = config;\n    }\n    /**\n     * Validate widget configuration.\n     * Returns array of error messages, empty if valid.\n     */\n    validateConfig(config) {\n        const errors = [];\n        if (!config.type) {\n            errors.push('Widget type is required');\n        }\n        if (!config.entities || !Array.isArray(config.entities)) {\n            errors.push('Entities must be an array');\n        }\n        return errors;\n    }\n    /**\n     * Called when entity state changes.\n     * Subclasses can override to handle state changes.\n     */\n    onStateChanged(entityId, newState, oldState) {\n        // Default implementation updates the local state map\n        if (newState) {\n            this.entityStates.set(entityId, newState);\n        }\n        else {\n            this.entityStates.delete(entityId);\n        }\n    }\n    /**\n     * Lifecycle: Called when element is added to DOM.\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.setupVisibilityObserver();\n        this.setupKeyboardHandlers();\n    }\n    /**\n     * Lifecycle: Called after first update.\n     */\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.initializeWidget();\n    }\n    /**\n     * Lifecycle: Called when element is removed from DOM.\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.cleanup();\n    }\n    /**\n     * Initialize the widget.\n     */\n    async initializeWidget() {\n        try {\n            this.isLoading = true;\n            this.error = null;\n            // Get managers from dashboard context\n            this.stateManager = this.getStateManager();\n            this.subscriptionManager = this.getSubscriptionManager();\n            if (!this.stateManager || !this.subscriptionManager) {\n                throw new Error('State or subscription manager not available');\n            }\n            // Load initial entity states\n            await this.loadInitialStates();\n            // Subscribe to state changes\n            this.subscribeToStateChanges();\n            this.isLoading = false;\n        }\n        catch (error) {\n            this.error = error instanceof Error ? error.message : 'Unknown error';\n            this.isLoading = false;\n            this.handleError(error, 'Widget initialization');\n        }\n    }\n    /**\n     * Get state manager from dashboard context.\n     * This should be provided by the parent dashboard.\n     */\n    getStateManager() {\n        // Try to get from parent dashboard element\n        const dashboard = this.closest('dashview-dashboard');\n        return dashboard?.stateManager;\n    }\n    /**\n     * Get subscription manager from dashboard context.\n     */\n    getSubscriptionManager() {\n        const dashboard = this.closest('dashview-dashboard');\n        return dashboard?.subscriptionManager;\n    }\n    /**\n     * Load initial states for all entities.\n     */\n    async loadInitialStates() {\n        const entities = this.subscribedEntities();\n        for (const entityId of entities) {\n            const state = this.hass.states[entityId];\n            if (state) {\n                this.entityStates.set(entityId, state);\n            }\n        }\n    }\n    /**\n     * Subscribe to state changes for our entities.\n     */\n    subscribeToStateChanges() {\n        if (!this.stateManager)\n            return;\n        const entities = this.subscribedEntities();\n        for (const entityId of entities) {\n            const unsubscribe = this.stateManager.subscribeToEntity(entityId, (diff) => {\n                this.onStateChanged(diff.entityId, diff.newState, diff.oldState);\n            });\n            this.stateUnsubscribers.push(unsubscribe);\n        }\n    }\n    /**\n     * Setup intersection observer for visibility tracking.\n     */\n    setupVisibilityObserver() {\n        this.intersectionObserver = new IntersectionObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === this) {\n                    this.handleVisibilityChange(entry.isIntersecting);\n                }\n            }\n        }, {\n            root: null,\n            rootMargin: '50px', // Start loading slightly before visible\n            threshold: 0.01,\n        });\n        this.intersectionObserver.observe(this);\n    }\n    /**\n     * Handle visibility changes.\n     */\n    handleVisibilityChange(isVisible) {\n        if (this.isVisible === isVisible)\n            return;\n        this.isVisible = isVisible;\n        if (isVisible) {\n            this.onBecameVisible();\n        }\n        else {\n            this.onBecameHidden();\n        }\n        // Update subscriptions based on visibility\n        this.updateSubscriptions();\n    }\n    /**\n     * Called when widget becomes visible.\n     * Subclasses can override for custom behavior.\n     */\n    onBecameVisible() {\n        // Default: no action\n    }\n    /**\n     * Called when widget becomes hidden.\n     * Subclasses can override for custom behavior.\n     */\n    onBecameHidden() {\n        // Default: no action\n    }\n    /**\n     * Update subscriptions based on current visibility.\n     */\n    updateSubscriptions() {\n        if (!this.subscriptionManager)\n            return;\n        const entities = this.subscribedEntities();\n        if (this.isVisible) {\n            // Widget is visible, ensure we're subscribed\n            const visibleEntities = this.subscriptionManager.getVisibleEntities();\n            const allVisible = new Set([...visibleEntities, ...entities]);\n            this.subscriptionManager.updateVisibleEntities(Array.from(allVisible));\n        }\n        else {\n            // Widget is hidden, we could unsubscribe\n            // But this is handled globally by the dashboard\n        }\n    }\n    /**\n     * Clean up resources.\n     */\n    cleanup() {\n        // Unsubscribe from state changes\n        for (const unsubscribe of this.stateUnsubscribers) {\n            unsubscribe();\n        }\n        this.stateUnsubscribers = [];\n        // Clean up intersection observer\n        if (this.intersectionObserver) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = undefined;\n        }\n        // Clean up keyboard handlers\n        this.removeKeyboardHandlers();\n        // Cancel any pending animation frames\n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n        }\n        // Clear state\n        this.entityStates.clear();\n    }\n    /**\n     * Helper to call Home Assistant service.\n     */\n    async callService(domain, service, data) {\n        try {\n            await this.hass.callService(domain, service, data);\n        }\n        catch (error) {\n            this.handleError(error, `Service call ${domain}.${service}`);\n            throw error;\n        }\n    }\n    /**\n     * Helper to toggle an entity.\n     */\n    async toggleEntity(entityId) {\n        const domain = entityId.split('.')[0];\n        await this.callService(domain, 'toggle', { entity_id: entityId });\n    }\n    /**\n     * Helper to turn on an entity.\n     */\n    async turnOn(entityId, data) {\n        const domain = entityId.split('.')[0];\n        await this.callService(domain, 'turn_on', { entity_id: entityId, ...data });\n    }\n    /**\n     * Helper to turn off an entity.\n     */\n    async turnOff(entityId) {\n        const domain = entityId.split('.')[0];\n        await this.callService(domain, 'turn_off', { entity_id: entityId });\n    }\n    /**\n     * Trigger haptic feedback with the specified intensity.\n     */\n    triggerHapticFeedback(intensity) {\n        HapticFeedback[intensity]();\n    }\n    /**\n     * Animate an element with the specified animation.\n     */\n    animateElement(element, animation, duration) {\n        return new Promise((resolve) => {\n            const animationDuration = duration || ANIMATION_DURATION.normal;\n            element.style.animation = `${animation} ${animationDuration} ${EASING.standard}`;\n            const handleAnimationEnd = () => {\n                element.style.animation = '';\n                element.removeEventListener('animationend', handleAnimationEnd);\n                resolve();\n            };\n            element.addEventListener('animationend', handleAnimationEnd);\n        });\n    }\n    /**\n     * Focus management helper.\n     */\n    focusElement(element, options) {\n        element.focus(options);\n    }\n    /**\n     * Set up keyboard event handlers for accessibility.\n     */\n    setupKeyboardHandlers() {\n        // Default keyboard handlers\n        this.addKeyboardHandler('Escape', this.handleEscapeKey.bind(this));\n        this.addKeyboardHandler('Tab', this.handleTabKey.bind(this));\n        this.addEventListener('keydown', this.handleKeydown.bind(this));\n    }\n    /**\n     * Remove keyboard event handlers.\n     */\n    removeKeyboardHandlers() {\n        this.keyboardHandlers.clear();\n        this.removeEventListener('keydown', this.handleKeydown.bind(this));\n    }\n    /**\n     * Add a keyboard event handler.\n     */\n    addKeyboardHandler(key, handler) {\n        this.keyboardHandlers.set(key, handler);\n    }\n    /**\n     * Handle keyboard events.\n     */\n    handleKeydown(event) {\n        const handler = this.keyboardHandlers.get(event.key);\n        if (handler) {\n            handler(event);\n        }\n    }\n    /**\n     * Handle Escape key (default: blur active element).\n     */\n    handleEscapeKey(_event) {\n        const activeElement = this.shadowRoot?.activeElement;\n        if (activeElement) {\n            activeElement.blur();\n        }\n    }\n    /**\n     * Handle Tab key for focus management.\n     */\n    handleTabKey(_event) {\n        // Default behavior - could be overridden by subclasses\n    }\n    /**\n     * Get all focusable elements within the widget.\n     */\n    getFocusableElements() {\n        const focusableSelectors = [\n            'button:not([disabled])',\n            'input:not([disabled])',\n            'select:not([disabled])',\n            'textarea:not([disabled])',\n            'a[href]',\n            '[tabindex]:not([tabindex=\"-1\"])',\n            'ha-icon-button:not([disabled])',\n            'mwc-button:not([disabled])',\n            'ha-switch:not([disabled])'\n        ].join(', ');\n        const elements = this.shadowRoot?.querySelectorAll(focusableSelectors) || [];\n        return Array.from(elements);\n    }\n}\n/**\n * Base styles for all widgets.\n */\nDashviewWidget.styles = i `\n    :host {\n      display: block;\n      position: relative;\n    }\n\n    .widget-container {\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .widget-loading {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n      color: var(--primary-text-color);\n    }\n\n    .widget-error {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n      color: var(--error-color, #f44336);\n      padding: 16px;\n      text-align: center;\n    }\n  `;\n__decorate([\n    property_n({ type: Object }),\n    __metadata(\"design:type\", Object)\n], DashviewWidget.prototype, \"widgetConfig\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", typeof (_a = typeof Map !== \"undefined\" && Map) === \"function\" ? _a : Object)\n], DashviewWidget.prototype, \"entityStates\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewWidget.prototype, \"isVisible\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewWidget.prototype, \"isLoading\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewWidget.prototype, \"error\", void 0);\n\n;// ./src/utils/icons.ts\n/**\n * Entity type to icon mapping utility.\n * Maps entity types and domains to Material Design Icons.\n */\nconst ENTITY_ICONS = {\n    // Lights\n    'light': 'mdi:lightbulb',\n    'light.ceiling': 'mdi:ceiling-light',\n    'light.floor': 'mdi:floor-lamp',\n    'light.desk': 'mdi:desk-lamp',\n    'light.strip': 'mdi:led-strip-variant',\n    'light.spot': 'mdi:spotlight-beam',\n    // Climate\n    'climate': 'mdi:thermostat',\n    'temperature': 'mdi:thermometer',\n    'humidity': 'mdi:water-percent',\n    'air_quality': 'mdi:air-filter',\n    // Security\n    'lock': 'mdi:lock',\n    'door': 'mdi:door',\n    'window': 'mdi:window-closed',\n    'motion': 'mdi:motion-sensor',\n    'presence': 'mdi:home-account',\n    'camera': 'mdi:cctv',\n    'alarm': 'mdi:shield-home',\n    // Media\n    'media_player': 'mdi:television',\n    'speaker': 'mdi:speaker',\n    'remote': 'mdi:remote',\n    // Switches & Controls\n    'switch': 'mdi:light-switch',\n    'fan': 'mdi:fan',\n    'cover': 'mdi:window-shutter',\n    'blind': 'mdi:blinds',\n    'curtain': 'mdi:curtains',\n    // Sensors\n    'sensor': 'mdi:eye',\n    'binary_sensor': 'mdi:radiobox-marked',\n    'battery': 'mdi:battery',\n    'power': 'mdi:flash',\n    'energy': 'mdi:lightning-bolt',\n    // Other devices\n    'vacuum': 'mdi:robot-vacuum',\n    'person': 'mdi:account',\n    'device_tracker': 'mdi:cellphone',\n    'sun': 'mdi:weather-sunny',\n    'weather': 'mdi:weather-partly-cloudy',\n    // Default\n    'default': 'mdi:home-assistant'\n};\nfunction getEntityIcon(entityId, state) {\n    // Check custom icon first\n    if (state?.attributes?.icon) {\n        return state.attributes.icon;\n    }\n    // Check device class for more specific icons\n    const deviceClass = state?.attributes?.device_class;\n    if (deviceClass && ENTITY_ICONS[deviceClass]) {\n        return ENTITY_ICONS[deviceClass];\n    }\n    // Match by entity ID patterns\n    for (const [pattern, icon] of Object.entries(ENTITY_ICONS)) {\n        if (entityId.includes(pattern)) {\n            return icon;\n        }\n    }\n    // Domain fallback\n    const domain = entityId.split('.')[0];\n    return ENTITY_ICONS[domain] || ENTITY_ICONS.default;\n}\n/**\n * Get icon color based on entity state and domain.\n */\nfunction getEntityIconColor(entityId, state) {\n    const domain = entityId.split('.')[0];\n    const isOn = state?.state === 'on';\n    const isActive = ['playing', 'open', 'unlocked', 'home', 'detected'].includes(state?.state);\n    const isUnavailable = state?.state === 'unavailable';\n    if (isUnavailable) {\n        return 'var(--disabled-text-color)';\n    }\n    // Domain-specific colors when active\n    if (isOn || isActive) {\n        switch (domain) {\n            case 'light':\n                return state?.attributes?.rgb_color\n                    ? `rgb(${state.attributes.rgb_color.join(',')})`\n                    : 'var(--primary-color)';\n            case 'climate':\n                const mode = state?.state;\n                if (mode === 'heat')\n                    return '#ff6b00';\n                if (mode === 'cool')\n                    return '#0288d1';\n                if (mode === 'heat_cool' || mode === 'auto')\n                    return '#388e3c';\n                return 'var(--primary-color)';\n            case 'lock':\n                return state?.state === 'locked' ? '#4caf50' : '#f44336';\n            case 'alarm_control_panel':\n                if (state?.state === 'armed_away')\n                    return '#f44336';\n                if (state?.state === 'armed_home')\n                    return '#ff9800';\n                if (state?.state === 'disarmed')\n                    return '#4caf50';\n                return 'var(--primary-color)';\n            default:\n                return 'var(--primary-color)';\n        }\n    }\n    return 'var(--secondary-text-color)';\n}\n/**\n * Get a mini icon for entity summaries.\n */\nfunction getMiniIcon(entityType) {\n    const miniIcons = {\n        'lights': 'mdi:lightbulb',\n        'temperature': 'mdi:thermometer',\n        'humidity': 'mdi:water-percent',\n        'motion': 'mdi:motion-sensor',\n        'doors': 'mdi:door',\n        'windows': 'mdi:window-closed',\n        'media': 'mdi:television',\n        'climate': 'mdi:thermostat'\n    };\n    return miniIcons[entityType] || 'mdi:circle';\n}\n\n;// ./src/widgets/room-widget.ts\n/**\n * Room widget for Dashview V2.\n * Displays all entities in a room with summary and controls.\n */\nvar room_widget_a, _b;\n\n\n\n\n\n\nlet RoomWidget = class RoomWidget extends DashviewWidget {\n    constructor() {\n        super(...arguments);\n        this.expanded = false;\n        this.lightCount = 0;\n        this.lightsOn = 0;\n        this.groupedEntities = {};\n    }\n    subscribedEntities() {\n        // Subscribe to all entities when expanded, or just key entities when collapsed\n        if (this.expanded || this.entityStates.size < 10) {\n            return this.widgetConfig?.entities || [];\n        }\n        // When collapsed with many entities, only subscribe to key entities\n        const entities = this.widgetConfig?.entities || [];\n        return entities.filter(id => id.includes('motion') ||\n            id.includes('door') ||\n            id.includes('presence') ||\n            id.includes('temperature') ||\n            id.includes('humidity') ||\n            id.startsWith('light.'));\n    }\n    getDefaultConfig() {\n        return {\n            type: 'room',\n            entities: [],\n            showEmpty: false,\n        };\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.updateSummary();\n    }\n    onStateChanged(entityId, newState, oldState) {\n        super.onStateChanged(entityId, newState, oldState);\n        this.updateSummary();\n    }\n    updateSummary() {\n        let lightCount = 0;\n        let lightsOn = 0;\n        let temperature;\n        let humidity;\n        let lastMotion;\n        // Group entities by type for better organization\n        this.groupedEntities = this.groupEntitiesByType();\n        for (const [entityId, state] of this.entityStates) {\n            if (entityId.startsWith('light.')) {\n                lightCount++;\n                if (state.state === 'on') {\n                    lightsOn++;\n                }\n            }\n            else if (entityId.includes('temperature') && state.state !== 'unavailable') {\n                const temp = parseFloat(state.state);\n                if (!isNaN(temp)) {\n                    temperature = temp;\n                }\n            }\n            else if (entityId.includes('humidity') && state.state !== 'unavailable') {\n                const hum = parseFloat(state.state);\n                if (!isNaN(hum)) {\n                    humidity = hum;\n                }\n            }\n            else if (entityId.includes('motion') || entityId.includes('presence')) {\n                if (state.state === 'on' && state.last_changed) {\n                    const motionTime = new Date(state.last_changed);\n                    if (!lastMotion || motionTime > lastMotion) {\n                        lastMotion = motionTime;\n                    }\n                }\n            }\n        }\n        this.lightCount = lightCount;\n        this.lightsOn = lightsOn;\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.lastMotion = lastMotion;\n    }\n    render() {\n        const roomName = this.areaName || this.widgetConfig?.title || 'Unknown Room';\n        if (this.isLoading) {\n            return this.renderSkeleton();\n        }\n        if (this.error) {\n            return x `\n        <div class=\"widget-error\">\n          ${this.error}\n        </div>\n      `;\n        }\n        return x `\n      <ha-card role=\"region\" aria-label=\"${roomName} room controls\">\n        <div class=\"header touch-target\" @click=${this.toggleExpanded} @keydown=${this.handleHeaderKeydown}>\n          <h2>${roomName}</h2>\n          <div class=\"summary\">\n            ${this.renderSummary()}\n          </div>\n          <ha-icon\n            class=\"expand-icon ${this.expanded ? 'expanded' : ''}\"\n            icon=\"mdi:chevron-down\"\n            aria-label=\"${this.expanded ? 'Collapse' : 'Expand'} room details\"\n          ></ha-icon>\n        </div>\n        \n        <div class=\"content ${this.expanded ? 'expanded' : 'collapsed'}\">\n          ${this.renderExpanded()}\n        </div>\n        \n        <div class=\"actions\">\n          ${this.lightCount > 0 ? x `\n            <mwc-button @click=${this.turnAllLightsOff} aria-label=\"Turn all lights off\">\n              <ha-icon icon=\"mdi:lightbulb-off\"></ha-icon>\n              All Off\n            </mwc-button>\n          ` : ''}\n        </div>\n      </ha-card>\n    `;\n    }\n    renderSummary() {\n        const summary = [];\n        // Light status\n        if (this.lightCount > 0) {\n            summary.push(x `\n        <span class=\"summary-item\">\n          <ha-icon icon=\"mdi:lightbulb\"></ha-icon>\n          ${this.lightsOn}/${this.lightCount}\n        </span>\n      `);\n        }\n        // Temperature\n        if (this.temperature !== undefined) {\n            summary.push(x `\n        <span class=\"summary-item\">\n          <ha-icon icon=\"mdi:thermometer\"></ha-icon>\n          ${this.temperature.toFixed(1)}°\n        </span>\n      `);\n        }\n        // Humidity\n        if (this.humidity !== undefined) {\n            summary.push(x `\n        <span class=\"summary-item\">\n          <ha-icon icon=\"mdi:water-percent\"></ha-icon>\n          ${this.humidity.toFixed(0)}%\n        </span>\n      `);\n        }\n        // Last motion\n        if (this.lastMotion) {\n            const minutesAgo = Math.floor((Date.now() - this.lastMotion.getTime()) / 60000);\n            const timeStr = minutesAgo < 1 ? 'now' :\n                minutesAgo < 60 ? `${minutesAgo}m ago` :\n                    `${Math.floor(minutesAgo / 60)}h ago`;\n            summary.push(x `\n        <span class=\"summary-item\">\n          <ha-icon icon=\"mdi:motion-sensor\"></ha-icon>\n          ${timeStr}\n        </span>\n      `);\n        }\n        return summary;\n    }\n    renderExpanded() {\n        return x `\n      <div class=\"entity-list\">\n        ${Object.entries(this.groupedEntities).map(([type, entities]) => this.renderEntityGroup(type, entities))}\n      </div>\n    `;\n    }\n    renderEntity(entityId) {\n        const state = this.entityStates.get(entityId);\n        if (!state)\n            return x ``;\n        const name = state.attributes.friendly_name || entityId;\n        const domain = entityId.split('.')[0];\n        const isToggleable = ['light', 'switch', 'fan', 'input_boolean'].includes(domain);\n        const icon = getEntityIcon(entityId, state);\n        const iconColor = getEntityIconColor(entityId, state);\n        return x `\n      <div class=\"entity-item touch-target\" @click=${isToggleable ? () => this.toggleEntity(entityId) : undefined}>\n        <ha-icon \n          class=\"entity-icon ${state.state} ${state.state === 'unavailable' ? 'unavailable' : ''}\"\n          icon=\"${icon}\"\n          style=\"color: ${iconColor}\"\n        ></ha-icon>\n        <span class=\"entity-name\">${name}</span>\n        <div class=\"entity-controls\">\n          ${isToggleable ? x `\n            <ha-switch\n              .checked=${state.state === 'on'}\n              @change=${(e) => {\n            e.stopPropagation();\n            this.toggleEntity(entityId);\n        }}\n              aria-label=\"Toggle ${name}\"\n            ></ha-switch>\n          ` : x `\n            <span class=\"entity-state\">${state.state}</span>\n          `}\n        </div>\n      </div>\n    `;\n    }\n    getSortedEntities() {\n        const entities = Array.from(this.entityStates.keys());\n        // Sort by domain priority, then by name\n        const domainPriority = {\n            'light': 1,\n            'switch': 2,\n            'fan': 3,\n            'climate': 4,\n            'cover': 5,\n            'sensor': 6,\n            'binary_sensor': 7,\n        };\n        return entities.sort((a, b) => {\n            const domainA = a.split('.')[0];\n            const domainB = b.split('.')[0];\n            const priorityA = domainPriority[domainA] || 999;\n            const priorityB = domainPriority[domainB] || 999;\n            if (priorityA !== priorityB) {\n                return priorityA - priorityB;\n            }\n            return a.localeCompare(b);\n        });\n    }\n    toggleExpanded() {\n        this.expanded = !this.expanded;\n        // Update subscriptions when expanding/collapsing\n        if (this.expanded) {\n            this.updateSubscriptions();\n        }\n    }\n    handleHeaderKeydown(event) {\n        if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            this.toggleExpanded();\n        }\n    }\n    groupEntitiesByType() {\n        const groups = {};\n        for (const entityId of this.entityStates.keys()) {\n            const domain = entityId.split('.')[0];\n            // Group by domain with friendly names\n            const groupName = this.getDomainGroupName(domain);\n            if (!groups[groupName]) {\n                groups[groupName] = [];\n            }\n            groups[groupName].push(entityId);\n        }\n        // Sort entities within each group\n        for (const [groupName, entities] of Object.entries(groups)) {\n            groups[groupName] = entities.sort((a, b) => {\n                const stateA = this.entityStates.get(a);\n                const stateB = this.entityStates.get(b);\n                const nameA = stateA?.attributes?.friendly_name || a;\n                const nameB = stateB?.attributes?.friendly_name || b;\n                return nameA.localeCompare(nameB);\n            });\n        }\n        return groups;\n    }\n    getDomainGroupName(domain) {\n        const domainNames = {\n            'light': 'Lights',\n            'switch': 'Switches',\n            'fan': 'Fans',\n            'climate': 'Climate',\n            'cover': 'Covers',\n            'lock': 'Locks',\n            'sensor': 'Sensors',\n            'binary_sensor': 'Binary Sensors',\n            'media_player': 'Media',\n            'camera': 'Cameras',\n            'alarm_control_panel': 'Security'\n        };\n        return domainNames[domain] || domain.charAt(0).toUpperCase() + domain.slice(1);\n    }\n    renderEntityGroup(type, entities) {\n        if (entities.length === 0)\n            return x ``;\n        const typeIcons = {\n            'Lights': 'mdi:lightbulb',\n            'Switches': 'mdi:light-switch',\n            'Sensors': 'mdi:eye',\n            'Climate': 'mdi:thermostat',\n            'Media': 'mdi:television',\n            'Covers': 'mdi:window-shutter',\n            'Locks': 'mdi:lock',\n            'Fans': 'mdi:fan',\n            'Cameras': 'mdi:cctv',\n            'Security': 'mdi:shield-home'\n        };\n        return x `\n      <div class=\"entity-group\">\n        <div class=\"entity-group-header\">\n          <ha-icon icon=${typeIcons[type] || 'mdi:home'}></ha-icon>\n          <span>${type}</span>\n          <span class=\"count\">(${entities.length})</span>\n        </div>\n        ${entities.map(entity => this.renderEntity(entity))}\n      </div>\n    `;\n    }\n    renderSkeleton() {\n        return x `\n      <ha-card>\n        <div class=\"header\">\n          <div class=\"skeleton skeleton-text large\" style=\"width: 120px;\"></div>\n          <div class=\"summary\">\n            <div class=\"skeleton skeleton-text\" style=\"width: 40px;\"></div>\n            <div class=\"skeleton skeleton-text\" style=\"width: 50px;\"></div>\n            <div class=\"skeleton skeleton-text\" style=\"width: 45px;\"></div>\n          </div>\n          <div class=\"skeleton skeleton-icon\"></div>\n        </div>\n      </ha-card>\n    `;\n    }\n    async turnAllLightsOff() {\n        const lights = Array.from(this.entityStates.keys()).filter(id => id.startsWith('light.') && this.entityStates.get(id)?.state === 'on');\n        for (const light of lights) {\n            await this.turnOff(light);\n        }\n    }\n};\nRoomWidget.styles = i `\n    ${DashviewWidget.styles}\n    ${skeletonStyles}\n    ${touchStyles}\n      ha-card {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .header {\n        padding: 16px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        border-radius: 8px;\n        -webkit-tap-highlight-color: transparent;\n        transition: background 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n      }\n\n      .header:hover {\n        background: var(--secondary-background-color);\n      }\n\n      .header:focus {\n        outline: 2px solid var(--primary-color);\n        outline-offset: 2px;\n      }\n\n      .header h2 {\n        margin: 0;\n        font-size: 1.2em;\n        font-weight: 500;\n        flex: 1;\n      }\n\n      .summary {\n        display: flex;\n        gap: 16px;\n        align-items: center;\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n      }\n\n      .summary-item {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n      }\n\n      .summary-item ha-icon {\n        --mdc-icon-size: 16px;\n      }\n\n      .expand-icon {\n        transition: transform 250ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        --mdc-icon-size: 24px;\n      }\n\n      .expand-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      /* Enhanced content with smooth animations */\n      .content {\n        overflow: hidden;\n        transition: max-height 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n      }\n\n      .content.collapsed {\n        max-height: 0;\n      }\n\n      .content.expanded {\n        max-height: 600px;\n      }\n\n      .entity-list {\n        display: flex;\n        flex-direction: column;\n        gap: 2px;\n        max-height: 400px;\n        overflow-y: auto;\n        scrollbar-width: thin;\n        padding: 0 16px 16px;\n      }\n\n      .entity-group {\n        margin-bottom: 16px;\n      }\n\n      .entity-group:last-child {\n        margin-bottom: 0;\n      }\n\n      .entity-group-header {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        padding: 8px 0;\n        font-weight: 500;\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n        border-bottom: 1px solid var(--divider-color);\n        margin-bottom: 8px;\n      }\n\n      .entity-group-header ha-icon {\n        --mdc-icon-size: 18px;\n      }\n\n      .count {\n        opacity: 0.7;\n        font-size: 0.85em;\n      }\n\n      .entity-item {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        padding: 12px;\n        border-radius: 8px;\n        transition: all 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        min-height: 44px;\n        cursor: pointer;\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      .entity-item:hover {\n        background: var(--secondary-background-color);\n      }\n\n      .entity-item:active {\n        transform: scale(0.98);\n      }\n\n      .entity-icon {\n        --mdc-icon-size: 24px;\n        transition: color 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        flex-shrink: 0;\n      }\n\n      .entity-icon.unavailable {\n        color: var(--disabled-text-color);\n      }\n\n      .entity-name {\n        flex: 1;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        font-size: 0.95em;\n      }\n\n      .entity-controls {\n        display: flex;\n        align-items: center;\n        flex-shrink: 0;\n      }\n\n      .entity-state {\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n        text-align: right;\n        min-width: 60px;\n      }\n\n      .actions {\n        padding: 8px 16px;\n        border-top: 1px solid var(--divider-color);\n        display: flex;\n        justify-content: flex-end;\n        gap: 8px;\n      }\n\n      .actions:empty {\n        display: none;\n      }\n\n      mwc-button {\n        --mdc-theme-primary: var(--primary-color);\n        min-height: 44px;\n      }\n\n      mwc-button ha-icon {\n        margin-right: 4px;\n      }\n\n      /* Mobile optimizations */\n      @media (max-width: 768px) {\n        .header {\n          padding: 12px;\n        }\n\n        .summary {\n          gap: 12px;\n          font-size: 0.85em;\n        }\n\n        .entity-item {\n          padding: 10px 12px;\n        }\n\n        .entity-name {\n          font-size: 0.9em;\n        }\n      }\n\n      /* Accessibility enhancements */\n      @media (prefers-reduced-motion: reduce) {\n        .header,\n        .expand-icon,\n        .entity-item,\n        .entity-icon,\n        .content {\n          transition: none;\n        }\n\n        .entity-item:active {\n          transform: none;\n        }\n      }\n\n      /* Focus indicators */\n      .entity-item:focus,\n      ha-switch:focus {\n        outline: 2px solid var(--primary-color);\n        outline-offset: 2px;\n      }\n    `;\n__decorate([\n    property_n({ type: String }),\n    __metadata(\"design:type\", String)\n], RoomWidget.prototype, \"areaId\", void 0);\n__decorate([\n    property_n({ type: String }),\n    __metadata(\"design:type\", String)\n], RoomWidget.prototype, \"areaName\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], RoomWidget.prototype, \"expanded\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], RoomWidget.prototype, \"lightCount\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], RoomWidget.prototype, \"lightsOn\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Number)\n], RoomWidget.prototype, \"temperature\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Number)\n], RoomWidget.prototype, \"humidity\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", typeof (room_widget_a = typeof Date !== \"undefined\" && Date) === \"function\" ? room_widget_a : Object)\n], RoomWidget.prototype, \"lastMotion\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", typeof (_b = typeof Record !== \"undefined\" && Record) === \"function\" ? _b : Object)\n], RoomWidget.prototype, \"groupedEntities\", void 0);\nRoomWidget = __decorate([\n    custom_element_t('dashview-room-widget')\n], RoomWidget);\n\n\n;// ./src/widgets/device-group-widget.ts\n/**\n * Device group widget for Dashview V2.\n * Groups and displays devices by type (switches, sensors, etc).\n */\n\n\n\n\nlet DeviceGroupWidget = class DeviceGroupWidget extends DashviewWidget {\n    constructor() {\n        super(...arguments);\n        this.deviceType = 'switch';\n        this.expanded = false;\n        this.groupedEntities = [];\n        this.onlineCount = 0;\n        this.activeCount = 0;\n    }\n    subscribedEntities() {\n        // Subscribe to all entities when expanded, or just active ones when collapsed\n        const entities = this.widgetConfig?.entities || [];\n        if (this.expanded) {\n            return entities;\n        }\n        // When collapsed, only subscribe to active entities\n        return entities.filter(id => {\n            const state = this.entityStates.get(id);\n            return state && state.state !== 'unavailable' && state.state !== 'unknown';\n        });\n    }\n    getDefaultConfig() {\n        return {\n            type: 'device-group',\n            deviceType: 'switch',\n            entities: [],\n            showOffline: false,\n            showGroupControls: true,\n        };\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.updateGroupedEntities();\n    }\n    onStateChanged(entityId, newState, oldState) {\n        super.onStateChanged(entityId, newState, oldState);\n        this.updateGroupedEntities();\n    }\n    updateGroupedEntities() {\n        const grouped = [];\n        let onlineCount = 0;\n        let activeCount = 0;\n        for (const [entityId, state] of this.entityStates) {\n            const isOnline = state.state !== 'unavailable' && state.state !== 'unknown';\n            const isToggleable = this.isToggleableEntity(entityId);\n            const isActive = isToggleable ? state.state === 'on' : isOnline;\n            if (isOnline)\n                onlineCount++;\n            if (isActive)\n                activeCount++;\n            grouped.push({\n                entityId,\n                name: state.attributes.friendly_name || entityId.split('.')[1].replace(/_/g, ' '),\n                state: state.state,\n                icon: state.attributes.icon || this.getDefaultIcon(entityId),\n                lastChanged: state.last_changed ? new Date(state.last_changed) : undefined,\n                isToggleable,\n                isOnline,\n            });\n        }\n        // Sort by online status, then by state, then by name\n        grouped.sort((a, b) => {\n            if (a.isOnline !== b.isOnline)\n                return b.isOnline ? 1 : -1;\n            if (a.state !== b.state) {\n                if (a.state === 'on')\n                    return -1;\n                if (b.state === 'on')\n                    return 1;\n            }\n            return a.name.localeCompare(b.name);\n        });\n        this.groupedEntities = grouped;\n        this.onlineCount = onlineCount;\n        this.activeCount = activeCount;\n    }\n    isToggleableEntity(entityId) {\n        const domain = entityId.split('.')[0];\n        return ['switch', 'light', 'fan', 'input_boolean', 'cover'].includes(domain);\n    }\n    getDefaultIcon(entityId) {\n        const domain = entityId.split('.')[0];\n        const iconMap = {\n            'switch': 'mdi:toggle-switch',\n            'sensor': 'mdi:eye',\n            'binary_sensor': 'mdi:radiobox-blank',\n            'cover': 'mdi:window-shutter',\n            'fan': 'mdi:fan',\n            'light': 'mdi:lightbulb',\n        };\n        return iconMap[domain] || 'mdi:devices';\n    }\n    render() {\n        const title = this.groupName ||\n            this.widgetConfig?.title ||\n            `${this.deviceType.charAt(0).toUpperCase() + this.deviceType.slice(1)}s`;\n        if (this.isLoading) {\n            return x `\n        <div class=\"widget-loading\">\n          Loading devices...\n        </div>\n      `;\n        }\n        if (this.error) {\n            return x `\n        <div class=\"widget-error\">\n          ${this.error}\n        </div>\n      `;\n        }\n        const config = this.widgetConfig;\n        const showOffline = config?.showOffline ?? false;\n        const filteredEntities = showOffline ?\n            this.groupedEntities :\n            this.groupedEntities.filter(e => e.isOnline);\n        return x `\n      <ha-card>\n        <div class=\"header\" @click=${this.toggleExpanded}>\n          <div class=\"header-content\">\n            <h2>${title}</h2>\n            <div class=\"device-count\">\n              ${this.activeCount}/${this.onlineCount}\n            </div>\n          </div>\n          <ha-icon\n            class=\"expand-icon ${this.expanded ? 'expanded' : ''}\"\n            icon=\"mdi:chevron-down\"\n          ></ha-icon>\n        </div>\n\n        ${this.expanded ? x `\n          <div class=\"entities\">\n            ${filteredEntities.length === 0 ? x `\n              <div class=\"empty-state\">\n                No ${showOffline ? '' : 'online'} devices found\n              </div>\n            ` : filteredEntities.map(entity => this.renderEntity(entity))}\n          </div>\n        ` : ''}\n\n        ${this.renderActions()}\n      </ha-card>\n    `;\n    }\n    renderEntity(entity) {\n        const stateDisplay = this.getStateDisplay(entity);\n        const stateClass = entity.isOnline ? '' : 'offline';\n        return x `\n      <div class=\"entity-row ${stateClass}\">\n        <ha-icon \n          icon=\"${entity.icon}\"\n          class=\"entity-icon ${entity.state === 'on' ? 'active' : ''}\"\n        ></ha-icon>\n        <span class=\"entity-name\">${entity.name}</span>\n        ${entity.isToggleable && entity.isOnline ? x `\n          <ha-switch\n            .checked=${entity.state === 'on'}\n            @change=${() => this.toggleEntity(entity.entityId)}\n          ></ha-switch>\n        ` : x `\n          <span class=\"entity-state\">${stateDisplay}</span>\n        `}\n      </div>\n    `;\n    }\n    getStateDisplay(entity) {\n        if (!entity.isOnline)\n            return 'Offline';\n        // For sensors, show the value with unit\n        if (entity.entityId.includes('sensor')) {\n            const state = this.entityStates.get(entity.entityId);\n            const unit = state?.attributes?.unit_of_measurement || '';\n            return `${entity.state}${unit ? ' ' + unit : ''}`;\n        }\n        // For binary sensors, show more descriptive text\n        if (entity.entityId.includes('binary_sensor')) {\n            return entity.state === 'on' ? 'Detected' : 'Clear';\n        }\n        return entity.state;\n    }\n    renderActions() {\n        const config = this.widgetConfig;\n        const showGroupControls = config?.showGroupControls ?? true;\n        if (!showGroupControls || !this.hasToggleableEntities()) {\n            return x ``;\n        }\n        const hasActiveDevices = this.groupedEntities.some(e => e.isToggleable && e.isOnline && e.state === 'on');\n        return x `\n      <div class=\"actions\">\n        ${hasActiveDevices ? x `\n          <mwc-button @click=${this.turnAllOff}>\n            <ha-icon icon=\"mdi:power-off\"></ha-icon>\n            All Off\n          </mwc-button>\n        ` : ''}\n        <mwc-button @click=${this.turnAllOn}>\n          <ha-icon icon=\"mdi:power-on\"></ha-icon>\n          All On\n        </mwc-button>\n      </div>\n    `;\n    }\n    hasToggleableEntities() {\n        return this.groupedEntities.some(e => e.isToggleable && e.isOnline);\n    }\n    toggleExpanded() {\n        this.expanded = !this.expanded;\n        // Update subscriptions when expanding/collapsing\n        if (this.expanded) {\n            this.updateSubscriptions();\n        }\n    }\n    async turnAllOff() {\n        const toggleable = this.groupedEntities.filter(e => e.isToggleable && e.isOnline && e.state === 'on');\n        for (const entity of toggleable) {\n            await this.turnOff(entity.entityId);\n        }\n    }\n    async turnAllOn() {\n        const toggleable = this.groupedEntities.filter(e => e.isToggleable && e.isOnline && e.state === 'off');\n        for (const entity of toggleable) {\n            await this.turnOn(entity.entityId);\n        }\n    }\n};\nDeviceGroupWidget.styles = [\n    DashviewWidget.styles,\n    i `\n      ha-card {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .header {\n        padding: 16px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        background: linear-gradient(to bottom, rgba(var(--rgb-primary-color), 0.05), transparent);\n      }\n\n      .header-content {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .header h2 {\n        margin: 0;\n        font-size: 1.2em;\n        font-weight: 500;\n      }\n\n      .device-count {\n        background: var(--primary-color);\n        color: var(--text-primary-color, white);\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-size: 0.8em;\n        font-weight: 500;\n      }\n\n      .expand-icon {\n        transition: transform 0.3s ease;\n        color: var(--secondary-text-color);\n      }\n\n      .expand-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .entities {\n        flex: 1;\n        overflow-y: auto;\n        padding: 0 16px;\n        max-height: 400px;\n      }\n\n      .entity-row {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        padding: 12px 0;\n        border-bottom: 1px solid var(--divider-color);\n        transition: opacity 0.2s ease;\n      }\n\n      .entity-row:last-child {\n        border-bottom: none;\n      }\n\n      .entity-row.offline {\n        opacity: 0.5;\n      }\n\n      .entity-icon {\n        --mdc-icon-size: 20px;\n        color: var(--secondary-text-color);\n        transition: color 0.2s ease;\n      }\n\n      .entity-icon.active {\n        color: var(--primary-color);\n      }\n\n      .entity-name {\n        flex: 1;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      .entity-state {\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n        min-width: 60px;\n        text-align: right;\n      }\n\n      .empty-state {\n        padding: 32px;\n        text-align: center;\n        color: var(--secondary-text-color);\n        font-style: italic;\n      }\n\n      .actions {\n        padding: 8px 16px;\n        border-top: 1px solid var(--divider-color);\n        display: flex;\n        justify-content: flex-end;\n        gap: 8px;\n      }\n\n      .actions:empty {\n        display: none;\n      }\n\n      mwc-button {\n        --mdc-theme-primary: var(--primary-color);\n      }\n\n      mwc-button ha-icon {\n        margin-right: 4px;\n      }\n    `\n];\n__decorate([\n    property_n({ type: String }),\n    __metadata(\"design:type\", String)\n], DeviceGroupWidget.prototype, \"deviceType\", void 0);\n__decorate([\n    property_n({ type: String }),\n    __metadata(\"design:type\", String)\n], DeviceGroupWidget.prototype, \"groupName\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DeviceGroupWidget.prototype, \"expanded\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Array)\n], DeviceGroupWidget.prototype, \"groupedEntities\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DeviceGroupWidget.prototype, \"onlineCount\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DeviceGroupWidget.prototype, \"activeCount\", void 0);\nDeviceGroupWidget = __decorate([\n    custom_element_t('dashview-device-group-widget')\n], DeviceGroupWidget);\n\n\n;// ./src/widgets/climate-widget.ts\n/**\n * Climate widget for Dashview V2.\n * Controls HVAC systems, thermostats, and climate entities.\n */\n\n\n\n\n\nlet ClimateWidget = class ClimateWidget extends DashviewWidget {\n    constructor() {\n        super(...arguments);\n        this.hvacMode = 'off';\n        this.availableModes = [];\n        this.availablePresets = [];\n        this.isAdjusting = false;\n        this.showTempDial = true;\n    }\n    subscribedEntities() {\n        const entities = [];\n        // Primary climate entity\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (climateId) {\n            entities.push(climateId);\n        }\n        // Related humidity sensor if any\n        const humidityEntity = this.widgetConfig?.entities?.find(e => e.includes('humidity') && !e.includes('climate'));\n        if (humidityEntity) {\n            entities.push(humidityEntity);\n        }\n        return entities;\n    }\n    getDefaultConfig() {\n        return {\n            type: 'climate',\n            entities: [],\n            showHumidity: true,\n            showPresets: true,\n            temperatureStep: 0.5,\n        };\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.updateClimateState();\n    }\n    onStateChanged(entityId, newState, oldState) {\n        super.onStateChanged(entityId, newState, oldState);\n        this.updateClimateState();\n    }\n    updateClimateState() {\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (!climateId)\n            return;\n        const climateState = this.entityStates.get(climateId);\n        if (!climateState)\n            return;\n        // Update temperature values\n        this.currentTemp = climateState.attributes.current_temperature;\n        this.hvacMode = climateState.state;\n        this.presetMode = climateState.attributes.preset_mode;\n        // Handle different temperature control modes\n        if (climateState.attributes.target_temp_low && climateState.attributes.target_temp_high) {\n            this.targetTempLow = climateState.attributes.target_temp_low;\n            this.targetTempHigh = climateState.attributes.target_temp_high;\n            this.targetTemp = undefined;\n        }\n        else {\n            this.targetTemp = climateState.attributes.temperature;\n            this.targetTempLow = undefined;\n            this.targetTempHigh = undefined;\n        }\n        // Available modes\n        this.availableModes = climateState.attributes.hvac_modes || [];\n        this.availablePresets = climateState.attributes.preset_modes || [];\n        // Check for humidity sensor\n        const humidityEntity = this.widgetConfig?.entities?.find(e => e.includes('humidity') && !e.includes('climate'));\n        if (humidityEntity) {\n            const humidityState = this.entityStates.get(humidityEntity);\n            if (humidityState && humidityState.state !== 'unavailable') {\n                this.humidity = parseFloat(humidityState.state);\n            }\n        }\n    }\n    render() {\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        const title = this.widgetConfig?.title || 'Climate Control';\n        if (this.isLoading) {\n            return this.renderSkeleton();\n        }\n        if (this.error || !climateId) {\n            return x `\n        <div class=\"widget-error\">\n          ${this.error || 'No climate entity configured'}\n        </div>\n      `;\n        }\n        return x `\n      <ha-card>\n        <div class=\"header\">\n          <h2>${title}</h2>\n          <div class=\"hvac-mode ${this.hvacMode}\">\n            ${this.hvacMode.toUpperCase()}\n          </div>\n        </div>\n\n        <div class=\"temperature-display\">\n          ${this.showTempDial ? this.renderTemperatureDial() : this.renderTemperatureDisplay()}\n        </div>\n\n        ${this.renderTemperatureControls()}\n        ${this.renderModeSelector()}\n        ${this.renderPresetSelector()}\n        ${this.renderHumidity()}\n      </ha-card>\n    `;\n    }\n    renderTemperatureDisplay() {\n        if (this.currentTemp === undefined) {\n            return x `<span class=\"temp-unavailable\">--</span>`;\n        }\n        return x `\n      <div class=\"current-temp\">\n        <span class=\"temp-value\">${this.currentTemp.toFixed(1)}</span>\n        <span class=\"temp-unit\">°C</span>\n      </div>\n      ${this.renderTargetTemp()}\n    `;\n    }\n    renderTemperatureDial() {\n        if (this.currentTemp === undefined) {\n            return x `<div class=\"temp-dial-unavailable\">Temperature Unavailable</div>`;\n        }\n        const minTemp = 10;\n        const maxTemp = 35;\n        const currentPercent = Math.max(0, Math.min(100, ((this.currentTemp - minTemp) / (maxTemp - minTemp)) * 100));\n        const targetPercent = this.targetTemp ? Math.max(0, Math.min(100, ((this.targetTemp - minTemp) / (maxTemp - minTemp)) * 100)) : currentPercent;\n        return x `\n      <div class=\"temp-dial-container\">\n        <div class=\"temp-dial\">\n          <svg viewBox=\"0 0 200 200\" class=\"dial-svg\">\n            <!-- Background circle -->\n            <circle cx=\"100\" cy=\"100\" r=\"80\" class=\"dial-bg\" />\n            <!-- Current temperature arc -->\n            <circle \n              cx=\"100\" \n              cy=\"100\" \n              r=\"80\" \n              class=\"dial-current\"\n              stroke-dasharray=\"${(currentPercent / 100) * 502.6} 502.6\"\n              transform=\"rotate(-90 100 100)\"\n            />\n            <!-- Target temperature indicator -->\n            ${this.targetTemp ? x `\n              <circle \n                cx=\"100\" \n                cy=\"100\" \n                r=\"80\" \n                class=\"dial-target\"\n                stroke-dasharray=\"3 502.6\"\n                stroke-dashoffset=\"${-((targetPercent / 100) * 502.6)}\"\n                transform=\"rotate(-90 100 100)\"\n              />\n            ` : ''}\n          </svg>\n          <div class=\"dial-center\">\n            <div class=\"current-temp-dial\">\n              <span class=\"temp-value-dial\">${this.currentTemp.toFixed(1)}</span>\n              <span class=\"temp-unit-dial\">°C</span>\n            </div>\n            ${this.targetTemp ? x `\n              <div class=\"target-temp-dial\">\n                Target: ${this.targetTemp.toFixed(1)}°C\n              </div>\n            ` : ''}\n          </div>\n        </div>\n        <div class=\"temp-trend\">\n          ${this.renderTemperatureTrend()}\n        </div>\n      </div>\n    `;\n    }\n    renderTemperatureTrend() {\n        // Placeholder for temperature trend mini-graph\n        // In a real implementation, this would show historical data\n        return x `\n      <div class=\"trend-indicator\">\n        <ha-icon icon=\"mdi:trending-up\" class=\"trend-icon\"></ha-icon>\n        <span class=\"trend-text\">Trending up</span>\n      </div>\n    `;\n    }\n    renderTargetTemp() {\n        if (this.hvacMode === 'off') {\n            return x ``;\n        }\n        if (this.targetTempLow !== undefined && this.targetTempHigh !== undefined) {\n            return x `\n        <div class=\"target-temp-range\">\n          <span class=\"target-label\">Target:</span>\n          <span class=\"target-value\">${this.targetTempLow.toFixed(1)} - ${this.targetTempHigh.toFixed(1)}°C</span>\n        </div>\n      `;\n        }\n        if (this.targetTemp !== undefined) {\n            return x `\n        <div class=\"target-temp\">\n          <span class=\"target-label\">Target:</span>\n          <span class=\"target-value\">${this.targetTemp.toFixed(1)}°C</span>\n        </div>\n      `;\n        }\n        return x ``;\n    }\n    renderTemperatureControls() {\n        if (this.hvacMode === 'off' || this.hvacMode === 'fan_only') {\n            return x ``;\n        }\n        const config = this.widgetConfig;\n        const step = config?.temperatureStep || 0.5;\n        if (this.targetTempLow !== undefined && this.targetTempHigh !== undefined) {\n            return x `\n        <div class=\"temp-controls-dual\">\n          <div class=\"temp-control\">\n            <span class=\"control-label\">Cool to</span>\n            <div class=\"control-buttons\">\n              <ha-icon-button\n                icon=\"mdi:minus\"\n                @click=${() => this.adjustTargetTemp('low', -step)}\n              ></ha-icon-button>\n              <span class=\"control-value\">${this.targetTempLow.toFixed(1)}°C</span>\n              <ha-icon-button\n                icon=\"mdi:plus\"\n                @click=${() => this.adjustTargetTemp('low', step)}\n              ></ha-icon-button>\n            </div>\n          </div>\n          <div class=\"temp-control\">\n            <span class=\"control-label\">Heat to</span>\n            <div class=\"control-buttons\">\n              <ha-icon-button\n                icon=\"mdi:minus\"\n                @click=${() => this.adjustTargetTemp('high', -step)}\n              ></ha-icon-button>\n              <span class=\"control-value\">${this.targetTempHigh.toFixed(1)}°C</span>\n              <ha-icon-button\n                icon=\"mdi:plus\"\n                @click=${() => this.adjustTargetTemp('high', step)}\n              ></ha-icon-button>\n            </div>\n          </div>\n        </div>\n      `;\n        }\n        if (this.targetTemp !== undefined) {\n            return x `\n        <div class=\"temp-controls\">\n          <ha-icon-button\n            icon=\"mdi:minus\"\n            @click=${() => this.adjustTargetTemp('single', -step)}\n          ></ha-icon-button>\n          <span class=\"control-value\">${this.targetTemp.toFixed(1)}°C</span>\n          <ha-icon-button\n            icon=\"mdi:plus\"\n            @click=${() => this.adjustTargetTemp('single', step)}\n          ></ha-icon-button>\n        </div>\n      `;\n        }\n        return x ``;\n    }\n    renderModeSelector() {\n        if (this.availableModes.length <= 1) {\n            return x ``;\n        }\n        const modeIcons = {\n            'off': 'mdi:power',\n            'heat': 'mdi:fire',\n            'cool': 'mdi:snowflake',\n            'heat_cool': 'mdi:autorenew',\n            'auto': 'mdi:calendar-sync',\n            'dry': 'mdi:water-percent',\n            'fan_only': 'mdi:fan',\n        };\n        const modeColors = {\n            'off': 'var(--secondary-text-color)',\n            'heat': '#ff6b00',\n            'cool': '#0288d1',\n            'heat_cool': '#388e3c',\n            'auto': '#388e3c',\n            'dry': '#9c27b0',\n            'fan_only': '#607d8b',\n        };\n        return x `\n      <div class=\"mode-selector\">\n        ${this.availableModes.map(mode => x `\n          <button\n            class=\"mode-button touch-target ${mode === this.hvacMode ? 'active' : ''}\"\n            @click=${() => this.setHvacMode(mode)}\n            aria-label=\"Set ${mode.replace('_', ' ')} mode\"\n            style=\"--mode-color: ${modeColors[mode]}\"\n          >\n            <ha-icon icon=\"${modeIcons[mode]}\"></ha-icon>\n            <span>${mode.replace('_', ' ')}</span>\n          </button>\n        `)}\n      </div>\n    `;\n    }\n    renderPresetSelector() {\n        const config = this.widgetConfig;\n        if (!config?.showPresets || this.availablePresets.length === 0) {\n            return x ``;\n        }\n        const presetIcons = {\n            'eco': 'mdi:leaf',\n            'away': 'mdi:home-export-outline',\n            'boost': 'mdi:rocket-launch',\n            'comfort': 'mdi:sofa',\n            'home': 'mdi:home',\n            'sleep': 'mdi:sleep',\n            'activity': 'mdi:run'\n        };\n        return x `\n      <div class=\"preset-selector\">\n        <span class=\"preset-label\">Presets:</span>\n        <div class=\"preset-buttons\">\n          <button \n            class=\"preset-button touch-target ${!this.presetMode ? 'active' : ''}\"\n            @click=${() => this.setPresetMode(null)}\n            aria-label=\"No preset\"\n          >\n            <ha-icon icon=\"mdi:close\"></ha-icon>\n            <span>None</span>\n          </button>\n          ${this.availablePresets.map(preset => x `\n            <button\n              class=\"preset-button touch-target ${preset === this.presetMode ? 'active' : ''}\"\n              @click=${() => this.setPresetMode(preset)}\n              aria-label=\"Set ${preset} preset\"\n            >\n              <ha-icon icon=\"${presetIcons[preset] || 'mdi:cog'}\"></ha-icon>\n              <span>${preset}</span>\n            </button>\n          `)}\n        </div>\n      </div>\n    `;\n    }\n    renderHumidity() {\n        const config = this.widgetConfig;\n        if (!config?.showHumidity || this.humidity === undefined) {\n            return x ``;\n        }\n        return x `\n      <div class=\"humidity-display\">\n        <ha-icon icon=\"mdi:water-percent\"></ha-icon>\n        <span>Humidity: ${this.humidity.toFixed(0)}%</span>\n      </div>\n    `;\n    }\n    async adjustTargetTemp(type, change) {\n        if (this.isAdjusting)\n            return;\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (!climateId)\n            return;\n        this.isAdjusting = true;\n        try {\n            const service_data = {};\n            if (type === 'single' && this.targetTemp !== undefined) {\n                service_data.temperature = Math.round((this.targetTemp + change) * 2) / 2;\n            }\n            else if (type === 'low' && this.targetTempLow !== undefined) {\n                service_data.target_temp_low = Math.round((this.targetTempLow + change) * 2) / 2;\n                service_data.target_temp_high = this.targetTempHigh;\n            }\n            else if (type === 'high' && this.targetTempHigh !== undefined) {\n                service_data.target_temp_low = this.targetTempLow;\n                service_data.target_temp_high = Math.round((this.targetTempHigh + change) * 2) / 2;\n            }\n            await this.hass.callService('climate', 'set_temperature', {\n                entity_id: climateId,\n                ...service_data\n            });\n        }\n        catch (error) {\n            console.error('Failed to adjust temperature:', error);\n        }\n        finally {\n            this.isAdjusting = false;\n        }\n    }\n    async setHvacMode(mode) {\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (!climateId)\n            return;\n        try {\n            await this.hass.callService('climate', 'set_hvac_mode', {\n                entity_id: climateId,\n                hvac_mode: mode\n            });\n        }\n        catch (error) {\n            console.error('Failed to set HVAC mode:', error);\n        }\n    }\n    async setPresetMode(preset) {\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (!climateId)\n            return;\n        try {\n            await this.hass.callService('climate', 'set_preset_mode', {\n                entity_id: climateId,\n                preset_mode: preset\n            });\n        }\n        catch (error) {\n            console.error('Failed to set preset mode:', error);\n        }\n    }\n    renderSkeleton() {\n        return x `\n      <ha-card>\n        <div class=\"header\">\n          <div class=\"skeleton skeleton-text large\" style=\"width: 140px;\"></div>\n          <div class=\"skeleton skeleton-button\" style=\"width: 80px; height: 28px;\"></div>\n        </div>\n        <div class=\"temperature-display\">\n          <div class=\"skeleton skeleton-card\" style=\"height: 200px; margin: 16px;\"></div>\n        </div>\n        <div class=\"mode-selector\">\n          <div class=\"skeleton skeleton-button\" style=\"margin: 8px;\"></div>\n          <div class=\"skeleton skeleton-button\" style=\"margin: 8px;\"></div>\n          <div class=\"skeleton skeleton-button\" style=\"margin: 8px;\"></div>\n        </div>\n      </ha-card>\n    `;\n    }\n};\nClimateWidget.styles = i `\n    ${DashviewWidget.styles}\n    ${skeletonStyles}\n    ${touchStyles}\n      ha-card {\n        height: 100%;\n        min-height: 250px;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .header {\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n\n      .header h2 {\n        margin: 0;\n        font-size: 1.2em;\n        font-weight: 500;\n      }\n\n      .hvac-mode {\n        padding: 4px 12px;\n        border-radius: 16px;\n        font-size: 0.8em;\n        font-weight: 500;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n      }\n\n      .hvac-mode.off {\n        background: var(--secondary-background-color);\n        color: var(--secondary-text-color);\n      }\n\n      .hvac-mode.heat {\n        background: rgba(255, 152, 0, 0.2);\n        color: #ff6b00;\n      }\n\n      .hvac-mode.cool {\n        background: rgba(33, 150, 243, 0.2);\n        color: #0288d1;\n      }\n\n      .hvac-mode.heat_cool,\n      .hvac-mode.auto {\n        background: rgba(76, 175, 80, 0.2);\n        color: #388e3c;\n      }\n\n      .temperature-display {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        padding: 16px;\n      }\n\n      .current-temp {\n        display: flex;\n        align-items: baseline;\n        gap: 4px;\n      }\n\n      .temp-value {\n        font-size: 3.5em;\n        font-weight: 300;\n        color: var(--primary-color);\n        line-height: 1;\n      }\n\n      .temp-unit {\n        font-size: 1.5em;\n        color: var(--secondary-text-color);\n      }\n\n      .temp-unavailable {\n        font-size: 3em;\n        color: var(--secondary-text-color);\n      }\n\n      .target-temp,\n      .target-temp-range {\n        margin-top: 8px;\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n      }\n\n      .target-label {\n        opacity: 0.8;\n        margin-right: 4px;\n      }\n\n      .temp-controls {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 16px;\n        padding: 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      .temp-controls-dual {\n        display: flex;\n        gap: 24px;\n        padding: 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      .temp-control {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 8px;\n      }\n\n      .control-label {\n        font-size: 0.85em;\n        color: var(--secondary-text-color);\n      }\n\n      .control-buttons {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .control-value {\n        font-size: 1.4em;\n        min-width: 60px;\n        text-align: center;\n      }\n\n      .mode-selector {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));\n        gap: 8px;\n        padding: 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      .mode-button {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 4px;\n        padding: 12px 8px;\n        border: 2px solid var(--divider-color);\n        border-radius: 12px;\n        background: var(--card-background-color);\n        cursor: pointer;\n        transition: all 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        font-size: 0.75em;\n        text-transform: capitalize;\n        min-height: 44px;\n        min-width: 44px;\n      }\n\n      .mode-button:hover {\n        background: var(--secondary-background-color);\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      }\n\n      .mode-button.active {\n        background: var(--mode-color, var(--primary-color));\n        color: white;\n        border-color: var(--mode-color, var(--primary-color));\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n      }\n\n      .mode-button:active {\n        transform: translateY(0) scale(0.95);\n      }\n\n      .mode-button ha-icon {\n        --mdc-icon-size: 24px;\n      }\n\n      .preset-selector {\n        padding: 12px 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      .preset-label {\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n        margin-bottom: 8px;\n        display: block;\n      }\n\n      .preset-buttons {\n        display: flex;\n        gap: 8px;\n        flex-wrap: wrap;\n      }\n\n      .preset-button {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 2px;\n        padding: 8px 12px;\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n        background: var(--card-background-color);\n        cursor: pointer;\n        transition: all 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        font-size: 0.7em;\n        text-transform: capitalize;\n        min-height: 44px;\n        min-width: 44px;\n      }\n\n      .preset-button:hover {\n        background: var(--secondary-background-color);\n      }\n\n      .preset-button.active {\n        background: var(--primary-color);\n        color: white;\n        border-color: var(--primary-color);\n      }\n\n      .preset-button ha-icon {\n        --mdc-icon-size: 18px;\n      }\n\n      .humidity-display {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 8px;\n        padding: 12px 16px;\n        border-top: 1px solid var(--divider-color);\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n      }\n\n      .humidity-display ha-icon {\n        --mdc-icon-size: 18px;\n      }\n\n      ha-icon-button {\n        --mdc-icon-button-size: 48px;\n        --mdc-icon-size: 24px;\n        min-height: 44px;\n        min-width: 44px;\n      }\n\n      /* Temperature dial styles */\n      .temp-dial-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 16px;\n      }\n\n      .temp-dial {\n        position: relative;\n        width: 200px;\n        height: 200px;\n      }\n\n      .dial-svg {\n        width: 100%;\n        height: 100%;\n      }\n\n      .dial-bg {\n        fill: none;\n        stroke: var(--divider-color);\n        stroke-width: 8;\n      }\n\n      .dial-current {\n        fill: none;\n        stroke: var(--primary-color);\n        stroke-width: 8;\n        stroke-linecap: round;\n        transition: stroke-dasharray 350ms cubic-bezier(0.0, 0.0, 0.2, 1);\n      }\n\n      .dial-target {\n        fill: none;\n        stroke: var(--secondary-text-color);\n        stroke-width: 4;\n        stroke-linecap: round;\n      }\n\n      .dial-center {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        text-align: center;\n      }\n\n      .current-temp-dial {\n        display: flex;\n        align-items: baseline;\n        justify-content: center;\n        gap: 4px;\n      }\n\n      .temp-value-dial {\n        font-size: 2.5em;\n        font-weight: 300;\n        color: var(--primary-color);\n        line-height: 1;\n      }\n\n      .temp-unit-dial {\n        font-size: 1.2em;\n        color: var(--secondary-text-color);\n      }\n\n      .target-temp-dial {\n        margin-top: 8px;\n        color: var(--secondary-text-color);\n        font-size: 0.8em;\n      }\n\n      .temp-dial-unavailable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 200px;\n        color: var(--secondary-text-color);\n        font-size: 1.1em;\n      }\n\n      .trend-indicator {\n        display: flex;\n        align-items: center;\n        gap: 6px;\n        color: var(--secondary-text-color);\n        font-size: 0.85em;\n      }\n\n      .trend-icon {\n        --mdc-icon-size: 16px;\n        color: var(--success-color, #4caf50);\n      }\n\n      /* Mobile optimizations */\n      @media (max-width: 768px) {\n        .temp-dial {\n          width: 160px;\n          height: 160px;\n        }\n\n        .temp-value-dial {\n          font-size: 2em;\n        }\n\n        .temp-unit-dial {\n          font-size: 1em;\n        }\n\n        .mode-selector {\n          grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));\n        }\n\n        .preset-buttons {\n          justify-content: center;\n        }\n      }\n\n      /* Accessibility */\n      @media (prefers-reduced-motion: reduce) {\n        .mode-button:hover {\n          transform: none;\n        }\n\n        .mode-button:active {\n          transform: scale(0.98);\n        }\n\n        .dial-current {\n          transition: none;\n        }\n      }\n    `;\n__decorate([\n    property_n({ type: String }),\n    __metadata(\"design:type\", String)\n], ClimateWidget.prototype, \"climateEntityId\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Number)\n], ClimateWidget.prototype, \"currentTemp\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Number)\n], ClimateWidget.prototype, \"targetTemp\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Number)\n], ClimateWidget.prototype, \"targetTempLow\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Number)\n], ClimateWidget.prototype, \"targetTempHigh\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Number)\n], ClimateWidget.prototype, \"humidity\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", String)\n], ClimateWidget.prototype, \"hvacMode\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", String)\n], ClimateWidget.prototype, \"presetMode\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Array)\n], ClimateWidget.prototype, \"availableModes\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Array)\n], ClimateWidget.prototype, \"availablePresets\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], ClimateWidget.prototype, \"isAdjusting\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], ClimateWidget.prototype, \"showTempDial\", void 0);\nClimateWidget = __decorate([\n    custom_element_t('dashview-climate-widget')\n], ClimateWidget);\n\n\n;// ./src/widgets/quick-controls-widget.ts\n/**\n * Quick controls widget for Dashview V2.\n * Provides fast access to frequently used controls and scenes.\n */\nvar quick_controls_widget_a;\n\n\n\n\nlet QuickControlsWidget = class QuickControlsWidget extends DashviewWidget {\n    constructor() {\n        super(...arguments);\n        this.controlStates = new Map();\n        this.executingControl = null;\n    }\n    subscribedEntities() {\n        const config = this.widgetConfig;\n        if (!config?.controls)\n            return [];\n        // Subscribe to all control entities\n        return config.controls\n            .map(control => control.entityId)\n            .filter(id => id && !id.startsWith('script.') && !id.startsWith('scene.'));\n    }\n    getDefaultConfig() {\n        return {\n            type: 'quick-controls',\n            controls: [],\n            columns: 4,\n            showLabels: true,\n            iconSize: 'medium',\n        };\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.updateControlStates();\n    }\n    onStateChanged(entityId, newState, oldState) {\n        super.onStateChanged(entityId, newState, oldState);\n        this.updateControlStates();\n    }\n    updateControlStates() {\n        const config = this.widgetConfig;\n        if (!config?.controls)\n            return;\n        const newStates = new Map();\n        for (const control of config.controls) {\n            const entityId = control.entityId;\n            if (!entityId)\n                continue;\n            const state = this.entityStates.get(entityId);\n            if (state) {\n                // For toggleable entities, track on/off state\n                const domain = entityId.split('.')[0];\n                if (['light', 'switch', 'fan', 'input_boolean'].includes(domain)) {\n                    newStates.set(entityId, state.state === 'on');\n                }\n            }\n        }\n        this.controlStates = newStates;\n    }\n    render() {\n        const config = this.widgetConfig;\n        const title = this.widgetConfig?.title || 'Quick Controls';\n        if (this.isLoading) {\n            return x `\n        <div class=\"widget-loading\">\n          Loading controls...\n        </div>\n      `;\n        }\n        if (this.error || !config?.controls || config.controls.length === 0) {\n            return x `\n        <div class=\"widget-error\">\n          ${this.error || 'No controls configured'}\n        </div>\n      `;\n        }\n        const columns = config.columns || 4;\n        const iconSize = config.iconSize || 'medium';\n        return x `\n      <ha-card>\n        <div class=\"header\">\n          <h2>${title}</h2>\n        </div>\n\n        <div \n          class=\"controls-grid\"\n          style=\"grid-template-columns: repeat(${columns}, 1fr)\"\n        >\n          ${config.controls.map(control => this.renderControl(control, iconSize))}\n        </div>\n      </ha-card>\n    `;\n    }\n    renderControl(control, iconSize) {\n        const config = this.widgetConfig;\n        const showLabels = config?.showLabels ?? true;\n        const entityId = control.entityId;\n        const state = entityId ? this.entityStates.get(entityId) : null;\n        const isActive = this.controlStates.get(entityId) || false;\n        const isExecuting = this.executingControl === entityId;\n        // Determine icon\n        let icon = control.icon;\n        if (!icon && state) {\n            icon = state.attributes.icon || this.getDefaultIcon(entityId);\n        }\n        // Determine label\n        let label = control.label;\n        if (!label && state) {\n            label = state.attributes.friendly_name || entityId.split('.')[1].replace(/_/g, ' ');\n        }\n        // Determine color\n        let color = control.color || 'var(--primary-color)';\n        if (isActive && !control.color) {\n            color = this.getActiveColor(entityId);\n        }\n        const buttonClass = `control-button ${iconSize} ${isActive ? 'active' : ''} ${isExecuting ? 'executing' : ''}`;\n        return x `\n      <button\n        class=\"${buttonClass}\"\n        style=\"--control-color: ${color}\"\n        @click=${() => this.handleControlClick(control)}\n        ?disabled=${isExecuting}\n      >\n        ${isExecuting ? x `\n          <div class=\"spinner\"></div>\n        ` : x `\n          <ha-icon icon=\"${icon}\"></ha-icon>\n        `}\n        ${showLabels && label ? x `\n          <span class=\"control-label\">${label}</span>\n        ` : ''}\n      </button>\n    `;\n    }\n    getDefaultIcon(entityId) {\n        const [domain, name] = entityId.split('.');\n        // Domain-based icons\n        const domainIcons = {\n            'light': 'mdi:lightbulb',\n            'switch': 'mdi:toggle-switch',\n            'fan': 'mdi:fan',\n            'scene': 'mdi:palette',\n            'script': 'mdi:script-text',\n            'automation': 'mdi:robot',\n            'input_boolean': 'mdi:toggle-switch-outline',\n        };\n        // Name-based icons\n        if (name.includes('morning'))\n            return 'mdi:weather-sunset-up';\n        if (name.includes('night') || name.includes('bedtime'))\n            return 'mdi:weather-night';\n        if (name.includes('away'))\n            return 'mdi:home-export-outline';\n        if (name.includes('home'))\n            return 'mdi:home';\n        if (name.includes('party'))\n            return 'mdi:party-popper';\n        if (name.includes('movie') || name.includes('tv'))\n            return 'mdi:television';\n        if (name.includes('dinner') || name.includes('dining'))\n            return 'mdi:silverware-fork-knife';\n        if (name.includes('reading'))\n            return 'mdi:book-open-page-variant';\n        return domainIcons[domain] || 'mdi:gesture-tap';\n    }\n    getActiveColor(entityId) {\n        const [domain] = entityId.split('.');\n        switch (domain) {\n            case 'light':\n                return 'var(--warning-color)';\n            case 'fan':\n                return 'var(--info-color)';\n            case 'switch':\n                return 'var(--success-color)';\n            default:\n                return 'var(--primary-color)';\n        }\n    }\n    async handleControlClick(control) {\n        if (this.executingControl)\n            return;\n        const entityId = control.entityId;\n        if (!entityId)\n            return;\n        // Handle confirmation if required\n        if (control.confirmAction) {\n            const label = control.label || entityId.split('.')[1].replace(/_/g, ' ');\n            if (!confirm(`Execute \"${label}\"?`)) {\n                return;\n            }\n        }\n        this.executingControl = entityId;\n        try {\n            // Custom service call\n            if (control.service) {\n                await this.hass.callService(control.service.domain, control.service.service, {\n                    entity_id: entityId,\n                    ...control.service.data\n                });\n            }\n            else {\n                // Default behavior based on entity type\n                const [domain] = entityId.split('.');\n                switch (domain) {\n                    case 'scene':\n                        await this.hass.callService('scene', 'turn_on', { entity_id: entityId });\n                        break;\n                    case 'script':\n                        await this.hass.callService('script', 'turn_on', { entity_id: entityId });\n                        break;\n                    case 'automation':\n                        await this.hass.callService('automation', 'trigger', { entity_id: entityId });\n                        break;\n                    case 'light':\n                    case 'switch':\n                    case 'fan':\n                    case 'input_boolean':\n                        await this.toggleEntity(entityId);\n                        break;\n                    default:\n                        console.warn(`Unknown entity domain: ${domain}`);\n                }\n            }\n            // Visual feedback for non-toggleable entities\n            if (['scene', 'script'].includes(entityId.split('.')[0])) {\n                // Keep spinner for a moment to show execution\n                setTimeout(() => {\n                    this.executingControl = null;\n                }, 1000);\n                return;\n            }\n        }\n        catch (error) {\n            console.error(`Failed to execute control ${entityId}:`, error);\n        }\n        this.executingControl = null;\n    }\n};\nQuickControlsWidget.styles = [\n    DashviewWidget.styles,\n    i `\n      ha-card {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .header {\n        padding: 16px;\n        border-bottom: 1px solid var(--divider-color);\n      }\n\n      .header h2 {\n        margin: 0;\n        font-size: 1.2em;\n        font-weight: 500;\n      }\n\n      .controls-grid {\n        display: grid;\n        gap: 12px;\n        padding: 16px;\n        align-content: start;\n      }\n\n      .control-button {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        gap: 8px;\n        padding: 16px 8px;\n        border: 2px solid var(--divider-color);\n        border-radius: 12px;\n        background: var(--card-background-color);\n        cursor: pointer;\n        transition: all 0.2s ease;\n        position: relative;\n        overflow: hidden;\n      }\n\n      .control-button:hover {\n        background: var(--secondary-background-color);\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      }\n\n      .control-button:active {\n        transform: translateY(0);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n\n      .control-button.active {\n        background: var(--control-color);\n        color: var(--text-primary-color, white);\n        border-color: var(--control-color);\n      }\n\n      .control-button.active ha-icon {\n        color: var(--text-primary-color, white);\n      }\n\n      .control-button:disabled {\n        cursor: not-allowed;\n        opacity: 0.7;\n      }\n\n      .control-button.executing {\n        pointer-events: none;\n      }\n\n      /* Icon sizes */\n      .control-button.small {\n        padding: 12px 8px;\n      }\n\n      .control-button.small ha-icon {\n        --mdc-icon-size: 24px;\n      }\n\n      .control-button.medium ha-icon {\n        --mdc-icon-size: 32px;\n      }\n\n      .control-button.large {\n        padding: 20px 12px;\n      }\n\n      .control-button.large ha-icon {\n        --mdc-icon-size: 40px;\n      }\n\n      .control-label {\n        font-size: 0.75em;\n        text-align: center;\n        line-height: 1.2;\n        max-width: 100%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        display: -webkit-box;\n        -webkit-line-clamp: 2;\n        -webkit-box-orient: vertical;\n      }\n\n      .control-button.large .control-label {\n        font-size: 0.85em;\n      }\n\n      /* Spinner animation */\n      .spinner {\n        width: 24px;\n        height: 24px;\n        border: 3px solid var(--divider-color);\n        border-top-color: var(--primary-color);\n        border-radius: 50%;\n        animation: spin 0.8s linear infinite;\n      }\n\n      @keyframes spin {\n        to { transform: rotate(360deg); }\n      }\n\n      /* Responsive adjustments */\n      @media (max-width: 480px) {\n        .controls-grid {\n          gap: 8px;\n          padding: 12px;\n        }\n\n        .control-button {\n          padding: 12px 6px;\n        }\n\n        .control-button.medium ha-icon {\n          --mdc-icon-size: 28px;\n        }\n\n        .control-label {\n          font-size: 0.7em;\n        }\n      }\n\n      /* Pulse animation for scenes/scripts */\n      @keyframes pulse {\n        0% {\n          opacity: 1;\n        }\n        50% {\n          opacity: 0.6;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n\n      .control-button.executing ha-icon {\n        animation: pulse 1s ease-in-out infinite;\n      }\n    `\n];\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", typeof (quick_controls_widget_a = typeof Map !== \"undefined\" && Map) === \"function\" ? quick_controls_widget_a : Object)\n], QuickControlsWidget.prototype, \"controlStates\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], QuickControlsWidget.prototype, \"executingControl\", void 0);\nQuickControlsWidget = __decorate([\n    custom_element_t('dashview-quick-controls-widget')\n], QuickControlsWidget);\n\n\n;// ./src/dashboard/dashview-dashboard.ts\nvar dashview_dashboard_a, dashview_dashboard_b, _c, _d;\n\n\n\n\n\n\n\n\n\n\n// Import widgets\n\n\n\n\nlet DashviewDashboard = class DashviewDashboard extends DashviewBaseElement {\n    constructor() {\n        super(...arguments);\n        // Private state\n        this._stateManager = null;\n        this._subscriptionManager = null;\n        this.loading = true;\n        this.error = null;\n        this.homeInfo = null;\n        this.wsConnection = null;\n        this.layoutEngine = null;\n        this.currentLayout = null;\n        this.widgets = [];\n        this.currentBreakpoint = 'desktop';\n        this.areas = new Map();\n    }\n    // Public getters for child components\n    get stateManager() {\n        return this._stateManager;\n    }\n    get subscriptionManager() {\n        return this._subscriptionManager;\n    }\n    async firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        await this.initializeDashboard();\n        this.setupResizeObserver();\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.cleanup();\n    }\n    async initializeDashboard() {\n        try {\n            logger_logger.info('Initializing Dashview dashboard');\n            if (!this.hass) {\n                throw new Error('Home Assistant connection not available');\n            }\n            // Initialize core services\n            this.wsConnection = new WebSocketConnection(this.hass);\n            this._stateManager = new StateManager();\n            this._subscriptionManager = new SubscriptionManager(this.wsConnection, this._stateManager);\n            this.layoutEngine = new LayoutEngine();\n            // Load home information\n            await this.loadHomeInfo();\n            // Analyze home and set up dashboard\n            await this.analyzeHome();\n            this.selectOptimalLayout();\n            await this.initializeWidgets();\n            // Start state management\n            this._stateManager.initializeFromHass(this.hass);\n            await this._subscriptionManager.startListening();\n            logger_logger.info('Dashboard initialized successfully');\n            this.loading = false;\n        }\n        catch (error) {\n            logger_logger.error('Failed to initialize dashboard:', error);\n            this.error = error instanceof Error ? error.message : 'Failed to initialize dashboard';\n            this.loading = false;\n        }\n    }\n    async loadHomeInfo() {\n        if (!this.wsConnection)\n            return;\n        try {\n            this.loading = true;\n            this.error = null;\n            logger_logger.debug('Loading home information');\n            this.homeInfo = await this.wsConnection.getHomeInfo();\n            logger_logger.info('Home info loaded:', this.homeInfo);\n            this.loading = false;\n        }\n        catch (error) {\n            logger_logger.error('Failed to load home info:', error);\n            this.error = 'Failed to load home information';\n            this.loading = false;\n        }\n    }\n    render() {\n        if (this.loading) {\n            return x `\n        <div class=\"dashview-container\">\n          <div class=\"dashview-loading\">\n            <div class=\"loading-spinner\"></div>\n            <p>Loading your dashboard...</p>\n          </div>\n        </div>\n      `;\n        }\n        if (this.error) {\n            return x `\n        <div class=\"dashview-container\">\n          <div class=\"dashview-error\">\n            <h2>Error</h2>\n            <p>${this.error}</p>\n            <button @click=${() => this.initializeDashboard()}>Retry</button>\n          </div>\n        </div>\n      `;\n        }\n        // If we have widgets, show the dashboard view\n        if (this.widgets.length > 0) {\n            return this.renderDashboard();\n        }\n        // Otherwise show the welcome/info view\n        return x `\n      <div class=\"dashview-container\">\n        <div class=\"dashview-content\">\n          <div class=\"welcome-header\">\n            <h1 class=\"welcome-title\">Welcome to Dashview V2</h1>\n            <p class=\"welcome-subtitle\">\n              Your intelligent home dashboard for ${this.homeInfo?.entityCount || 0} entities\n            </p>\n          </div>\n\n          ${this.homeInfo ? this.renderHomeInfo() : this.renderNoData()}\n        </div>\n      </div>\n    `;\n    }\n    renderHomeInfo() {\n        if (!this.homeInfo)\n            return null;\n        const complexityPercentage = Math.min(100, this.homeInfo.complexityScore * 10);\n        return x `\n      <div class=\"info-grid\">\n        <div class=\"info-card\">\n          <p class=\"info-value\">${this.homeInfo.roomCount}</p>\n          <p class=\"info-label\">Rooms</p>\n        </div>\n\n        <div class=\"info-card\">\n          <p class=\"info-value\">${this.homeInfo.entityCount}</p>\n          <p class=\"info-label\">Entities</p>\n        </div>\n\n        <div class=\"info-card\">\n          <p class=\"info-value\">${this.homeInfo.areas.length}</p>\n          <p class=\"info-label\">Areas</p>\n        </div>\n\n        <div class=\"info-card\">\n          <p class=\"info-value\">${this.homeInfo.complexityScore}/10</p>\n          <p class=\"info-label\">Complexity Score</p>\n          <div class=\"complexity-meter\">\n            <div class=\"complexity-fill\" style=\"width: ${complexityPercentage}%\"></div>\n          </div>\n        </div>\n      </div>\n\n      ${this.homeInfo.areas.length > 0 ? x `\n        <div class=\"dashview-card\">\n          <h3>Detected Areas</h3>\n          <div class=\"areas-list\">\n            ${this.homeInfo.areas.map(area => x `\n              <span class=\"area-tag\">${area}</span>\n            `)}\n          </div>\n        </div>\n      ` : ''}\n    `;\n    }\n    renderNoData() {\n        return x `\n      <div class=\"dashview-card\">\n        <p>No home information available. Make sure your Home Assistant is configured with areas and entities.</p>\n      </div>\n    `;\n    }\n    /**\n     * Analyze home complexity and areas.\n     */\n    async analyzeHome() {\n        if (!this.homeInfo || !this.wsConnection)\n            return;\n        try {\n            // Get detailed area information\n            const areaData = await this.callWebSocket('get_area_entities', {});\n            // Convert to AreaInfo format\n            for (const [areaId, data] of Object.entries(areaData)) {\n                this.areas.set(areaId, {\n                    areaId,\n                    name: data.name,\n                    entities: data.entities || [],\n                    entityCount: data.entity_count || 0,\n                    deviceCount: data.device_count || 0,\n                });\n            }\n            logger_logger.info(`Analyzed ${this.areas.size} areas`);\n        }\n        catch (error) {\n            logger_logger.error('Failed to analyze home:', error);\n        }\n    }\n    /**\n     * Select optimal layout based on complexity score and area count.\n     */\n    selectOptimalLayout() {\n        if (!this.homeInfo || !this.layoutEngine)\n            return;\n        const complexityScore = this.homeInfo.complexityScore;\n        const areaCount = this.areas.size;\n        this.currentLayout = this.layoutEngine.selectLayout(complexityScore, areaCount);\n        // Update breakpoint\n        const containerWidth = this.offsetWidth || window.innerWidth;\n        this.currentBreakpoint = this.currentLayout.getBreakpoint(containerWidth);\n    }\n    /**\n     * Initialize widgets based on areas and layout.\n     */\n    async initializeWidgets() {\n        if (!this.layoutEngine || !this.currentLayout)\n            return;\n        // Organize widgets from areas\n        const areaInfos = Array.from(this.areas.values());\n        this.widgets = this.layoutEngine.organizeWidgets(areaInfos);\n        // Handle overflow\n        const { visible } = this.layoutEngine.handleOverflow(this.widgets, this.currentLayout, this.currentBreakpoint);\n        this.widgets = visible;\n        logger_logger.info(`Initialized ${this.widgets.length} widgets`);\n        // Update subscriptions for visible entities\n        await this.updateVisibleSubscriptions();\n    }\n    /**\n     * Update subscriptions based on visible widgets.\n     */\n    async updateVisibleSubscriptions() {\n        if (!this._subscriptionManager)\n            return;\n        const visibleEntities = new Set();\n        for (const widget of this.widgets) {\n            for (const entity of widget.entities) {\n                visibleEntities.add(entity);\n            }\n        }\n        this._subscriptionManager.updateVisibleEntities(Array.from(visibleEntities));\n    }\n    /**\n     * Set up resize observer for responsive behavior.\n     */\n    setupResizeObserver() {\n        const resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === this) {\n                    this.handleResize(entry.contentRect.width);\n                }\n            }\n        });\n        resizeObserver.observe(this);\n    }\n    /**\n     * Handle container resize.\n     */\n    handleResize(width) {\n        if (!this.currentLayout)\n            return;\n        const breakpointChanged = this.currentLayout.updateContainerWidth(width);\n        if (breakpointChanged) {\n            this.currentBreakpoint = this.currentLayout.getBreakpoint();\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Render the dashboard grid with widgets.\n     */\n    renderDashboard() {\n        if (!this.currentLayout || this.widgets.length === 0) {\n            return x `\n        <div class=\"dashboard-loading\">\n          <p>Setting up your dashboard...</p>\n        </div>\n      `;\n        }\n        const gridCSS = this.currentLayout.generateGridCSS(this.currentBreakpoint);\n        const positions = this.layoutEngine.calculatePositions(this.widgets, this.areas.size);\n        return x `\n      <div class=\"dashboard-grid\" style=\"${gridCSS}\">\n        ${positions.map(pos => {\n            const widget = this.widgets.find(w => this.getWidgetId(w) === pos.widgetId);\n            if (!widget)\n                return '';\n            return this.renderWidget(widget, pos);\n        })}\n      </div>\n    `;\n    }\n    /**\n     * Render a single widget.\n     */\n    renderWidget(widget, position) {\n        const style = `\n      grid-area: ${position.gridArea};\n      ${position.gridColumn ? `grid-column: ${position.gridColumn};` : ''}\n      ${position.gridRow ? `grid-row: ${position.gridRow};` : ''}\n    `;\n        switch (widget.type) {\n            case 'room':\n                const area = Array.from(this.areas.values()).find(a => a.entities.some(e => widget.entities.includes(e)));\n                return x `\n          <div class=\"widget-container\" style=\"${style}\">\n            <dashview-room-widget\n              .hass=${this.hass}\n              .widgetConfig=${widget}\n              .areaId=${area?.areaId}\n              .areaName=${area?.name || widget.title}\n            ></dashview-room-widget>\n          </div>\n        `;\n            // TODO: Add other widget types when implemented\n            default:\n                return x `\n          <div class=\"widget-container\" style=\"${style}\">\n            <div class=\"dashview-card\">\n              <p>Widget type '${widget.type}' not implemented yet</p>\n            </div>\n          </div>\n        `;\n        }\n    }\n    /**\n     * Generate widget ID.\n     */\n    getWidgetId(widget) {\n        const firstEntity = widget.entities[0] || 'unknown';\n        return `${widget.type}-${firstEntity.replace(/\\./g, '_')}`;\n    }\n    /**\n     * Clean up resources.\n     */\n    cleanup() {\n        if (this._subscriptionManager) {\n            this._subscriptionManager.clear();\n        }\n        if (this._stateManager) {\n            this._stateManager.clear();\n        }\n    }\n};\nDashviewDashboard.styles = [\n    dashviewTheme,\n    dashviewStyles,\n    i `\n      :host {\n        display: block;\n        height: 100%;\n        width: 100%;\n      }\n\n      .welcome-header {\n        text-align: center;\n        margin-bottom: var(--dashview-spacing-xl);\n      }\n\n      .welcome-title {\n        font-size: 2.5rem;\n        font-weight: 300;\n        color: var(--dashview-primary-text-color);\n        margin: 0 0 var(--dashview-spacing-sm);\n      }\n\n      .welcome-subtitle {\n        font-size: 1.2rem;\n        color: var(--dashview-secondary-text-color);\n        margin: 0;\n      }\n\n      .info-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: var(--dashview-spacing-md);\n        margin-top: var(--dashview-spacing-xl);\n      }\n\n      .info-card {\n        background: var(--dashview-card-background);\n        border-radius: var(--dashview-border-radius);\n        padding: var(--dashview-spacing-lg);\n        text-align: center;\n        box-shadow: var(--dashview-box-shadow);\n        transition: transform 0.2s ease;\n      }\n\n      .info-card:hover {\n        transform: translateY(-2px);\n      }\n\n      .info-value {\n        font-size: 3rem;\n        font-weight: 300;\n        color: var(--primary-color);\n        margin: 0;\n      }\n\n      .info-label {\n        font-size: 1rem;\n        color: var(--dashview-secondary-text-color);\n        margin: var(--dashview-spacing-sm) 0 0;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n      }\n\n      .complexity-meter {\n        width: 100%;\n        height: 20px;\n        background: var(--divider-color);\n        border-radius: 10px;\n        margin-top: var(--dashview-spacing-md);\n        overflow: hidden;\n      }\n\n      .complexity-fill {\n        height: 100%;\n        background: linear-gradient(90deg, \n          var(--success-color) 0%, \n          var(--warning-color) 50%, \n          var(--error-color) 100%\n        );\n        transition: width 0.5s ease;\n      }\n\n      .areas-list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--dashview-spacing-sm);\n        margin-top: var(--dashview-spacing-md);\n      }\n\n      .area-tag {\n        background: var(--primary-color);\n        color: var(--text-primary-color, white);\n        padding: var(--dashview-spacing-xs) var(--dashview-spacing-sm);\n        border-radius: var(--dashview-border-radius);\n        font-size: 0.9rem;\n      }\n\n      .loading-spinner {\n        animation: spin 1s linear infinite;\n        width: 48px;\n        height: 48px;\n        border: 3px solid var(--divider-color);\n        border-top-color: var(--primary-color);\n        border-radius: 50%;\n      }\n\n      @keyframes spin {\n        to { transform: rotate(360deg); }\n      }\n\n      /* Dashboard grid layout */\n      .dashboard-grid {\n        display: grid;\n        height: 100%;\n        width: 100%;\n        overflow: auto;\n      }\n\n      .widget-container {\n        position: relative;\n        min-height: 200px;\n      }\n\n      /* Loading state for dashboard mode */\n      .dashboard-loading {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100%;\n        flex-direction: column;\n        gap: var(--dashview-spacing-md);\n      }\n\n      .dashboard-loading p {\n        color: var(--dashview-secondary-text-color);\n      }\n    `,\n];\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewDashboard.prototype, \"loading\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewDashboard.prototype, \"error\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewDashboard.prototype, \"homeInfo\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewDashboard.prototype, \"wsConnection\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewDashboard.prototype, \"layoutEngine\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewDashboard.prototype, \"currentLayout\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Array)\n], DashviewDashboard.prototype, \"widgets\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", Object)\n], DashviewDashboard.prototype, \"currentBreakpoint\", void 0);\n__decorate([\n    state_r(),\n    __metadata(\"design:type\", typeof (_d = typeof Map !== \"undefined\" && Map) === \"function\" ? _d : Object)\n], DashviewDashboard.prototype, \"areas\", void 0);\nDashviewDashboard = __decorate([\n    custom_element_t('dashview-dashboard')\n], DashviewDashboard);\n\n\n;// ./src/panel-entry.ts\n/**\n * Home Assistant Panel Entry Point\n * This file creates the proper panel structure that Home Assistant expects\n */\n\n\n// Set up logger based on environment\nif (false) // removed by dead control flow\n{}\n// Export version for debugging\nconst DASHVIEW_VERSION = '0.2.7';\n/**\n * Create Home Assistant panel function\n * This is the function that Home Assistant will call to create the panel\n */\nfunction createDashviewPanel(hass, narrow, route, panel) {\n    logger.info(`Creating Dashview V2 Panel v${DASHVIEW_VERSION}`);\n    // Create container element\n    const container = document.createElement('div');\n    container.style.cssText = `\n    height: 100vh;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    background: var(--primary-background-color);\n  `;\n    // Create dashboard element\n    const dashboard = document.createElement('dashview-dashboard');\n    dashboard.hass = hass;\n    dashboard.narrow = narrow;\n    dashboard.route = route;\n    dashboard.panel = panel;\n    // Style the dashboard to fill the container\n    dashboard.style.cssText = `\n    flex: 1;\n    width: 100%;\n    height: 100%;\n  `;\n    // Add dashboard to container\n    container.appendChild(dashboard);\n    // Return object with required methods\n    return {\n        render: () => container,\n        update: (newHass, newNarrow, newRoute) => {\n            dashboard.hass = newHass;\n            dashboard.narrow = newNarrow;\n            dashboard.route = newRoute;\n        },\n        destroy: () => {\n            if (container.parentNode) {\n                container.parentNode.removeChild(container);\n            }\n        }\n    };\n}\n// Verify dashboard element is registered\nconst dashboardElement = customElements.get('dashview-dashboard');\nif (dashboardElement) {\n    logger_logger.info('Dashview V2 dashboard element registered successfully');\n}\nelse {\n    logger_logger.error('Failed to register dashview-dashboard element');\n}\n// Set up global error handler for debugging\nwindow.addEventListener('error', (event) => {\n    logger_logger.error('Global error:', event.error);\n});\n// Set up unhandled rejection handler\nwindow.addEventListener('unhandledrejection', (event) => {\n    logger_logger.error('Unhandled promise rejection:', event.reason);\n});\n// Log initialization\nlogger_logger.info(`Dashview V2 Panel Entry v${DASHVIEW_VERSION} initialized`);\n// Export the panel creation function as default\n/* harmony default export */ const panel_entry = ((/* unused pure expression or super */ null && (createDashviewPanel)));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0FBQ2xFLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztJQUNyQixhQUFNLENBQUMsSUFBSSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7QUFDdkUsQ0FBQztLQUFNLENBQUM7SUFDTixhQUFNLENBQUMsS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUVELDRDQUE0QztBQUM1QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDekMsYUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQyxDQUFDO0FBRUgscUNBQXFDO0FBQ3JDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ3RELGFBQU0sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDO0FBRUgscUJBQXFCO0FBQ3JCLGFBQU0sQ0FBQyxJQUFJLENBQUMsNEJBQTRCLGdCQUFnQixjQUFjLENBQUMsQ0FBQztBQUV4RSxnREFBZ0Q7QUFDaEQsa0RBQWUsbUVBQW1CLElBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcz9kYTQ0Iiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvY3NzLXRhZy5qcz9iODdiIiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvcmVhY3RpdmUtZWxlbWVudC5qcz9mNmVlIiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9saXQtaHRtbC5qcz83YmIyIiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9saXQtZWxlbWVudC9saXQtZWxlbWVudC5qcz80NDY5Iiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9saXQvaW5kZXguanM/MDUyNSIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvY3VzdG9tLWVsZW1lbnQuanM/MWJhMSIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanM/MDAyZCIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvc3RhdGUuanM/YmNlZSIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvbGl0L2RlY29yYXRvcnMuanM/MWYwZiIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9zcmMvY29yZS9iYXNlLWVsZW1lbnQudHM/YjVkNyIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9zcmMvY29yZS93ZWJzb2NrZXQtY29ubmVjdGlvbi50cz9kMmYzIiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL3NyYy91dGlscy9sb2dnZXIudHM/OGQ2YSIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9zcmMvY29yZS9zdGF0ZS1tYW5hZ2VyLnRzPzcyY2YiLCJ3ZWJwYWNrOi8vQGRhc2h2aWV3L2Zyb250ZW5kLy4vc3JjL2NvcmUvc3Vic2NyaXB0aW9uLW1hbmFnZXIudHM/OTcxYiIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9zcmMvbGF5b3V0cy9iYXNlLWxheW91dC50cz9lYjc5Iiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL3NyYy9sYXlvdXRzL3N0YW5kYXJkLWxheW91dC50cz9lN2JhIiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL3NyYy9sYXlvdXRzL2xheW91dC1lbmdpbmUudHM/MzVjMSIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9zcmMvc3R5bGVzL3RoZW1lLnRzPzk0Y2UiLCJ3ZWJwYWNrOi8vQGRhc2h2aWV3L2Zyb250ZW5kLy4vc3JjL3V0aWxzL2dlc3R1cmVzLnRzPzE3ZGQiLCJ3ZWJwYWNrOi8vQGRhc2h2aWV3L2Zyb250ZW5kLy4vc3JjL3N0eWxlcy9hbmltYXRpb25zLnRzP2EzNWQiLCJ3ZWJwYWNrOi8vQGRhc2h2aWV3L2Zyb250ZW5kLy4vc3JjL2NvcmUvd2lkZ2V0LWJhc2UudHM/YTVkNCIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9zcmMvdXRpbHMvaWNvbnMudHM/ZTc4ZiIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9zcmMvd2lkZ2V0cy9yb29tLXdpZGdldC50cz9hMDFlIiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL3NyYy93aWRnZXRzL2RldmljZS1ncm91cC13aWRnZXQudHM/NmQ0MiIsIndlYnBhY2s6Ly9AZGFzaHZpZXcvZnJvbnRlbmQvLi9zcmMvd2lkZ2V0cy9jbGltYXRlLXdpZGdldC50cz8zYjAxIiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL3NyYy93aWRnZXRzL3F1aWNrLWNvbnRyb2xzLXdpZGdldC50cz83ZmY3Iiwid2VicGFjazovL0BkYXNodmlldy9mcm9udGVuZC8uL3NyYy9kYXNoYm9hcmQvZGFzaHZpZXctZGFzaGJvYXJkLnRzP2JiNjciLCJ3ZWJwYWNrOi8vQGRhc2h2aWV3L2Zyb250ZW5kLy4vc3JjL3BhbmVsLWVudHJ5LnRzP2ZlYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UsIFN1cHByZXNzZWRFcnJvciwgU3ltYm9sLCBJdGVyYXRvciAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGcgPSBPYmplY3QuY3JlYXRlKCh0eXBlb2YgSXRlcmF0b3IgPT09IFwiZnVuY3Rpb25cIiA/IEl0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpO1xuICByZXR1cm4gZy5uZXh0ID0gdmVyYigwKSwgZ1tcInRocm93XCJdID0gdmVyYigxKSwgZ1tcInJldHVyblwiXSA9IHZlcmIoMiksIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBBc3luY0l0ZXJhdG9yID09PSBcImZ1bmN0aW9uXCIgPyBBc3luY0l0ZXJhdG9yIDogT2JqZWN0KS5wcm90b3R5cGUpLCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIsIGF3YWl0UmV0dXJuKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiBhd2FpdFJldHVybihmKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZiwgcmVqZWN0KTsgfTsgfVxuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbnZhciBvd25LZXlzID0gZnVuY3Rpb24obykge1xuICBvd25LZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICB2YXIgYXIgPSBbXTtcbiAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgIHJldHVybiBhcjtcbiAgfTtcbiAgcmV0dXJuIG93bktleXMobyk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlLCBpbm5lcjtcbiAgICBpZiAoYXN5bmMpIHtcbiAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpZiAoIVN5bWJvbC5kaXNwb3NlKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmRpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICAgIGlmIChhc3luYykgaW5uZXIgPSBkaXNwb3NlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRpc3Bvc2UgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgaWYgKGlubmVyKSBkaXNwb3NlID0gZnVuY3Rpb24oKSB7IHRyeSB7IGlubmVyLmNhbGwodGhpcyk7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOyB9IH07XG4gICAgZW52LnN0YWNrLnB1c2goeyB2YWx1ZTogdmFsdWUsIGRpc3Bvc2U6IGRpc3Bvc2UsIGFzeW5jOiBhc3luYyB9KTtcbiAgfVxuICBlbHNlIGlmIChhc3luYykge1xuICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgX1N1cHByZXNzZWRFcnJvciA9IHR5cGVvZiBTdXBwcmVzc2VkRXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChlcnJvciwgc3VwcHJlc3NlZCwgbWVzc2FnZSkge1xuICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGUubmFtZSA9IFwiU3VwcHJlc3NlZEVycm9yXCIsIGUuZXJyb3IgPSBlcnJvciwgZS5zdXBwcmVzc2VkID0gc3VwcHJlc3NlZCwgZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2Rpc3Bvc2VSZXNvdXJjZXMoZW52KSB7XG4gIGZ1bmN0aW9uIGZhaWwoZSkge1xuICAgIGVudi5lcnJvciA9IGVudi5oYXNFcnJvciA/IG5ldyBfU3VwcHJlc3NlZEVycm9yKGUsIGVudi5lcnJvciwgXCJBbiBlcnJvciB3YXMgc3VwcHJlc3NlZCBkdXJpbmcgZGlzcG9zYWwuXCIpIDogZTtcbiAgICBlbnYuaGFzRXJyb3IgPSB0cnVlO1xuICB9XG4gIHZhciByLCBzID0gMDtcbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAociA9IGVudi5zdGFjay5wb3AoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFyLmFzeW5jICYmIHMgPT09IDEpIHJldHVybiBzID0gMCwgZW52LnN0YWNrLnB1c2gociksIFByb21pc2UucmVzb2x2ZSgpLnRoZW4obmV4dCk7XG4gICAgICAgIGlmIChyLmRpc3Bvc2UpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gci5kaXNwb3NlLmNhbGwoci52YWx1ZSk7XG4gICAgICAgICAgaWYgKHIuYXN5bmMpIHJldHVybiBzIHw9IDIsIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHMgfD0gMTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzID09PSAxKSByZXR1cm4gZW52Lmhhc0Vycm9yID8gUHJvbWlzZS5yZWplY3QoZW52LmVycm9yKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24ocGF0aCwgcHJlc2VydmVKc3gpIHtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiICYmIC9eXFwuXFwuP1xcLy8udGVzdChwYXRoKSkge1xuICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwuKHRzeCkkfCgoPzpcXC5kKT8pKCg/OlxcLlteLi9dKz8pPylcXC4oW2NtXT8pdHMkL2ksIGZ1bmN0aW9uIChtLCB0c3gsIGQsIGV4dCwgY20pIHtcbiAgICAgICAgICByZXR1cm4gdHN4ID8gcHJlc2VydmVKc3ggPyBcIi5qc3hcIiA6IFwiLmpzXCIgOiBkICYmICghZXh0IHx8ICFjbSkgPyBtIDogKGQgKyBleHQgKyBcIi5cIiArIGNtLnRvTG93ZXJDYXNlKCkgKyBcImpzXCIpO1xuICAgICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX2VzRGVjb3JhdGUsXG4gIF9fcnVuSW5pdGlhbGl6ZXJzLFxuICBfX3Byb3BLZXksXG4gIF9fc2V0RnVuY3Rpb25OYW1lLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbiAgX19yZXdyaXRlUmVsYXRpdmVJbXBvcnRFeHRlbnNpb24sXG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PWdsb2JhbFRoaXMsZT10LlNoYWRvd1Jvb3QmJih2b2lkIDA9PT10LlNoYWR5Q1NTfHx0LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUscz1TeW1ib2woKSxvPW5ldyBXZWFrTWFwO2NsYXNzIG57Y29uc3RydWN0b3IodCxlLG8pe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLG8hPT1zKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXQsdGhpcy50PWV9Z2V0IHN0eWxlU2hlZXQoKXtsZXQgdD10aGlzLm87Y29uc3Qgcz10aGlzLnQ7aWYoZSYmdm9pZCAwPT09dCl7Y29uc3QgZT12b2lkIDAhPT1zJiYxPT09cy5sZW5ndGg7ZSYmKHQ9by5nZXQocykpLHZvaWQgMD09PXQmJigodGhpcy5vPXQ9bmV3IENTU1N0eWxlU2hlZXQpLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCksZSYmby5zZXQocyx0KSl9cmV0dXJuIHR9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCByPXQ9Pm5ldyBuKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLHZvaWQgMCxzKSxpPSh0LC4uLmUpPT57Y29uc3Qgbz0xPT09dC5sZW5ndGg/dFswXTplLnJlZHVjZSgoKGUscyxvKT0+ZSsodD0+e2lmKCEwPT09dC5fJGNzc1Jlc3VsdCQpcmV0dXJuIHQuY3NzVGV4dDtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDt0aHJvdyBFcnJvcihcIlZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiBcIit0K1wiLiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dCB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpfSkocykrdFtvKzFdKSx0WzBdKTtyZXR1cm4gbmV3IG4obyx0LHMpfSxTPShzLG8pPT57aWYoZSlzLmFkb3B0ZWRTdHlsZVNoZWV0cz1vLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTtlbHNlIGZvcihjb25zdCBlIG9mIG8pe2NvbnN0IG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLG49dC5saXROb25jZTt2b2lkIDAhPT1uJiZvLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsbiksby50ZXh0Q29udGVudD1lLmNzc1RleHQscy5hcHBlbmRDaGlsZChvKX19LGM9ZT90PT50OnQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0Pyh0PT57bGV0IGU9XCJcIjtmb3IoY29uc3QgcyBvZiB0LmNzc1J1bGVzKWUrPXMuY3NzVGV4dDtyZXR1cm4gcihlKX0pKHQpOnQ7ZXhwb3J0e24gYXMgQ1NTUmVzdWx0LFMgYXMgYWRvcHRTdHlsZXMsaSBhcyBjc3MsYyBhcyBnZXRDb21wYXRpYmxlU3R5bGUsZSBhcyBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsciBhcyB1bnNhZmVDU1N9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLXRhZy5qcy5tYXBcbiIsImltcG9ydHtnZXRDb21wYXRpYmxlU3R5bGUgYXMgdCxhZG9wdFN0eWxlcyBhcyBzfWZyb21cIi4vY3NzLXRhZy5qc1wiO2V4cG9ydHtDU1NSZXN1bHQsY3NzLHN1cHBvcnRzQWRvcHRpbmdTdHlsZVNoZWV0cyx1bnNhZmVDU1N9ZnJvbVwiLi9jc3MtdGFnLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9jb25zdHtpczppLGRlZmluZVByb3BlcnR5OmUsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmgsZ2V0T3duUHJvcGVydHlOYW1lczpyLGdldE93blByb3BlcnR5U3ltYm9sczpvLGdldFByb3RvdHlwZU9mOm59PU9iamVjdCxhPWdsb2JhbFRoaXMsYz1hLnRydXN0ZWRUeXBlcyxsPWM/Yy5lbXB0eVNjcmlwdDpcIlwiLHA9YS5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsZD0odCxzKT0+dCx1PXt0b0F0dHJpYnV0ZSh0LHMpe3N3aXRjaChzKXtjYXNlIEJvb2xlYW46dD10P2w6bnVsbDticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnQ9bnVsbD09dD90OkpTT04uc3RyaW5naWZ5KHQpfXJldHVybiB0fSxmcm9tQXR0cmlidXRlKHQscyl7bGV0IGk9dDtzd2l0Y2gocyl7Y2FzZSBCb29sZWFuOmk9bnVsbCE9PXQ7YnJlYWs7Y2FzZSBOdW1iZXI6aT1udWxsPT09dD9udWxsOk51bWJlcih0KTticmVhaztjYXNlIE9iamVjdDpjYXNlIEFycmF5OnRyeXtpPUpTT04ucGFyc2UodCl9Y2F0Y2godCl7aT1udWxsfX1yZXR1cm4gaX19LGY9KHQscyk9PiFpKHQscyksYj17YXR0cmlidXRlOiEwLHR5cGU6U3RyaW5nLGNvbnZlcnRlcjp1LHJlZmxlY3Q6ITEsdXNlRGVmYXVsdDohMSxoYXNDaGFuZ2VkOmZ9O1N5bWJvbC5tZXRhZGF0YT8/PVN5bWJvbChcIm1ldGFkYXRhXCIpLGEubGl0UHJvcGVydHlNZXRhZGF0YT8/PW5ldyBXZWFrTWFwO2NsYXNzIHkgZXh0ZW5kcyBIVE1MRWxlbWVudHtzdGF0aWMgYWRkSW5pdGlhbGl6ZXIodCl7dGhpcy5fJEVpKCksKHRoaXMubD8/PVtdKS5wdXNoKHQpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7cmV0dXJuIHRoaXMuZmluYWxpemUoKSx0aGlzLl8kRWgmJlsuLi50aGlzLl8kRWgua2V5cygpXX1zdGF0aWMgY3JlYXRlUHJvcGVydHkodCxzPWIpe2lmKHMuc3RhdGUmJihzLmF0dHJpYnV0ZT0hMSksdGhpcy5fJEVpKCksdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkmJigocz1PYmplY3QuY3JlYXRlKHMpKS53cmFwcGVkPSEwKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LHMpLCFzLm5vQWNjZXNzb3Ipe2NvbnN0IGk9U3ltYm9sKCksaD10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LGkscyk7dm9pZCAwIT09aCYmZSh0aGlzLnByb3RvdHlwZSx0LGgpfX1zdGF0aWMgZ2V0UHJvcGVydHlEZXNjcmlwdG9yKHQscyxpKXtjb25zdHtnZXQ6ZSxzZXQ6cn09aCh0aGlzLnByb3RvdHlwZSx0KT8/e2dldCgpe3JldHVybiB0aGlzW3NdfSxzZXQodCl7dGhpc1tzXT10fX07cmV0dXJue2dldDplLHNldChzKXtjb25zdCBoPWU/LmNhbGwodGhpcyk7cj8uY2FsbCh0aGlzLHMpLHRoaXMucmVxdWVzdFVwZGF0ZSh0LGgsaSl9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfX1zdGF0aWMgZ2V0UHJvcGVydHlPcHRpb25zKHQpe3JldHVybiB0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLmdldCh0KT8/Yn1zdGF0aWMgXyRFaSgpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoZChcImVsZW1lbnRQcm9wZXJ0aWVzXCIpKSlyZXR1cm47Y29uc3QgdD1uKHRoaXMpO3QuZmluYWxpemUoKSx2b2lkIDAhPT10LmwmJih0aGlzLmw9Wy4uLnQubF0pLHRoaXMuZWxlbWVudFByb3BlcnRpZXM9bmV3IE1hcCh0LmVsZW1lbnRQcm9wZXJ0aWVzKX1zdGF0aWMgZmluYWxpemUoKXtpZih0aGlzLmhhc093blByb3BlcnR5KGQoXCJmaW5hbGl6ZWRcIikpKXJldHVybjtpZih0aGlzLmZpbmFsaXplZD0hMCx0aGlzLl8kRWkoKSx0aGlzLmhhc093blByb3BlcnR5KGQoXCJwcm9wZXJ0aWVzXCIpKSl7Y29uc3QgdD10aGlzLnByb3BlcnRpZXMscz1bLi4ucih0KSwuLi5vKHQpXTtmb3IoY29uc3QgaSBvZiBzKXRoaXMuY3JlYXRlUHJvcGVydHkoaSx0W2ldKX1jb25zdCB0PXRoaXNbU3ltYm9sLm1ldGFkYXRhXTtpZihudWxsIT09dCl7Y29uc3Qgcz1saXRQcm9wZXJ0eU1ldGFkYXRhLmdldCh0KTtpZih2b2lkIDAhPT1zKWZvcihjb25zdFt0LGldb2Ygcyl0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzLnNldCh0LGkpfXRoaXMuXyRFaD1uZXcgTWFwO2Zvcihjb25zdFt0LHNdb2YgdGhpcy5lbGVtZW50UHJvcGVydGllcyl7Y29uc3QgaT10aGlzLl8kRXUodCxzKTt2b2lkIDAhPT1pJiZ0aGlzLl8kRWguc2V0KGksdCl9dGhpcy5lbGVtZW50U3R5bGVzPXRoaXMuZmluYWxpemVTdHlsZXModGhpcy5zdHlsZXMpfXN0YXRpYyBmaW5hbGl6ZVN0eWxlcyhzKXtjb25zdCBpPVtdO2lmKEFycmF5LmlzQXJyYXkocykpe2NvbnN0IGU9bmV3IFNldChzLmZsYXQoMS8wKS5yZXZlcnNlKCkpO2Zvcihjb25zdCBzIG9mIGUpaS51bnNoaWZ0KHQocykpfWVsc2Ugdm9pZCAwIT09cyYmaS5wdXNoKHQocykpO3JldHVybiBpfXN0YXRpYyBfJEV1KHQscyl7Y29uc3QgaT1zLmF0dHJpYnV0ZTtyZXR1cm4hMT09PWk/dm9pZCAwOlwic3RyaW5nXCI9PXR5cGVvZiBpP2k6XCJzdHJpbmdcIj09dHlwZW9mIHQ/dC50b0xvd2VyQ2FzZSgpOnZvaWQgMH1jb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fJEVwPXZvaWQgMCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMSx0aGlzLmhhc1VwZGF0ZWQ9ITEsdGhpcy5fJEVtPW51bGwsdGhpcy5fJEV2KCl9XyRFdigpe3RoaXMuXyRFUz1uZXcgUHJvbWlzZSgodD0+dGhpcy5lbmFibGVVcGRhdGluZz10KSksdGhpcy5fJEFMPW5ldyBNYXAsdGhpcy5fJEVfKCksdGhpcy5yZXF1ZXN0VXBkYXRlKCksdGhpcy5jb25zdHJ1Y3Rvci5sPy5mb3JFYWNoKCh0PT50KHRoaXMpKSl9YWRkQ29udHJvbGxlcih0KXsodGhpcy5fJEVPPz89bmV3IFNldCkuYWRkKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmdC5ob3N0Q29ubmVjdGVkPy4oKX1yZW1vdmVDb250cm9sbGVyKHQpe3RoaXMuXyRFTz8uZGVsZXRlKHQpfV8kRV8oKXtjb25zdCB0PW5ldyBNYXAscz10aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzO2Zvcihjb25zdCBpIG9mIHMua2V5cygpKXRoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0LnNldChpLHRoaXNbaV0pLGRlbGV0ZSB0aGlzW2ldKTt0LnNpemU+MCYmKHRoaXMuXyRFcD10KX1jcmVhdGVSZW5kZXJSb290KCl7Y29uc3QgdD10aGlzLnNoYWRvd1Jvb3Q/P3RoaXMuYXR0YWNoU2hhZG93KHRoaXMuY29uc3RydWN0b3Iuc2hhZG93Um9vdE9wdGlvbnMpO3JldHVybiBzKHQsdGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50U3R5bGVzKSx0fWNvbm5lY3RlZENhbGxiYWNrKCl7dGhpcy5yZW5kZXJSb290Pz89dGhpcy5jcmVhdGVSZW5kZXJSb290KCksdGhpcy5lbmFibGVVcGRhdGluZyghMCksdGhpcy5fJEVPPy5mb3JFYWNoKCh0PT50Lmhvc3RDb25uZWN0ZWQ/LigpKSl9ZW5hYmxlVXBkYXRpbmcodCl7fWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dGhpcy5fJEVPPy5mb3JFYWNoKCh0PT50Lmhvc3REaXNjb25uZWN0ZWQ/LigpKSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQscyxpKXt0aGlzLl8kQUsodCxpKX1fJEVUKHQscyl7Y29uc3QgaT10aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRQcm9wZXJ0aWVzLmdldCh0KSxlPXRoaXMuY29uc3RydWN0b3IuXyRFdSh0LGkpO2lmKHZvaWQgMCE9PWUmJiEwPT09aS5yZWZsZWN0KXtjb25zdCBoPSh2b2lkIDAhPT1pLmNvbnZlcnRlcj8udG9BdHRyaWJ1dGU/aS5jb252ZXJ0ZXI6dSkudG9BdHRyaWJ1dGUocyxpLnR5cGUpO3RoaXMuXyRFbT10LG51bGw9PWg/dGhpcy5yZW1vdmVBdHRyaWJ1dGUoZSk6dGhpcy5zZXRBdHRyaWJ1dGUoZSxoKSx0aGlzLl8kRW09bnVsbH19XyRBSyh0LHMpe2NvbnN0IGk9dGhpcy5jb25zdHJ1Y3RvcixlPWkuXyRFaC5nZXQodCk7aWYodm9pZCAwIT09ZSYmdGhpcy5fJEVtIT09ZSl7Y29uc3QgdD1pLmdldFByb3BlcnR5T3B0aW9ucyhlKSxoPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY29udmVydGVyP3tmcm9tQXR0cmlidXRlOnQuY29udmVydGVyfTp2b2lkIDAhPT10LmNvbnZlcnRlcj8uZnJvbUF0dHJpYnV0ZT90LmNvbnZlcnRlcjp1O3RoaXMuXyRFbT1lO2NvbnN0IHI9aC5mcm9tQXR0cmlidXRlKHMsdC50eXBlKTt0aGlzW2VdPXI/P3RoaXMuXyRFaj8uZ2V0KGUpPz9yLHRoaXMuXyRFbT1udWxsfX1yZXF1ZXN0VXBkYXRlKHQscyxpKXtpZih2b2lkIDAhPT10KXtjb25zdCBlPXRoaXMuY29uc3RydWN0b3IsaD10aGlzW3RdO2lmKGk/Pz1lLmdldFByb3BlcnR5T3B0aW9ucyh0KSwhKChpLmhhc0NoYW5nZWQ/P2YpKGgscyl8fGkudXNlRGVmYXVsdCYmaS5yZWZsZWN0JiZoPT09dGhpcy5fJEVqPy5nZXQodCkmJiF0aGlzLmhhc0F0dHJpYnV0ZShlLl8kRXUodCxpKSkpKXJldHVybjt0aGlzLkModCxzLGkpfSExPT09dGhpcy5pc1VwZGF0ZVBlbmRpbmcmJih0aGlzLl8kRVM9dGhpcy5fJEVQKCkpfUModCxzLHt1c2VEZWZhdWx0OmkscmVmbGVjdDplLHdyYXBwZWQ6aH0scil7aSYmISh0aGlzLl8kRWo/Pz1uZXcgTWFwKS5oYXModCkmJih0aGlzLl8kRWouc2V0KHQscj8/cz8/dGhpc1t0XSksITAhPT1ofHx2b2lkIDAhPT1yKXx8KHRoaXMuXyRBTC5oYXModCl8fCh0aGlzLmhhc1VwZGF0ZWR8fGl8fChzPXZvaWQgMCksdGhpcy5fJEFMLnNldCh0LHMpKSwhMD09PWUmJnRoaXMuXyRFbSE9PXQmJih0aGlzLl8kRXE/Pz1uZXcgU2V0KS5hZGQodCkpfWFzeW5jIF8kRVAoKXt0aGlzLmlzVXBkYXRlUGVuZGluZz0hMDt0cnl7YXdhaXQgdGhpcy5fJEVTfWNhdGNoKHQpe1Byb21pc2UucmVqZWN0KHQpfWNvbnN0IHQ9dGhpcy5zY2hlZHVsZVVwZGF0ZSgpO3JldHVybiBudWxsIT10JiZhd2FpdCB0LCF0aGlzLmlzVXBkYXRlUGVuZGluZ31zY2hlZHVsZVVwZGF0ZSgpe3JldHVybiB0aGlzLnBlcmZvcm1VcGRhdGUoKX1wZXJmb3JtVXBkYXRlKCl7aWYoIXRoaXMuaXNVcGRhdGVQZW5kaW5nKXJldHVybjtpZighdGhpcy5oYXNVcGRhdGVkKXtpZih0aGlzLnJlbmRlclJvb3Q/Pz10aGlzLmNyZWF0ZVJlbmRlclJvb3QoKSx0aGlzLl8kRXApe2Zvcihjb25zdFt0LHNdb2YgdGhpcy5fJEVwKXRoaXNbdF09czt0aGlzLl8kRXA9dm9pZCAwfWNvbnN0IHQ9dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcztpZih0LnNpemU+MClmb3IoY29uc3RbcyxpXW9mIHQpe2NvbnN0e3dyYXBwZWQ6dH09aSxlPXRoaXNbc107ITAhPT10fHx0aGlzLl8kQUwuaGFzKHMpfHx2b2lkIDA9PT1lfHx0aGlzLkMocyx2b2lkIDAsaSxlKX19bGV0IHQ9ITE7Y29uc3Qgcz10aGlzLl8kQUw7dHJ5e3Q9dGhpcy5zaG91bGRVcGRhdGUocyksdD8odGhpcy53aWxsVXBkYXRlKHMpLHRoaXMuXyRFTz8uZm9yRWFjaCgodD0+dC5ob3N0VXBkYXRlPy4oKSkpLHRoaXMudXBkYXRlKHMpKTp0aGlzLl8kRU0oKX1jYXRjaChzKXt0aHJvdyB0PSExLHRoaXMuXyRFTSgpLHN9dCYmdGhpcy5fJEFFKHMpfXdpbGxVcGRhdGUodCl7fV8kQUUodCl7dGhpcy5fJEVPPy5mb3JFYWNoKCh0PT50Lmhvc3RVcGRhdGVkPy4oKSkpLHRoaXMuaGFzVXBkYXRlZHx8KHRoaXMuaGFzVXBkYXRlZD0hMCx0aGlzLmZpcnN0VXBkYXRlZCh0KSksdGhpcy51cGRhdGVkKHQpfV8kRU0oKXt0aGlzLl8kQUw9bmV3IE1hcCx0aGlzLmlzVXBkYXRlUGVuZGluZz0hMX1nZXQgdXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5nZXRVcGRhdGVDb21wbGV0ZSgpfWdldFVwZGF0ZUNvbXBsZXRlKCl7cmV0dXJuIHRoaXMuXyRFU31zaG91bGRVcGRhdGUodCl7cmV0dXJuITB9dXBkYXRlKHQpe3RoaXMuXyRFcSYmPXRoaXMuXyRFcS5mb3JFYWNoKCh0PT50aGlzLl8kRVQodCx0aGlzW3RdKSkpLHRoaXMuXyRFTSgpfXVwZGF0ZWQodCl7fWZpcnN0VXBkYXRlZCh0KXt9fXkuZWxlbWVudFN0eWxlcz1bXSx5LnNoYWRvd1Jvb3RPcHRpb25zPXttb2RlOlwib3BlblwifSx5W2QoXCJlbGVtZW50UHJvcGVydGllc1wiKV09bmV3IE1hcCx5W2QoXCJmaW5hbGl6ZWRcIildPW5ldyBNYXAscD8uKHtSZWFjdGl2ZUVsZW1lbnQ6eX0pLChhLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zPz89W10pLnB1c2goXCIyLjEuMVwiKTtleHBvcnR7eSBhcyBSZWFjdGl2ZUVsZW1lbnQscyBhcyBhZG9wdFN0eWxlcyx1IGFzIGRlZmF1bHRDb252ZXJ0ZXIsdCBhcyBnZXRDb21wYXRpYmxlU3R5bGUsZiBhcyBub3RFcXVhbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdGl2ZS1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCB0PWdsb2JhbFRoaXMsaT10LnRydXN0ZWRUeXBlcyxzPWk/aS5jcmVhdGVQb2xpY3koXCJsaXQtaHRtbFwiLHtjcmVhdGVIVE1MOnQ9PnR9KTp2b2lkIDAsZT1cIiRsaXQkXCIsaD1gbGl0JCR7TWF0aC5yYW5kb20oKS50b0ZpeGVkKDkpLnNsaWNlKDIpfSRgLG89XCI/XCIraCxuPWA8JHtvfT5gLHI9ZG9jdW1lbnQsbD0oKT0+ci5jcmVhdGVDb21tZW50KFwiXCIpLGM9dD0+bnVsbD09PXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LGE9QXJyYXkuaXNBcnJheSx1PXQ9PmEodCl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/LltTeW1ib2wuaXRlcmF0b3JdLGQ9XCJbIFxcdFxcblxcZlxccl1cIixmPS88KD86KCEtLXxcXC9bXmEtekEtWl0pfChcXC8/W2EtekEtWl1bXj5cXHNdKil8KFxcLz8kKSkvZyx2PS8tLT4vZyxfPS8+L2csbT1SZWdFeHAoYD58JHtkfSg/OihbXlxcXFxzXCInPj0vXSspKCR7ZH0qPSR7ZH0qKD86W14gXFx0XFxuXFxmXFxyXCInXFxgPD49XXwoXCJ8Jyl8KSl8JClgLFwiZ1wiKSxwPS8nL2csZz0vXCIvZywkPS9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaSx5PXQ9PihpLC4uLnMpPT4oe18kbGl0VHlwZSQ6dCxzdHJpbmdzOmksdmFsdWVzOnN9KSx4PXkoMSksYj15KDIpLHc9eSgzKSxUPVN5bWJvbC5mb3IoXCJsaXQtbm9DaGFuZ2VcIiksRT1TeW1ib2wuZm9yKFwibGl0LW5vdGhpbmdcIiksQT1uZXcgV2Vha01hcCxDPXIuY3JlYXRlVHJlZVdhbGtlcihyLDEyOSk7ZnVuY3Rpb24gUCh0LGkpe2lmKCFhKHQpfHwhdC5oYXNPd25Qcm9wZXJ0eShcInJhd1wiKSl0aHJvdyBFcnJvcihcImludmFsaWQgdGVtcGxhdGUgc3RyaW5ncyBhcnJheVwiKTtyZXR1cm4gdm9pZCAwIT09cz9zLmNyZWF0ZUhUTUwoaSk6aX1jb25zdCBWPSh0LGkpPT57Y29uc3Qgcz10Lmxlbmd0aC0xLG89W107bGV0IHIsbD0yPT09aT9cIjxzdmc+XCI6Mz09PWk/XCI8bWF0aD5cIjpcIlwiLGM9Zjtmb3IobGV0IGk9MDtpPHM7aSsrKXtjb25zdCBzPXRbaV07bGV0IGEsdSxkPS0xLHk9MDtmb3IoO3k8cy5sZW5ndGgmJihjLmxhc3RJbmRleD15LHU9Yy5leGVjKHMpLG51bGwhPT11KTspeT1jLmxhc3RJbmRleCxjPT09Zj9cIiEtLVwiPT09dVsxXT9jPXY6dm9pZCAwIT09dVsxXT9jPV86dm9pZCAwIT09dVsyXT8oJC50ZXN0KHVbMl0pJiYocj1SZWdFeHAoXCI8L1wiK3VbMl0sXCJnXCIpKSxjPW0pOnZvaWQgMCE9PXVbM10mJihjPW0pOmM9PT1tP1wiPlwiPT09dVswXT8oYz1yPz9mLGQ9LTEpOnZvaWQgMD09PXVbMV0/ZD0tMjooZD1jLmxhc3RJbmRleC11WzJdLmxlbmd0aCxhPXVbMV0sYz12b2lkIDA9PT11WzNdP206J1wiJz09PXVbM10/ZzpwKTpjPT09Z3x8Yz09PXA/Yz1tOmM9PT12fHxjPT09Xz9jPWY6KGM9bSxyPXZvaWQgMCk7Y29uc3QgeD1jPT09bSYmdFtpKzFdLnN0YXJ0c1dpdGgoXCIvPlwiKT9cIiBcIjpcIlwiO2wrPWM9PT1mP3MrbjpkPj0wPyhvLnB1c2goYSkscy5zbGljZSgwLGQpK2Urcy5zbGljZShkKStoK3gpOnMraCsoLTI9PT1kP2k6eCl9cmV0dXJuW1AodCxsKyh0W3NdfHxcIjw/PlwiKSsoMj09PWk/XCI8L3N2Zz5cIjozPT09aT9cIjwvbWF0aD5cIjpcIlwiKSksb119O2NsYXNzIE57Y29uc3RydWN0b3Ioe3N0cmluZ3M6dCxfJGxpdFR5cGUkOnN9LG4pe2xldCByO3RoaXMucGFydHM9W107bGV0IGM9MCxhPTA7Y29uc3QgdT10Lmxlbmd0aC0xLGQ9dGhpcy5wYXJ0cyxbZix2XT1WKHQscyk7aWYodGhpcy5lbD1OLmNyZWF0ZUVsZW1lbnQoZixuKSxDLmN1cnJlbnROb2RlPXRoaXMuZWwuY29udGVudCwyPT09c3x8Mz09PXMpe2NvbnN0IHQ9dGhpcy5lbC5jb250ZW50LmZpcnN0Q2hpbGQ7dC5yZXBsYWNlV2l0aCguLi50LmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShyPUMubmV4dE5vZGUoKSkmJmQubGVuZ3RoPHU7KXtpZigxPT09ci5ub2RlVHlwZSl7aWYoci5oYXNBdHRyaWJ1dGVzKCkpZm9yKGNvbnN0IHQgb2Ygci5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKHQuZW5kc1dpdGgoZSkpe2NvbnN0IGk9dlthKytdLHM9ci5nZXRBdHRyaWJ1dGUodCkuc3BsaXQoaCksZT0vKFsuP0BdKT8oLiopLy5leGVjKGkpO2QucHVzaCh7dHlwZToxLGluZGV4OmMsbmFtZTplWzJdLHN0cmluZ3M6cyxjdG9yOlwiLlwiPT09ZVsxXT9IOlwiP1wiPT09ZVsxXT9JOlwiQFwiPT09ZVsxXT9MOmt9KSxyLnJlbW92ZUF0dHJpYnV0ZSh0KX1lbHNlIHQuc3RhcnRzV2l0aChoKSYmKGQucHVzaCh7dHlwZTo2LGluZGV4OmN9KSxyLnJlbW92ZUF0dHJpYnV0ZSh0KSk7aWYoJC50ZXN0KHIudGFnTmFtZSkpe2NvbnN0IHQ9ci50ZXh0Q29udGVudC5zcGxpdChoKSxzPXQubGVuZ3RoLTE7aWYocz4wKXtyLnRleHRDb250ZW50PWk/aS5lbXB0eVNjcmlwdDpcIlwiO2ZvcihsZXQgaT0wO2k8cztpKyspci5hcHBlbmQodFtpXSxsKCkpLEMubmV4dE5vZGUoKSxkLnB1c2goe3R5cGU6MixpbmRleDorK2N9KTtyLmFwcGVuZCh0W3NdLGwoKSl9fX1lbHNlIGlmKDg9PT1yLm5vZGVUeXBlKWlmKHIuZGF0YT09PW8pZC5wdXNoKHt0eXBlOjIsaW5kZXg6Y30pO2Vsc2V7bGV0IHQ9LTE7Zm9yKDstMSE9PSh0PXIuZGF0YS5pbmRleE9mKGgsdCsxKSk7KWQucHVzaCh7dHlwZTo3LGluZGV4OmN9KSx0Kz1oLmxlbmd0aC0xfWMrK319c3RhdGljIGNyZWF0ZUVsZW1lbnQodCxpKXtjb25zdCBzPXIuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO3JldHVybiBzLmlubmVySFRNTD10LHN9fWZ1bmN0aW9uIFModCxpLHM9dCxlKXtpZihpPT09VClyZXR1cm4gaTtsZXQgaD12b2lkIDAhPT1lP3MuXyRDbz8uW2VdOnMuXyRDbDtjb25zdCBvPWMoaSk/dm9pZCAwOmkuXyRsaXREaXJlY3RpdmUkO3JldHVybiBoPy5jb25zdHJ1Y3RvciE9PW8mJihoPy5fJEFPPy4oITEpLHZvaWQgMD09PW8/aD12b2lkIDA6KGg9bmV3IG8odCksaC5fJEFUKHQscyxlKSksdm9pZCAwIT09ZT8ocy5fJENvPz89W10pW2VdPWg6cy5fJENsPWgpLHZvaWQgMCE9PWgmJihpPVModCxoLl8kQVModCxpLnZhbHVlcyksaCxlKSksaX1jbGFzcyBNe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy5fJEFWPVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9dSh0KXtjb25zdHtlbDp7Y29udGVudDppfSxwYXJ0czpzfT10aGlzLl8kQUQsZT0odD8uY3JlYXRpb25TY29wZT8/cikuaW1wb3J0Tm9kZShpLCEwKTtDLmN1cnJlbnROb2RlPWU7bGV0IGg9Qy5uZXh0Tm9kZSgpLG89MCxuPTAsbD1zWzBdO2Zvcig7dm9pZCAwIT09bDspe2lmKG89PT1sLmluZGV4KXtsZXQgaTsyPT09bC50eXBlP2k9bmV3IFIoaCxoLm5leHRTaWJsaW5nLHRoaXMsdCk6MT09PWwudHlwZT9pPW5ldyBsLmN0b3IoaCxsLm5hbWUsbC5zdHJpbmdzLHRoaXMsdCk6Nj09PWwudHlwZSYmKGk9bmV3IHooaCx0aGlzLHQpKSx0aGlzLl8kQVYucHVzaChpKSxsPXNbKytuXX1vIT09bD8uaW5kZXgmJihoPUMubmV4dE5vZGUoKSxvKyspfXJldHVybiBDLmN1cnJlbnROb2RlPXIsZX1wKHQpe2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy5fJEFWKXZvaWQgMCE9PXMmJih2b2lkIDAhPT1zLnN0cmluZ3M/KHMuXyRBSSh0LHMsaSksaSs9cy5zdHJpbmdzLmxlbmd0aC0yKTpzLl8kQUkodFtpXSkpLGkrK319Y2xhc3MgUntnZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0/Ll8kQVU/P3RoaXMuXyRDdn1jb25zdHJ1Y3Rvcih0LGkscyxlKXt0aGlzLnR5cGU9Mix0aGlzLl8kQUg9RSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBQT10LHRoaXMuXyRBQj1pLHRoaXMuXyRBTT1zLHRoaXMub3B0aW9ucz1lLHRoaXMuXyRDdj1lPy5pc0Nvbm5lY3RlZD8/ITB9Z2V0IHBhcmVudE5vZGUoKXtsZXQgdD10aGlzLl8kQUEucGFyZW50Tm9kZTtjb25zdCBpPXRoaXMuXyRBTTtyZXR1cm4gdm9pZCAwIT09aSYmMTE9PT10Py5ub2RlVHlwZSYmKHQ9aS5wYXJlbnROb2RlKSx0fWdldCBzdGFydE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFBfWdldCBlbmROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQn1fJEFJKHQsaT10aGlzKXt0PVModGhpcyx0LGkpLGModCk/dD09PUV8fG51bGw9PXR8fFwiXCI9PT10Pyh0aGlzLl8kQUghPT1FJiZ0aGlzLl8kQVIoKSx0aGlzLl8kQUg9RSk6dCE9PXRoaXMuXyRBSCYmdCE9PVQmJnRoaXMuXyh0KTp2b2lkIDAhPT10Ll8kbGl0VHlwZSQ/dGhpcy4kKHQpOnZvaWQgMCE9PXQubm9kZVR5cGU/dGhpcy5UKHQpOnUodCk/dGhpcy5rKHQpOnRoaXMuXyh0KX1PKHQpe3JldHVybiB0aGlzLl8kQUEucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCx0aGlzLl8kQUIpfVQodCl7dGhpcy5fJEFIIT09dCYmKHRoaXMuXyRBUigpLHRoaXMuXyRBSD10aGlzLk8odCkpfV8odCl7dGhpcy5fJEFIIT09RSYmYyh0aGlzLl8kQUgpP3RoaXMuXyRBQS5uZXh0U2libGluZy5kYXRhPXQ6dGhpcy5UKHIuY3JlYXRlVGV4dE5vZGUodCkpLHRoaXMuXyRBSD10fSQodCl7Y29uc3R7dmFsdWVzOmksXyRsaXRUeXBlJDpzfT10LGU9XCJudW1iZXJcIj09dHlwZW9mIHM/dGhpcy5fJEFDKHQpOih2b2lkIDA9PT1zLmVsJiYocy5lbD1OLmNyZWF0ZUVsZW1lbnQoUChzLmgscy5oWzBdKSx0aGlzLm9wdGlvbnMpKSxzKTtpZih0aGlzLl8kQUg/Ll8kQUQ9PT1lKXRoaXMuXyRBSC5wKGkpO2Vsc2V7Y29uc3QgdD1uZXcgTShlLHRoaXMpLHM9dC51KHRoaXMub3B0aW9ucyk7dC5wKGkpLHRoaXMuVChzKSx0aGlzLl8kQUg9dH19XyRBQyh0KXtsZXQgaT1BLmdldCh0LnN0cmluZ3MpO3JldHVybiB2b2lkIDA9PT1pJiZBLnNldCh0LnN0cmluZ3MsaT1uZXcgTih0KSksaX1rKHQpe2EodGhpcy5fJEFIKXx8KHRoaXMuXyRBSD1bXSx0aGlzLl8kQVIoKSk7Y29uc3QgaT10aGlzLl8kQUg7bGV0IHMsZT0wO2Zvcihjb25zdCBoIG9mIHQpZT09PWkubGVuZ3RoP2kucHVzaChzPW5ldyBSKHRoaXMuTyhsKCkpLHRoaXMuTyhsKCkpLHRoaXMsdGhpcy5vcHRpb25zKSk6cz1pW2VdLHMuXyRBSShoKSxlKys7ZTxpLmxlbmd0aCYmKHRoaXMuXyRBUihzJiZzLl8kQUIubmV4dFNpYmxpbmcsZSksaS5sZW5ndGg9ZSl9XyRBUih0PXRoaXMuXyRBQS5uZXh0U2libGluZyxpKXtmb3IodGhpcy5fJEFQPy4oITEsITAsaSk7dCE9PXRoaXMuXyRBQjspe2NvbnN0IGk9dC5uZXh0U2libGluZzt0LnJlbW92ZSgpLHQ9aX19c2V0Q29ubmVjdGVkKHQpe3ZvaWQgMD09PXRoaXMuXyRBTSYmKHRoaXMuXyRDdj10LHRoaXMuXyRBUD8uKHQpKX19Y2xhc3Mga3tnZXQgdGFnTmFtZSgpe3JldHVybiB0aGlzLmVsZW1lbnQudGFnTmFtZX1nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1jb25zdHJ1Y3Rvcih0LGkscyxlLGgpe3RoaXMudHlwZT0xLHRoaXMuXyRBSD1FLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWksdGhpcy5fJEFNPWUsdGhpcy5vcHRpb25zPWgscy5sZW5ndGg+Mnx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdPyh0aGlzLl8kQUg9QXJyYXkocy5sZW5ndGgtMSkuZmlsbChuZXcgU3RyaW5nKSx0aGlzLnN0cmluZ3M9cyk6dGhpcy5fJEFIPUV9XyRBSSh0LGk9dGhpcyxzLGUpe2NvbnN0IGg9dGhpcy5zdHJpbmdzO2xldCBvPSExO2lmKHZvaWQgMD09PWgpdD1TKHRoaXMsdCxpLDApLG89IWModCl8fHQhPT10aGlzLl8kQUgmJnQhPT1ULG8mJih0aGlzLl8kQUg9dCk7ZWxzZXtjb25zdCBlPXQ7bGV0IG4scjtmb3IodD1oWzBdLG49MDtuPGgubGVuZ3RoLTE7bisrKXI9Uyh0aGlzLGVbcytuXSxpLG4pLHI9PT1UJiYocj10aGlzLl8kQUhbbl0pLG98fD0hYyhyKXx8ciE9PXRoaXMuXyRBSFtuXSxyPT09RT90PUU6dCE9PUUmJih0Kz0ocj8/XCJcIikraFtuKzFdKSx0aGlzLl8kQUhbbl09cn1vJiYhZSYmdGhpcy5qKHQpfWoodCl7dD09PUU/dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpOnRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLHQ/P1wiXCIpfX1jbGFzcyBIIGV4dGVuZHMga3tjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy50eXBlPTN9aih0KXt0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXT10PT09RT92b2lkIDA6dH19Y2xhc3MgSSBleHRlbmRzIGt7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMudHlwZT00fWoodCl7dGhpcy5lbGVtZW50LnRvZ2dsZUF0dHJpYnV0ZSh0aGlzLm5hbWUsISF0JiZ0IT09RSl9fWNsYXNzIEwgZXh0ZW5kcyBre2NvbnN0cnVjdG9yKHQsaSxzLGUsaCl7c3VwZXIodCxpLHMsZSxoKSx0aGlzLnR5cGU9NX1fJEFJKHQsaT10aGlzKXtpZigodD1TKHRoaXMsdCxpLDApPz9FKT09PVQpcmV0dXJuO2NvbnN0IHM9dGhpcy5fJEFILGU9dD09PUUmJnMhPT1FfHx0LmNhcHR1cmUhPT1zLmNhcHR1cmV8fHQub25jZSE9PXMub25jZXx8dC5wYXNzaXZlIT09cy5wYXNzaXZlLGg9dCE9PUUmJihzPT09RXx8ZSk7ZSYmdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMscyksaCYmdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5uYW1lLHRoaXMsdCksdGhpcy5fJEFIPXR9aGFuZGxlRXZlbnQodCl7XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fJEFIP3RoaXMuXyRBSC5jYWxsKHRoaXMub3B0aW9ucz8uaG9zdD8/dGhpcy5lbGVtZW50LHQpOnRoaXMuXyRBSC5oYW5kbGVFdmVudCh0KX19Y2xhc3Mgentjb25zdHJ1Y3Rvcih0LGkscyl7dGhpcy5lbGVtZW50PXQsdGhpcy50eXBlPTYsdGhpcy5fJEFOPXZvaWQgMCx0aGlzLl8kQU09aSx0aGlzLm9wdGlvbnM9c31nZXQgXyRBVSgpe3JldHVybiB0aGlzLl8kQU0uXyRBVX1fJEFJKHQpe1ModGhpcyx0KX19Y29uc3QgWj17TTplLFA6aCxBOm8sQzoxLEw6VixSOk0sRDp1LFY6UyxJOlIsSDprLE46SSxVOkwsQjpILEY6en0saj10LmxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQ7aj8uKE4sUiksKHQubGl0SHRtbFZlcnNpb25zPz89W10pLnB1c2goXCIzLjMuMVwiKTtjb25zdCBCPSh0LGkscyk9Pntjb25zdCBlPXM/LnJlbmRlckJlZm9yZT8/aTtsZXQgaD1lLl8kbGl0UGFydCQ7aWYodm9pZCAwPT09aCl7Y29uc3QgdD1zPy5yZW5kZXJCZWZvcmU/P251bGw7ZS5fJGxpdFBhcnQkPWg9bmV3IFIoaS5pbnNlcnRCZWZvcmUobCgpLHQpLHQsdm9pZCAwLHM/P3t9KX1yZXR1cm4gaC5fJEFJKHQpLGh9O2V4cG9ydHtaIGFzIF8kTEgseCBhcyBodG1sLHcgYXMgbWF0aG1sLFQgYXMgbm9DaGFuZ2UsRSBhcyBub3RoaW5nLEIgYXMgcmVuZGVyLGIgYXMgc3ZnfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1odG1sLmpzLm1hcFxuIiwiaW1wb3J0e1JlYWN0aXZlRWxlbWVudCBhcyB0fWZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtpbXBvcnR7cmVuZGVyIGFzIGUsbm9DaGFuZ2UgYXMgcn1mcm9tXCJsaXQtaHRtbFwiO2V4cG9ydCpmcm9tXCJsaXQtaHRtbFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3Qgcz1nbG9iYWxUaGlzO2NsYXNzIGkgZXh0ZW5kcyB0e2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnJlbmRlck9wdGlvbnM9e2hvc3Q6dGhpc30sdGhpcy5fJERvPXZvaWQgMH1jcmVhdGVSZW5kZXJSb290KCl7Y29uc3QgdD1zdXBlci5jcmVhdGVSZW5kZXJSb290KCk7cmV0dXJuIHRoaXMucmVuZGVyT3B0aW9ucy5yZW5kZXJCZWZvcmU/Pz10LmZpcnN0Q2hpbGQsdH11cGRhdGUodCl7Y29uc3Qgcj10aGlzLnJlbmRlcigpO3RoaXMuaGFzVXBkYXRlZHx8KHRoaXMucmVuZGVyT3B0aW9ucy5pc0Nvbm5lY3RlZD10aGlzLmlzQ29ubmVjdGVkKSxzdXBlci51cGRhdGUodCksdGhpcy5fJERvPWUocix0aGlzLnJlbmRlclJvb3QsdGhpcy5yZW5kZXJPcHRpb25zKX1jb25uZWN0ZWRDYWxsYmFjaygpe3N1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCksdGhpcy5fJERvPy5zZXRDb25uZWN0ZWQoITApfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7c3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKSx0aGlzLl8kRG8/LnNldENvbm5lY3RlZCghMSl9cmVuZGVyKCl7cmV0dXJuIHJ9fWkuXyRsaXRFbGVtZW50JD0hMCxpW1wiZmluYWxpemVkXCJdPSEwLHMubGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0Py4oe0xpdEVsZW1lbnQ6aX0pO2NvbnN0IG89cy5saXRFbGVtZW50UG9seWZpbGxTdXBwb3J0O28/Lih7TGl0RWxlbWVudDppfSk7Y29uc3Qgbj17XyRBSzoodCxlLHIpPT57dC5fJEFLKGUscil9LF8kQUw6dD0+dC5fJEFMfTsocy5saXRFbGVtZW50VmVyc2lvbnM/Pz1bXSkucHVzaChcIjQuMi4xXCIpO2V4cG9ydHtpIGFzIExpdEVsZW1lbnQsbiBhcyBfJExFfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1lbGVtZW50LmpzLm1hcFxuIiwiaW1wb3J0XCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtpbXBvcnRcImxpdC1odG1sXCI7ZXhwb3J0KmZyb21cImxpdC1lbGVtZW50L2xpdC1lbGVtZW50LmpzXCI7ZXhwb3J0KmZyb21cImxpdC1odG1sL2lzLXNlcnZlci5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9dD0+KGUsbyk9Pnt2b2lkIDAhPT1vP28uYWRkSW5pdGlhbGl6ZXIoKCgpPT57Y3VzdG9tRWxlbWVudHMuZGVmaW5lKHQsZSl9KSk6Y3VzdG9tRWxlbWVudHMuZGVmaW5lKHQsZSl9O2V4cG9ydHt0IGFzIGN1c3RvbUVsZW1lbnR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWVsZW1lbnQuanMubWFwXG4iLCJpbXBvcnR7ZGVmYXVsdENvbnZlcnRlciBhcyB0LG5vdEVxdWFsIGFzIGV9ZnJvbVwiLi4vcmVhY3RpdmUtZWxlbWVudC5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovY29uc3Qgbz17YXR0cmlidXRlOiEwLHR5cGU6U3RyaW5nLGNvbnZlcnRlcjp0LHJlZmxlY3Q6ITEsaGFzQ2hhbmdlZDplfSxyPSh0PW8sZSxyKT0+e2NvbnN0e2tpbmQ6bixtZXRhZGF0YTppfT1yO2xldCBzPWdsb2JhbFRoaXMubGl0UHJvcGVydHlNZXRhZGF0YS5nZXQoaSk7aWYodm9pZCAwPT09cyYmZ2xvYmFsVGhpcy5saXRQcm9wZXJ0eU1ldGFkYXRhLnNldChpLHM9bmV3IE1hcCksXCJzZXR0ZXJcIj09PW4mJigodD1PYmplY3QuY3JlYXRlKHQpKS53cmFwcGVkPSEwKSxzLnNldChyLm5hbWUsdCksXCJhY2Nlc3NvclwiPT09bil7Y29uc3R7bmFtZTpvfT1yO3JldHVybntzZXQocil7Y29uc3Qgbj1lLmdldC5jYWxsKHRoaXMpO2Uuc2V0LmNhbGwodGhpcyxyKSx0aGlzLnJlcXVlc3RVcGRhdGUobyxuLHQpfSxpbml0KGUpe3JldHVybiB2b2lkIDAhPT1lJiZ0aGlzLkMobyx2b2lkIDAsdCxlKSxlfX19aWYoXCJzZXR0ZXJcIj09PW4pe2NvbnN0e25hbWU6b309cjtyZXR1cm4gZnVuY3Rpb24ocil7Y29uc3Qgbj10aGlzW29dO2UuY2FsbCh0aGlzLHIpLHRoaXMucmVxdWVzdFVwZGF0ZShvLG4sdCl9fXRocm93IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGVjb3JhdG9yIGxvY2F0aW9uOiBcIituKX07ZnVuY3Rpb24gbih0KXtyZXR1cm4oZSxvKT0+XCJvYmplY3RcIj09dHlwZW9mIG8/cih0LGUsbyk6KCh0LGUsbyk9Pntjb25zdCByPWUuaGFzT3duUHJvcGVydHkobyk7cmV0dXJuIGUuY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkobyx0KSxyP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxvKTp2b2lkIDB9KSh0LGUsbyl9ZXhwb3J0e24gYXMgcHJvcGVydHksciBhcyBzdGFuZGFyZFByb3BlcnR5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnR5LmpzLm1hcFxuIiwiaW1wb3J0e3Byb3BlcnR5IGFzIHR9ZnJvbVwiLi9wcm9wZXJ0eS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gcihyKXtyZXR1cm4gdCh7Li4ucixzdGF0ZTohMCxhdHRyaWJ1dGU6ITF9KX1leHBvcnR7ciBhcyBzdGF0ZX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZS5qcy5tYXBcbiIsImV4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9jdXN0b20tZWxlbWVudC5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9wcm9wZXJ0eS5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9zdGF0ZS5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9ldmVudC1vcHRpb25zLmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LmpzXCI7ZXhwb3J0KmZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFsbC5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3luYy5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1lbGVtZW50cy5qc1wiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3NpZ25lZC1ub2Rlcy5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb3JhdG9ycy5qcy5tYXBcbiIsImltcG9ydCB7IExpdEVsZW1lbnQsIFByb3BlcnR5VmFsdWVzIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHR5cGUgeyBEYXNodmlld0NvbmZpZywgSG9tZUFzc2lzdGFudCB9IGZyb20gJ0AvdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgRGFzaHZpZXdCYXNlRWxlbWVudCBleHRlbmRzIExpdEVsZW1lbnQge1xuICBAcHJvcGVydHkoeyBhdHRyaWJ1dGU6IGZhbHNlIH0pIGhhc3MhOiBIb21lQXNzaXN0YW50O1xuICBAcHJvcGVydHkoeyB0eXBlOiBPYmplY3QgfSkgY29uZmlnITogRGFzaHZpZXdDb25maWc7XG4gIFxuICBwcm90ZWN0ZWQgc2hvdWxkVXBkYXRlKGNoYW5nZWRQcm9wczogUHJvcGVydHlWYWx1ZXMpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuaGFzcykge1xuICAgICAgY29uc29sZS53YXJuKCdEYXNodmlld0Jhc2VFbGVtZW50OiBoYXNzIG9iamVjdCBub3QgYXZhaWxhYmxlJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5zaG91bGRVcGRhdGUoY2hhbmdlZFByb3BzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBjYWxsV2ViU29ja2V0PFQ+KGNvbW1hbmQ6IHN0cmluZywgZGF0YT86IGFueSk6IFByb21pc2U8VD4ge1xuICAgIGlmICghdGhpcy5oYXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hvbWUgQXNzaXN0YW50IGNvbm5lY3Rpb24gbm90IGF2YWlsYWJsZScpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmhhc3MuY2FsbFdTPFQ+KHtcbiAgICAgICAgdHlwZTogYGRhc2h2aWV3X3YyLyR7Y29tbWFuZH1gLFxuICAgICAgICAuLi5kYXRhLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBXZWJTb2NrZXQgY2FsbCBmYWlsZWQgZm9yICR7Y29tbWFuZH06YCwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGhhbmRsZUVycm9yKGVycm9yOiBFcnJvciwgY29udGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc29sZS5lcnJvcihgW0Rhc2h2aWV3IFYyXSBFcnJvciBpbiAke2NvbnRleHR9OmAsIGVycm9yKTtcbiAgICAvLyBJbiB0aGUgZnV0dXJlLCB3ZSBjYW4gc2hvdyB1c2VyLWZyaWVuZGx5IGVycm9yIG1lc3NhZ2VzIGhlcmVcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgY29uc29sZS5sb2coJ0Rhc2h2aWV3QmFzZUVsZW1lbnQgY29ubmVjdGVkJyk7XG4gIH1cblxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIGNvbnNvbGUubG9nKCdEYXNodmlld0Jhc2VFbGVtZW50IGRpc2Nvbm5lY3RlZCcpO1xuICB9XG59IiwiaW1wb3J0IHR5cGUgeyBIb21lQXNzaXN0YW50LCBIb21lSW5mbyB9IGZyb20gJ0AvdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgV2ViU29ja2V0Q29ubmVjdGlvbiB7XG4gIHByaXZhdGUgaGFzczogSG9tZUFzc2lzdGFudDtcblxuICBjb25zdHJ1Y3RvcihoYXNzOiBIb21lQXNzaXN0YW50KSB7XG4gICAgdGhpcy5oYXNzID0gaGFzcztcbiAgfVxuXG4gIGFzeW5jIGdldEhvbWVJbmZvKCk6IFByb21pc2U8SG9tZUluZm8+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5oYXNzLmNhbGxXUzxIb21lSW5mbz4oe1xuICAgICAgICB0eXBlOiAnZGFzaHZpZXdfdjIvZ2V0X2hvbWVfaW5mbycsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgaG9tZSBpbmZvOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN1YnNjcmliZVRvU3RhdGVDaGFuZ2VzKFxuICAgIGNhbGxiYWNrOiAoZXZlbnQ6IGFueSkgPT4gdm9pZCxcbiAgICBlbnRpdHlJZHM/OiBzdHJpbmdbXVxuICApOiBQcm9taXNlPCgpID0+IHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuaGFzcy5jb25uZWN0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYlNvY2tldCBjb25uZWN0aW9uIG5vdCBhdmFpbGFibGUnKTtcbiAgICB9XG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IGF3YWl0IHRoaXMuaGFzcy5jb25uZWN0aW9uLnN1YnNjcmliZUV2ZW50cyhcbiAgICAgIChldmVudDogYW55KSA9PiB7XG4gICAgICAgIGlmICghZW50aXR5SWRzIHx8IGVudGl0eUlkcy5pbmNsdWRlcyhldmVudC5kYXRhLmVudGl0eV9pZCkpIHtcbiAgICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnc3RhdGVfY2hhbmdlZCdcbiAgICApO1xuXG4gICAgcmV0dXJuIHVuc3Vic2NyaWJlIGFzICgpID0+IHZvaWQ7XG4gIH1cblxuICBpc0Nvbm5lY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLmhhc3MgJiYgISF0aGlzLmhhc3MuY29ubmVjdGlvbjtcbiAgfVxufSIsImV4cG9ydCBlbnVtIExvZ0xldmVsIHtcbiAgREVCVUcgPSAwLFxuICBJTkZPID0gMSxcbiAgV0FSTiA9IDIsXG4gIEVSUk9SID0gMyxcbn1cblxuZXhwb3J0IGNsYXNzIExvZ2dlciB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBMb2dnZXI7XG4gIHByaXZhdGUgbGV2ZWw6IExvZ0xldmVsID0gTG9nTGV2ZWwuSU5GTztcbiAgcHJpdmF0ZSBwcmVmaXggPSAnW0Rhc2h2aWV3IFYyXSc7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBpbiBkZXZlbG9wbWVudCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICB0aGlzLmxldmVsID0gTG9nTGV2ZWwuREVCVUc7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCk6IExvZ2dlciB7XG4gICAgaWYgKCFMb2dnZXIuaW5zdGFuY2UpIHtcbiAgICAgIExvZ2dlci5pbnN0YW5jZSA9IG5ldyBMb2dnZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIExvZ2dlci5pbnN0YW5jZTtcbiAgfVxuXG4gIHNldExldmVsKGxldmVsOiBMb2dMZXZlbCk6IHZvaWQge1xuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgfVxuXG4gIGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGV2ZWwgPD0gTG9nTGV2ZWwuREVCVUcpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcodGhpcy5wcmVmaXgsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIGluZm8oLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSBMb2dMZXZlbC5JTkZPKSB7XG4gICAgICBjb25zb2xlLmluZm8odGhpcy5wcmVmaXgsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHdhcm4oLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sZXZlbCA8PSBMb2dMZXZlbC5XQVJOKSB7XG4gICAgICBjb25zb2xlLndhcm4odGhpcy5wcmVmaXgsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubGV2ZWwgPD0gTG9nTGV2ZWwuRVJST1IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IodGhpcy5wcmVmaXgsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbG9nZ2VyID0gTG9nZ2VyLmdldEluc3RhbmNlKCk7IiwiLyoqXG4gKiBTdGF0ZSBtYW5hZ2VtZW50IGZvciBEYXNodmlldyBWMiBkYXNoYm9hcmQuXG4gKiBIYW5kbGVzIGVmZmljaWVudCBzdGF0ZSB1cGRhdGVzIHdpdGggZGlmZmluZyBhbmQgYmF0Y2hpbmcuXG4gKi9cblxuaW1wb3J0IHsgSG9tZUFzc2lzdGFudCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ1N0YXRlTWFuYWdlcicpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlVXBkYXRlIHtcbiAgZW50aXR5SWQ6IHN0cmluZztcbiAgc3RhdGU6IGFueTtcbiAgdGltZXN0YW1wOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGVEaWZmIHtcbiAgdHlwZTogJ2FkZGVkJyB8ICdjaGFuZ2VkJyB8ICdyZW1vdmVkJztcbiAgZW50aXR5SWQ6IHN0cmluZztcbiAgb2xkU3RhdGU/OiBhbnk7XG4gIG5ld1N0YXRlPzogYW55O1xuICBjaGFuZ2VkUHJvcHM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZU1hbmFnZXJDb25maWcge1xuICBiYXRjaEludGVydmFsPzogbnVtYmVyOyAgLy8gTWlsbGlzZWNvbmRzIHRvIGJhdGNoIHVwZGF0ZXMgKGRlZmF1bHQ6IDE2bXMgZm9yIDYwZnBzKVxuICBtYXhCYXRjaFNpemU/OiBudW1iZXI7ICAgLy8gTWF4aW11bSB1cGRhdGVzIHBlciBiYXRjaCAoZGVmYXVsdDogMTAwKVxufVxuXG5leHBvcnQgY2xhc3MgU3RhdGVNYW5hZ2VyIHtcbiAgcHJpdmF0ZSB1cGRhdGVRdWV1ZTogU3RhdGVVcGRhdGVbXSA9IFtdO1xuICBwcml2YXRlIHJhZklkOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBsYXN0U3RhdGU6IE1hcDxzdHJpbmcsIGFueT4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgbGlzdGVuZXJzOiBNYXA8c3RyaW5nLCBTZXQ8KGRpZmY6IFN0YXRlRGlmZikgPT4gdm9pZD4+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIGdsb2JhbExpc3RlbmVyczogU2V0PChkaWZmczogU3RhdGVEaWZmW10pID0+IHZvaWQ+ID0gbmV3IFNldCgpO1xuICBwcml2YXRlIGNvbmZpZzogUmVxdWlyZWQ8U3RhdGVNYW5hZ2VyQ29uZmlnPjtcblxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFN0YXRlTWFuYWdlckNvbmZpZyA9IHt9KSB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICBiYXRjaEludGVydmFsOiBjb25maWcuYmF0Y2hJbnRlcnZhbCA/PyAxNiwgIC8vIDYwZnBzXG4gICAgICBtYXhCYXRjaFNpemU6IGNvbmZpZy5tYXhCYXRjaFNpemUgPz8gMTAwLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29tcHV0ZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIG9sZCBhbmQgbmV3IHN0YXRlLlxuICAgKi9cbiAgY29tcHV0ZVN0YXRlRGlmZihlbnRpdHlJZDogc3RyaW5nLCBuZXdTdGF0ZTogYW55KTogU3RhdGVEaWZmIHwgbnVsbCB7XG4gICAgY29uc3Qgb2xkU3RhdGUgPSB0aGlzLmxhc3RTdGF0ZS5nZXQoZW50aXR5SWQpO1xuICAgIFxuICAgIGlmICghb2xkU3RhdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdhZGRlZCcsXG4gICAgICAgIGVudGl0eUlkLFxuICAgICAgICBuZXdTdGF0ZSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gUXVpY2sgZXF1YWxpdHkgY2hlY2tcbiAgICBpZiAob2xkU3RhdGUuc3RhdGUgPT09IG5ld1N0YXRlLnN0YXRlICYmIFxuICAgICAgICBKU09OLnN0cmluZ2lmeShvbGRTdGF0ZS5hdHRyaWJ1dGVzKSA9PT0gSlNPTi5zdHJpbmdpZnkobmV3U3RhdGUuYXR0cmlidXRlcykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIEZpbmQgY2hhbmdlZCBwcm9wZXJ0aWVzXG4gICAgY29uc3QgY2hhbmdlZFByb3BzID0gdGhpcy5nZXRDaGFuZ2VkUHJvcHMob2xkU3RhdGUsIG5ld1N0YXRlKTtcbiAgICBcbiAgICBpZiAoY2hhbmdlZFByb3BzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdjaGFuZ2VkJyxcbiAgICAgIGVudGl0eUlkLFxuICAgICAgb2xkU3RhdGUsXG4gICAgICBuZXdTdGF0ZSxcbiAgICAgIGNoYW5nZWRQcm9wcyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBsaXN0IG9mIGNoYW5nZWQgcHJvcGVydGllcyBiZXR3ZWVuIHN0YXRlcy5cbiAgICovXG4gIHByaXZhdGUgZ2V0Q2hhbmdlZFByb3BzKG9sZFN0YXRlOiBhbnksIG5ld1N0YXRlOiBhbnkpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgY2hhbmdlZDogc3RyaW5nW10gPSBbXTtcblxuICAgIC8vIENoZWNrIG1haW4gc3RhdGVcbiAgICBpZiAob2xkU3RhdGUuc3RhdGUgIT09IG5ld1N0YXRlLnN0YXRlKSB7XG4gICAgICBjaGFuZ2VkLnB1c2goJ3N0YXRlJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgYXR0cmlidXRlc1xuICAgIGNvbnN0IG9sZEF0dHJzID0gb2xkU3RhdGUuYXR0cmlidXRlcyB8fCB7fTtcbiAgICBjb25zdCBuZXdBdHRycyA9IG5ld1N0YXRlLmF0dHJpYnV0ZXMgfHwge307XG4gICAgY29uc3QgYWxsS2V5cyA9IG5ldyBTZXQoWy4uLk9iamVjdC5rZXlzKG9sZEF0dHJzKSwgLi4uT2JqZWN0LmtleXMobmV3QXR0cnMpXSk7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBhbGxLZXlzKSB7XG4gICAgICBpZiAoSlNPTi5zdHJpbmdpZnkob2xkQXR0cnNba2V5XSkgIT09IEpTT04uc3RyaW5naWZ5KG5ld0F0dHJzW2tleV0pKSB7XG4gICAgICAgIGNoYW5nZWQucHVzaChgYXR0cmlidXRlcy4ke2tleX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBsYXN0X2NoYW5nZWQgYW5kIGxhc3RfdXBkYXRlZFxuICAgIGlmIChvbGRTdGF0ZS5sYXN0X2NoYW5nZWQgIT09IG5ld1N0YXRlLmxhc3RfY2hhbmdlZCkge1xuICAgICAgY2hhbmdlZC5wdXNoKCdsYXN0X2NoYW5nZWQnKTtcbiAgICB9XG4gICAgaWYgKG9sZFN0YXRlLmxhc3RfdXBkYXRlZCAhPT0gbmV3U3RhdGUubGFzdF91cGRhdGVkKSB7XG4gICAgICBjaGFuZ2VkLnB1c2goJ2xhc3RfdXBkYXRlZCcpO1xuICAgIH1cblxuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhdGNoIHN0YXRlIHVwZGF0ZXMgZm9yIGVmZmljaWVudCByZW5kZXJpbmcuXG4gICAqL1xuICBiYXRjaFVwZGF0ZSh1cGRhdGVzOiBTdGF0ZVVwZGF0ZVtdKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVRdWV1ZS5wdXNoKC4uLnVwZGF0ZXMpO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSB0b28gbWFueSB1cGRhdGVzLCBwcm9jZXNzIGltbWVkaWF0ZWx5XG4gICAgaWYgKHRoaXMudXBkYXRlUXVldWUubGVuZ3RoID49IHRoaXMuY29uZmlnLm1heEJhdGNoU2l6ZSkge1xuICAgICAgdGhpcy5wcm9jZXNzQmF0Y2goKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIHNjaGVkdWxlIHByb2Nlc3NpbmdcbiAgICBpZiAoIXRoaXMucmFmSWQpIHtcbiAgICAgIHRoaXMucmFmSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB0aGlzLnByb2Nlc3NCYXRjaCgpO1xuICAgICAgICB0aGlzLnJhZklkID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGEgc2luZ2xlIHN0YXRlIHVwZGF0ZSBpbW1lZGlhdGVseS5cbiAgICovXG4gIHVwZGF0ZVN0YXRlKGVudGl0eUlkOiBzdHJpbmcsIG5ld1N0YXRlOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLmJhdGNoVXBkYXRlKFt7XG4gICAgICBlbnRpdHlJZCxcbiAgICAgIHN0YXRlOiBuZXdTdGF0ZSxcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICB9XSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBhbGwgYmF0Y2hlZCB1cGRhdGVzLlxuICAgKi9cbiAgcHJpdmF0ZSBwcm9jZXNzQmF0Y2goKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudXBkYXRlUXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgdXBkYXRlTWFwID0gbmV3IE1hcDxzdHJpbmcsIFN0YXRlVXBkYXRlPigpO1xuICAgIGNvbnN0IGRpZmZzOiBTdGF0ZURpZmZbXSA9IFtdO1xuXG4gICAgLy8gRGVkdXBsaWNhdGUgdXBkYXRlcyAoa2VlcCBsYXRlc3QgZm9yIGVhY2ggZW50aXR5KVxuICAgIGZvciAoY29uc3QgdXBkYXRlIG9mIHRoaXMudXBkYXRlUXVldWUpIHtcbiAgICAgIHVwZGF0ZU1hcC5zZXQodXBkYXRlLmVudGl0eUlkLCB1cGRhdGUpO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgZWFjaCB1bmlxdWUgdXBkYXRlXG4gICAgZm9yIChjb25zdCBbZW50aXR5SWQsIHVwZGF0ZV0gb2YgdXBkYXRlTWFwKSB7XG4gICAgICBjb25zdCBkaWZmID0gdGhpcy5jb21wdXRlU3RhdGVEaWZmKGVudGl0eUlkLCB1cGRhdGUuc3RhdGUpO1xuICAgICAgXG4gICAgICBpZiAoZGlmZikge1xuICAgICAgICBkaWZmcy5wdXNoKGRpZmYpO1xuICAgICAgICB0aGlzLmxhc3RTdGF0ZS5zZXQoZW50aXR5SWQsIHVwZGF0ZS5zdGF0ZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBOb3RpZnkgZW50aXR5LXNwZWNpZmljIGxpc3RlbmVyc1xuICAgICAgICBjb25zdCBlbnRpdHlMaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycy5nZXQoZW50aXR5SWQpO1xuICAgICAgICBpZiAoZW50aXR5TGlzdGVuZXJzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBlbnRpdHlMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyKGRpZmYpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBFcnJvciBpbiBlbnRpdHkgbGlzdGVuZXIgZm9yICR7ZW50aXR5SWR9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBOb3RpZnkgZ2xvYmFsIGxpc3RlbmVyc1xuICAgIGlmIChkaWZmcy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuZ2xvYmFsTGlzdGVuZXJzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGlzdGVuZXIoZGlmZnMpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgaW4gZ2xvYmFsIHN0YXRlIGxpc3RlbmVyOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENsZWFyIHF1ZXVlXG4gICAgdGhpcy51cGRhdGVRdWV1ZSA9IFtdO1xuXG4gICAgLy8gTG9nIHBlcmZvcm1hbmNlXG4gICAgY29uc3QgcHJvY2Vzc2luZ1RpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICBpZiAocHJvY2Vzc2luZ1RpbWUgPiB0aGlzLmNvbmZpZy5iYXRjaEludGVydmFsKSB7XG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgYEJhdGNoIHByb2Nlc3NpbmcgdG9vayAke3Byb2Nlc3NpbmdUaW1lLnRvRml4ZWQoMil9bXMgZm9yICR7dXBkYXRlTWFwLnNpemV9IHVwZGF0ZXNgXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gc3RhdGUgY2hhbmdlcyBmb3IgYSBzcGVjaWZpYyBlbnRpdHkuXG4gICAqL1xuICBzdWJzY3JpYmVUb0VudGl0eShcbiAgICBlbnRpdHlJZDogc3RyaW5nLCBcbiAgICBjYWxsYmFjazogKGRpZmY6IFN0YXRlRGlmZikgPT4gdm9pZFxuICApOiAoKSA9PiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzLmhhcyhlbnRpdHlJZCkpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLnNldChlbnRpdHlJZCwgbmV3IFNldCgpKTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5saXN0ZW5lcnMuZ2V0KGVudGl0eUlkKSEuYWRkKGNhbGxiYWNrKTtcblxuICAgIC8vIFJldHVybiB1bnN1YnNjcmliZSBmdW5jdGlvblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycy5nZXQoZW50aXR5SWQpO1xuICAgICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgICBsaXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKGxpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGVudGl0eUlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIGFsbCBzdGF0ZSBjaGFuZ2VzLlxuICAgKi9cbiAgc3Vic2NyaWJlVG9BbGwoY2FsbGJhY2s6IChkaWZmczogU3RhdGVEaWZmW10pID0+IHZvaWQpOiAoKSA9PiB2b2lkIHtcbiAgICB0aGlzLmdsb2JhbExpc3RlbmVycy5hZGQoY2FsbGJhY2spO1xuXG4gICAgLy8gUmV0dXJuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMuZ2xvYmFsTGlzdGVuZXJzLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBzdGF0ZSBmb3IgYW4gZW50aXR5LlxuICAgKi9cbiAgZ2V0U3RhdGUoZW50aXR5SWQ6IHN0cmluZyk6IGFueSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubGFzdFN0YXRlLmdldChlbnRpdHlJZCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBjdXJyZW50IHN0YXRlcy5cbiAgICovXG4gIGdldEFsbFN0YXRlcygpOiBNYXA8c3RyaW5nLCBhbnk+IHtcbiAgICByZXR1cm4gbmV3IE1hcCh0aGlzLmxhc3RTdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBzdGF0ZSBmcm9tIEhvbWUgQXNzaXN0YW50LlxuICAgKi9cbiAgaW5pdGlhbGl6ZUZyb21IYXNzKGhhc3M6IEhvbWVBc3Npc3RhbnQpOiB2b2lkIHtcbiAgICBjb25zdCB1cGRhdGVzOiBTdGF0ZVVwZGF0ZVtdID0gW107XG4gICAgXG4gICAgZm9yIChjb25zdCBbZW50aXR5SWQsIHN0YXRlXSBvZiBPYmplY3QuZW50cmllcyhoYXNzLnN0YXRlcykpIHtcbiAgICAgIHVwZGF0ZXMucHVzaCh7XG4gICAgICAgIGVudGl0eUlkLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5iYXRjaFVwZGF0ZSh1cGRhdGVzKTtcbiAgICBsb2dnZXIuaW5mbyhgSW5pdGlhbGl6ZWQgc3RhdGUgZm9yICR7dXBkYXRlcy5sZW5ndGh9IGVudGl0aWVzYCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIHN0YXRlIGFuZCBsaXN0ZW5lcnMuXG4gICAqL1xuICBjbGVhcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yYWZJZCkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5yYWZJZCk7XG4gICAgICB0aGlzLnJhZklkID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVF1ZXVlID0gW107XG4gICAgdGhpcy5sYXN0U3RhdGUuY2xlYXIoKTtcbiAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgIHRoaXMuZ2xvYmFsTGlzdGVuZXJzLmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHN0YXRpc3RpY3MgYWJvdXQgdGhlIHN0YXRlIG1hbmFnZXIuXG4gICAqL1xuICBnZXRTdGF0cygpOiB7XG4gICAgZW50aXR5Q291bnQ6IG51bWJlcjtcbiAgICBsaXN0ZW5lckNvdW50OiBudW1iZXI7XG4gICAgcXVldWVTaXplOiBudW1iZXI7XG4gIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBlbnRpdHlDb3VudDogdGhpcy5sYXN0U3RhdGUuc2l6ZSxcbiAgICAgIGxpc3RlbmVyQ291bnQ6IHRoaXMubGlzdGVuZXJzLnNpemUgKyB0aGlzLmdsb2JhbExpc3RlbmVycy5zaXplLFxuICAgICAgcXVldWVTaXplOiB0aGlzLnVwZGF0ZVF1ZXVlLmxlbmd0aCxcbiAgICB9O1xuICB9XG59IiwiLyoqXG4gKiBTdWJzY3JpcHRpb24gbWFuYWdlciBmb3Igc21hcnQgZW50aXR5IHN1YnNjcmlwdGlvbnMuXG4gKiBPbmx5IHN1YnNjcmliZXMgdG8gdmlzaWJsZSBlbnRpdGllcyB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZS5cbiAqL1xuXG5pbXBvcnQgeyBXZWJTb2NrZXRDb25uZWN0aW9uIH0gZnJvbSAnLi93ZWJzb2NrZXQtY29ubmVjdGlvbic7XG5pbXBvcnQgeyBTdGF0ZU1hbmFnZXIgfSBmcm9tICcuL3N0YXRlLW1hbmFnZXInO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMvbG9nZ2VyJztcbmltcG9ydCB0eXBlIHsgSG9tZUFzc2lzdGFudCB9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignU3Vic2NyaXB0aW9uTWFuYWdlcicpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvbkNvbmZpZyB7XG4gIGRlYm91bmNlRGVsYXk/OiBudW1iZXI7ICAvLyBNaWxsaXNlY29uZHMgdG8gZGVib3VuY2UgdmlzaWJpbGl0eSBjaGFuZ2VzXG4gIG1heFN1YnNjcmlwdGlvbnM/OiBudW1iZXI7ICAvLyBNYXhpbXVtIGNvbmN1cnJlbnQgc3Vic2NyaXB0aW9uc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvblJlc3VsdCB7XG4gIHN1YnNjcmliZWQ6IHN0cmluZ1tdO1xuICB1bnN1YnNjcmliZWQ6IHN0cmluZ1tdO1xuICBmYWlsZWQ6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY2xhc3MgU3Vic2NyaXB0aW9uTWFuYWdlciB7XG4gIHByaXZhdGUgd2Vic29ja2V0OiBXZWJTb2NrZXRDb25uZWN0aW9uO1xuICBwcml2YXRlIHN0YXRlTWFuYWdlcjogU3RhdGVNYW5hZ2VyO1xuICBwcml2YXRlIHZpc2libGVFbnRpdGllczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gIHByaXZhdGUgc3Vic2NyaWJlZEVudGl0aWVzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgcHJpdmF0ZSBkZWJvdW5jZVRpbWVyOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBjb25maWc6IFJlcXVpcmVkPFN1YnNjcmlwdGlvbkNvbmZpZz47XG4gIHByaXZhdGUgdW5zdWJzY3JpYmVIYW5kbGVyOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICB3ZWJzb2NrZXQ6IFdlYlNvY2tldENvbm5lY3Rpb24sXG4gICAgc3RhdGVNYW5hZ2VyOiBTdGF0ZU1hbmFnZXIsXG4gICAgY29uZmlnOiBTdWJzY3JpcHRpb25Db25maWcgPSB7fVxuICApIHtcbiAgICB0aGlzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcbiAgICB0aGlzLnN0YXRlTWFuYWdlciA9IHN0YXRlTWFuYWdlcjtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIGRlYm91bmNlRGVsYXk6IGNvbmZpZy5kZWJvdW5jZURlbGF5ID8/IDMwMCxcbiAgICAgIG1heFN1YnNjcmlwdGlvbnM6IGNvbmZpZy5tYXhTdWJzY3JpcHRpb25zID8/IDUwMCxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgbGlzdCBvZiB2aXNpYmxlIGVudGl0aWVzLlxuICAgKiBUaGlzIHdpbGwgdHJpZ2dlciBzdWJzY3JpcHRpb24gdXBkYXRlcyBhZnRlciBkZWJvdW5jaW5nLlxuICAgKi9cbiAgdXBkYXRlVmlzaWJsZUVudGl0aWVzKGVudGl0aWVzOiBzdHJpbmdbXSk6IHZvaWQge1xuICAgIGNvbnN0IG5ld1Zpc2libGUgPSBuZXcgU2V0KGVudGl0aWVzKTtcbiAgICBcbiAgICAvLyBDaGVjayBpZiB0aGVyZSdzIGFjdHVhbGx5IGEgY2hhbmdlXG4gICAgY29uc3QgaGFzQ2hhbmdlcyA9IGVudGl0aWVzLmxlbmd0aCAhPT0gdGhpcy52aXNpYmxlRW50aXRpZXMuc2l6ZSB8fFxuICAgICAgZW50aXRpZXMuc29tZShpZCA9PiAhdGhpcy52aXNpYmxlRW50aXRpZXMuaGFzKGlkKSk7XG4gICAgXG4gICAgaWYgKCFoYXNDaGFuZ2VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHZpc2libGUgc2V0XG4gICAgdGhpcy52aXNpYmxlRW50aXRpZXMgPSBuZXdWaXNpYmxlO1xuXG4gICAgLy8gRGVib3VuY2UgdGhlIHN5bmMgb3BlcmF0aW9uXG4gICAgaWYgKHRoaXMuZGVib3VuY2VUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVib3VuY2VUaW1lcik7XG4gICAgfVxuXG4gICAgdGhpcy5kZWJvdW5jZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zeW5jU3Vic2NyaXB0aW9ucygpO1xuICAgICAgdGhpcy5kZWJvdW5jZVRpbWVyID0gbnVsbDtcbiAgICB9LCB0aGlzLmNvbmZpZy5kZWJvdW5jZURlbGF5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5jIHN1YnNjcmlwdGlvbnMgd2l0aCB0aGUgYmFja2VuZC5cbiAgICogU3Vic2NyaWJlcyB0byBuZXdseSB2aXNpYmxlIGVudGl0aWVzIGFuZCB1bnN1YnNjcmliZXMgZnJvbSBoaWRkZW4gb25lcy5cbiAgICovXG4gIGFzeW5jIHN5bmNTdWJzY3JpcHRpb25zKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy53ZWJzb2NrZXQuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgbG9nZ2VyLndhcm4oJ1dlYlNvY2tldCBub3QgY29ubmVjdGVkLCBza2lwcGluZyBzdWJzY3JpcHRpb24gc3luYycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBMaW1pdCBzdWJzY3JpcHRpb25zIGlmIG5lZWRlZFxuICAgICAgY29uc3QgdGFyZ2V0RW50aXRpZXMgPSBBcnJheS5mcm9tKHRoaXMudmlzaWJsZUVudGl0aWVzKS5zbGljZSgwLCB0aGlzLmNvbmZpZy5tYXhTdWJzY3JpcHRpb25zKTtcbiAgICAgIFxuICAgICAgLy8gQ2FsbCBiYWNrZW5kIHRvIHVwZGF0ZSBzdWJzY3JpcHRpb25zXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNhbGxVcGRhdGVTdWJzY3JpcHRpb25zKHRhcmdldEVudGl0aWVzKTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIGxvY2FsIHRyYWNraW5nXG4gICAgICB0aGlzLnN1YnNjcmliZWRFbnRpdGllcyA9IG5ldyBTZXQoW1xuICAgICAgICAuLi50aGlzLnN1YnNjcmliZWRFbnRpdGllcyxcbiAgICAgICAgLi4ucmVzdWx0LnN1YnNjcmliZWRcbiAgICAgIF0pO1xuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IGVudGl0eUlkIG9mIHJlc3VsdC51bnN1YnNjcmliZWQpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVkRW50aXRpZXMuZGVsZXRlKGVudGl0eUlkKTtcbiAgICAgIH1cblxuICAgICAgbG9nZ2VyLmluZm8oXG4gICAgICAgIGBTdWJzY3JpcHRpb24gc3luYyBjb21wbGV0ZTogJHtyZXN1bHQuc3Vic2NyaWJlZC5sZW5ndGh9IGFkZGVkLCBgICtcbiAgICAgICAgYCR7cmVzdWx0LnVuc3Vic2NyaWJlZC5sZW5ndGh9IHJlbW92ZWQsICR7dGhpcy5zdWJzY3JpYmVkRW50aXRpZXMuc2l6ZX0gdG90YWxgXG4gICAgICApO1xuXG4gICAgICAvLyBMb2cgYW55IGZhaWx1cmVzXG4gICAgICBpZiAocmVzdWx0LmZhaWxlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKGBGYWlsZWQgdG8gc3Vic2NyaWJlIHRvICR7cmVzdWx0LmZhaWxlZC5sZW5ndGh9IGVudGl0aWVzOmAsIHJlc3VsdC5mYWlsZWQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBzeW5jIHN1YnNjcmlwdGlvbnM6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHRoZSBiYWNrZW5kIFdlYlNvY2tldCBjb21tYW5kIHRvIHVwZGF0ZSBzdWJzY3JpcHRpb25zLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBjYWxsVXBkYXRlU3Vic2NyaXB0aW9ucyhlbnRpdGllczogc3RyaW5nW10pOiBQcm9taXNlPFN1YnNjcmlwdGlvblJlc3VsdD4ge1xuICAgIGNvbnN0IGhhc3MgPSAodGhpcy53ZWJzb2NrZXQgYXMgYW55KS5oYXNzIGFzIEhvbWVBc3Npc3RhbnQ7XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBoYXNzLmNhbGxXUzxTdWJzY3JpcHRpb25SZXN1bHQ+KHtcbiAgICAgIHR5cGU6ICdkYXNodmlld192Mi91cGRhdGVfc3Vic2NyaXB0aW9ucycsXG4gICAgICBlbnRpdGllczogZW50aXRpZXMsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHNwZWNpZmljIGVudGl0aWVzIGltbWVkaWF0ZWx5LlxuICAgKi9cbiAgYXN5bmMgc3Vic2NyaWJlVG9FbnRpdGllcyhlbnRpdGllczogc3RyaW5nW10pOiBQcm9taXNlPFN1YnNjcmlwdGlvblJlc3VsdD4ge1xuICAgIGNvbnN0IGhhc3MgPSAodGhpcy53ZWJzb2NrZXQgYXMgYW55KS5oYXNzIGFzIEhvbWVBc3Npc3RhbnQ7XG4gICAgXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBoYXNzLmNhbGxXUzx7XG4gICAgICBzdWNjZXNzOiBib29sZWFuO1xuICAgICAgc3Vic2NyaWJlZDogc3RyaW5nW107XG4gICAgICBmYWlsZWQ6IHN0cmluZ1tdO1xuICAgIH0+KHtcbiAgICAgIHR5cGU6ICdkYXNodmlld192Mi9zdWJzY3JpYmVfdmlzaWJsZV9lbnRpdGllcycsXG4gICAgICBlbnRpdGllczogZW50aXRpZXMsXG4gICAgfSk7XG5cbiAgICAvLyBVcGRhdGUgbG9jYWwgdHJhY2tpbmdcbiAgICBmb3IgKGNvbnN0IGVudGl0eUlkIG9mIHJlc3BvbnNlLnN1YnNjcmliZWQpIHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlZEVudGl0aWVzLmFkZChlbnRpdHlJZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1YnNjcmliZWQ6IHJlc3BvbnNlLnN1YnNjcmliZWQsXG4gICAgICB1bnN1YnNjcmliZWQ6IFtdLFxuICAgICAgZmFpbGVkOiByZXNwb25zZS5mYWlsZWQgfHwgW10sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHNwZWNpZmljIGVudGl0aWVzIGltbWVkaWF0ZWx5LlxuICAgKi9cbiAgYXN5bmMgdW5zdWJzY3JpYmVGcm9tRW50aXRpZXMoZW50aXRpZXM6IHN0cmluZ1tdKTogUHJvbWlzZTxTdWJzY3JpcHRpb25SZXN1bHQ+IHtcbiAgICBjb25zdCBoYXNzID0gKHRoaXMud2Vic29ja2V0IGFzIGFueSkuaGFzcyBhcyBIb21lQXNzaXN0YW50O1xuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgaGFzcy5jYWxsV1M8e1xuICAgICAgc3VjY2VzczogYm9vbGVhbjtcbiAgICAgIHVuc3Vic2NyaWJlZDogc3RyaW5nW107XG4gICAgICBmYWlsZWQ6IHN0cmluZ1tdO1xuICAgIH0+KHtcbiAgICAgIHR5cGU6ICdkYXNodmlld192Mi91bnN1YnNjcmliZV9oaWRkZW5fZW50aXRpZXMnLFxuICAgICAgZW50aXRpZXM6IGVudGl0aWVzLFxuICAgIH0pO1xuXG4gICAgLy8gVXBkYXRlIGxvY2FsIHRyYWNraW5nXG4gICAgZm9yIChjb25zdCBlbnRpdHlJZCBvZiByZXNwb25zZS51bnN1YnNjcmliZWQpIHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlZEVudGl0aWVzLmRlbGV0ZShlbnRpdHlJZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1YnNjcmliZWQ6IFtdLFxuICAgICAgdW5zdWJzY3JpYmVkOiByZXNwb25zZS51bnN1YnNjcmliZWQsXG4gICAgICBmYWlsZWQ6IHJlc3BvbnNlLmZhaWxlZCB8fCBbXSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGxpc3RlbmluZyBmb3Igc3RhdGUgY2hhbmdlcy5cbiAgICogVGhpcyBzZXRzIHVwIHRoZSBXZWJTb2NrZXQgZXZlbnQgbGlzdGVuZXIgZm9yIHN0YXRlIHVwZGF0ZXMuXG4gICAqL1xuICBhc3luYyBzdGFydExpc3RlbmluZygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZUhhbmRsZXIpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdBbHJlYWR5IGxpc3RlbmluZyBmb3Igc3RhdGUgY2hhbmdlcycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBTZXQgdXAgV2ViU29ja2V0IGV2ZW50IGxpc3RlbmVyXG4gICAgICB0aGlzLnVuc3Vic2NyaWJlSGFuZGxlciA9IGF3YWl0IHRoaXMud2Vic29ja2V0LnN1YnNjcmliZVRvU3RhdGVDaGFuZ2VzKFxuICAgICAgICAoZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnQuZXZlbnRfdHlwZSA9PT0gJ3N0YXRlX2NoYW5nZWQnICYmIGV2ZW50LmRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZW50aXR5X2lkLCBuZXdfc3RhdGUgfSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE9ubHkgcHJvY2VzcyBpZiB3ZSdyZSBzdWJzY3JpYmVkIHRvIHRoaXMgZW50aXR5XG4gICAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpYmVkRW50aXRpZXMuaGFzKGVudGl0eV9pZCkgJiYgbmV3X3N0YXRlKSB7XG4gICAgICAgICAgICAgIHRoaXMuc3RhdGVNYW5hZ2VyLnVwZGF0ZVN0YXRlKGVudGl0eV9pZCwgbmV3X3N0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGxvZ2dlci5pbmZvKCdTdGFydGVkIGxpc3RlbmluZyBmb3Igc3RhdGUgY2hhbmdlcycpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBzdGFydCBsaXN0ZW5pbmc6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3AgbGlzdGVuaW5nIGZvciBzdGF0ZSBjaGFuZ2VzLlxuICAgKi9cbiAgc3RvcExpc3RlbmluZygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmVIYW5kbGVyKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlSGFuZGxlciA9IG51bGw7XG4gICAgICBsb2dnZXIuaW5mbygnU3RvcHBlZCBsaXN0ZW5pbmcgZm9yIHN0YXRlIGNoYW5nZXMnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IGxpc3Qgb2Ygc3Vic2NyaWJlZCBlbnRpdGllcy5cbiAgICovXG4gIGdldFN1YnNjcmliZWRFbnRpdGllcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5zdWJzY3JpYmVkRW50aXRpZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBsaXN0IG9mIHZpc2libGUgZW50aXRpZXMuXG4gICAqL1xuICBnZXRWaXNpYmxlRW50aXRpZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudmlzaWJsZUVudGl0aWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBlbnRpdHkgaXMgY3VycmVudGx5IHN1YnNjcmliZWQuXG4gICAqL1xuICBpc1N1YnNjcmliZWQoZW50aXR5SWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN1YnNjcmliZWRFbnRpdGllcy5oYXMoZW50aXR5SWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdWJzY3JpcHRpb24gc3RhdGlzdGljcy5cbiAgICovXG4gIGdldFN0YXRzKCk6IHtcbiAgICB2aXNpYmxlQ291bnQ6IG51bWJlcjtcbiAgICBzdWJzY3JpYmVkQ291bnQ6IG51bWJlcjtcbiAgICBtYXhTdWJzY3JpcHRpb25zOiBudW1iZXI7XG4gIH0ge1xuICAgIHJldHVybiB7XG4gICAgICB2aXNpYmxlQ291bnQ6IHRoaXMudmlzaWJsZUVudGl0aWVzLnNpemUsXG4gICAgICBzdWJzY3JpYmVkQ291bnQ6IHRoaXMuc3Vic2NyaWJlZEVudGl0aWVzLnNpemUsXG4gICAgICBtYXhTdWJzY3JpcHRpb25zOiB0aGlzLmNvbmZpZy5tYXhTdWJzY3JpcHRpb25zLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIHN1YnNjcmlwdGlvbnMgYW5kIHN0b3AgbGlzdGVuaW5nLlxuICAgKi9cbiAgYXN5bmMgY2xlYXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gU3RvcCBsaXN0ZW5pbmdcbiAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcblxuICAgIC8vIENsZWFyIGRlYm91bmNlIHRpbWVyXG4gICAgaWYgKHRoaXMuZGVib3VuY2VUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVib3VuY2VUaW1lcik7XG4gICAgICB0aGlzLmRlYm91bmNlVGltZXIgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFVuc3Vic2NyaWJlIGZyb20gYWxsIGVudGl0aWVzXG4gICAgaWYgKHRoaXMuc3Vic2NyaWJlZEVudGl0aWVzLnNpemUgPiAwKSB7XG4gICAgICBhd2FpdCB0aGlzLnVuc3Vic2NyaWJlRnJvbUVudGl0aWVzKEFycmF5LmZyb20odGhpcy5zdWJzY3JpYmVkRW50aXRpZXMpKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhciBzZXRzXG4gICAgdGhpcy52aXNpYmxlRW50aXRpZXMuY2xlYXIoKTtcbiAgICB0aGlzLnN1YnNjcmliZWRFbnRpdGllcy5jbGVhcigpO1xuICAgIFxuICAgIGxvZ2dlci5pbmZvKCdDbGVhcmVkIGFsbCBzdWJzY3JpcHRpb25zJyk7XG4gIH1cbn0iLCIvKipcbiAqIEJhc2UgbGF5b3V0IGNsYXNzIGZvciBEYXNodmlldyBWMiBkYXNoYm9hcmQgbGF5b3V0cy5cbiAqIFByb3ZpZGVzIGdyaWQgc3lzdGVtIGFuZCByZXNwb25zaXZlIGJyZWFrcG9pbnQgaGFuZGxpbmcuXG4gKi9cblxuaW1wb3J0IHsgV2lkZ2V0Q29uZmlnIH0gZnJvbSAnLi4vY29yZS93aWRnZXQtYmFzZSc7XG5cbmV4cG9ydCB0eXBlIEJyZWFrcG9pbnQgPSAnbW9iaWxlJyB8ICd0YWJsZXQnIHwgJ2Rlc2t0b3AnIHwgJ2xhcmdlJztcblxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRDb25maWcge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIG1pbkFyZWFzOiBudW1iZXI7XG4gIG1heEFyZWFzOiBudW1iZXI7XG4gIGJyZWFrcG9pbnRzOiB7XG4gICAgbW9iaWxlOiBudW1iZXI7ICAgIC8vIDwgNzY4cHhcbiAgICB0YWJsZXQ6IG51bWJlcjsgICAgLy8gNzY4cHggLSAxMDIzcHhcbiAgICBkZXNrdG9wOiBudW1iZXI7ICAgLy8gMTAyNHB4IC0gMTQzOXB4XG4gICAgbGFyZ2U6IG51bWJlcjsgICAgIC8vID49IDE0NDBweFxuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdyaWRBcmVhIHtcbiAgbmFtZTogc3RyaW5nO1xuICBncmlkQXJlYTogc3RyaW5nO1xuICBtaW5XaWRnZXRzPzogbnVtYmVyO1xuICBtYXhXaWRnZXRzPzogbnVtYmVyO1xuICB3aWRnZXRUeXBlcz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdpZGdldFBvc2l0aW9uIHtcbiAgd2lkZ2V0SWQ6IHN0cmluZztcbiAgZ3JpZEFyZWE6IHN0cmluZztcbiAgZ3JpZENvbHVtbj86IHN0cmluZztcbiAgZ3JpZFJvdz86IHN0cmluZztcbiAgb3JkZXI/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlTGF5b3V0IHtcbiAgcHJvdGVjdGVkIGNvbmZpZzogTGF5b3V0Q29uZmlnO1xuICBwcm90ZWN0ZWQgY3VycmVudEJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQgPSAnZGVza3RvcCc7XG4gIHByb3RlY3RlZCBjb250YWluZXJXaWR0aCA9IDA7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb25maWcgPSB0aGlzLmdldExheW91dENvbmZpZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBsYXlvdXQgY29uZmlndXJhdGlvbi5cbiAgICogTXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzc2VzLlxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldExheW91dENvbmZpZygpOiBMYXlvdXRDb25maWc7XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIENTUyBncmlkIHRlbXBsYXRlIGZvciBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBhYnN0cmFjdCBnZW5lcmF0ZUdyaWRUZW1wbGF0ZShicmVha3BvaW50OiBCcmVha3BvaW50KTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgd2lkZ2V0IHBvc2l0aW9ucyBiYXNlZCBvbiBhdmFpbGFibGUgd2lkZ2V0cyBhbmQgYXJlYXMuXG4gICAqL1xuICBhYnN0cmFjdCBjYWxjdWxhdGVXaWRnZXRQb3NpdGlvbnMoXG4gICAgd2lkZ2V0czogV2lkZ2V0Q29uZmlnW10sXG4gICAgYXJlYUNvdW50OiBudW1iZXJcbiAgKTogV2lkZ2V0UG9zaXRpb25bXTtcblxuICAvKipcbiAgICogR2V0IGdyaWQgYXJlYXMgZGVmaW5pdGlvbiBmb3IgY3VycmVudCBicmVha3BvaW50LlxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0R3JpZEFyZWFzKGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQpOiBHcmlkQXJlYVtdO1xuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBicmVha3BvaW50IGJhc2VkIG9uIGNvbnRhaW5lciB3aWR0aC5cbiAgICovXG4gIGdldEJyZWFrcG9pbnQod2lkdGg/OiBudW1iZXIpOiBCcmVha3BvaW50IHtcbiAgICBjb25zdCB3ID0gd2lkdGggfHwgdGhpcy5jb250YWluZXJXaWR0aDtcbiAgICBcbiAgICBpZiAodyA8IHRoaXMuY29uZmlnLmJyZWFrcG9pbnRzLnRhYmxldCkge1xuICAgICAgcmV0dXJuICdtb2JpbGUnO1xuICAgIH0gZWxzZSBpZiAodyA8IHRoaXMuY29uZmlnLmJyZWFrcG9pbnRzLmRlc2t0b3ApIHtcbiAgICAgIHJldHVybiAndGFibGV0JztcbiAgICB9IGVsc2UgaWYgKHcgPCB0aGlzLmNvbmZpZy5icmVha3BvaW50cy5sYXJnZSkge1xuICAgICAgcmV0dXJuICdkZXNrdG9wJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdsYXJnZSc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBjb250YWluZXIgd2lkdGggYW5kIHJldHVybiBpZiBicmVha3BvaW50IGNoYW5nZWQuXG4gICAqL1xuICB1cGRhdGVDb250YWluZXJXaWR0aCh3aWR0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgdGhpcy5jb250YWluZXJXaWR0aCA9IHdpZHRoO1xuICAgIGNvbnN0IG5ld0JyZWFrcG9pbnQgPSB0aGlzLmdldEJyZWFrcG9pbnQod2lkdGgpO1xuICAgIFxuICAgIGlmIChuZXdCcmVha3BvaW50ICE9PSB0aGlzLmN1cnJlbnRCcmVha3BvaW50KSB7XG4gICAgICB0aGlzLmN1cnJlbnRCcmVha3BvaW50ID0gbmV3QnJlYWtwb2ludDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG51bWJlciBvZiBjb2x1bW5zIGZvciBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBnZXRDb2x1bW5Db3VudChicmVha3BvaW50PzogQnJlYWtwb2ludCk6IG51bWJlciB7XG4gICAgY29uc3QgYnAgPSBicmVha3BvaW50IHx8IHRoaXMuY3VycmVudEJyZWFrcG9pbnQ7XG4gICAgXG4gICAgc3dpdGNoIChicCkge1xuICAgICAgY2FzZSAnbW9iaWxlJzpcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgICBjYXNlICd0YWJsZXQnOlxuICAgICAgICByZXR1cm4gODtcbiAgICAgIGNhc2UgJ2Rlc2t0b3AnOlxuICAgICAgICByZXR1cm4gMTI7XG4gICAgICBjYXNlICdsYXJnZSc6XG4gICAgICAgIHJldHVybiAxMjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAxMjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGdyaWQgZ2FwIHNpemUgZm9yIGN1cnJlbnQgYnJlYWtwb2ludC5cbiAgICovXG4gIGdldEdyaWRHYXAoYnJlYWtwb2ludD86IEJyZWFrcG9pbnQpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJwID0gYnJlYWtwb2ludCB8fCB0aGlzLmN1cnJlbnRCcmVha3BvaW50O1xuICAgIFxuICAgIHN3aXRjaCAoYnApIHtcbiAgICAgIGNhc2UgJ21vYmlsZSc6XG4gICAgICAgIHJldHVybiAnOHB4JztcbiAgICAgIGNhc2UgJ3RhYmxldCc6XG4gICAgICAgIHJldHVybiAnMTJweCc7XG4gICAgICBjYXNlICdkZXNrdG9wJzpcbiAgICAgICAgcmV0dXJuICcxNnB4JztcbiAgICAgIGNhc2UgJ2xhcmdlJzpcbiAgICAgICAgcmV0dXJuICcyMHB4JztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnMTZweCc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb250YWluZXIgcGFkZGluZyBmb3IgY3VycmVudCBicmVha3BvaW50LlxuICAgKi9cbiAgZ2V0Q29udGFpbmVyUGFkZGluZyhicmVha3BvaW50PzogQnJlYWtwb2ludCk6IHN0cmluZyB7XG4gICAgY29uc3QgYnAgPSBicmVha3BvaW50IHx8IHRoaXMuY3VycmVudEJyZWFrcG9pbnQ7XG4gICAgXG4gICAgc3dpdGNoIChicCkge1xuICAgICAgY2FzZSAnbW9iaWxlJzpcbiAgICAgICAgcmV0dXJuICc4cHgnO1xuICAgICAgY2FzZSAndGFibGV0JzpcbiAgICAgICAgcmV0dXJuICcxNnB4JztcbiAgICAgIGNhc2UgJ2Rlc2t0b3AnOlxuICAgICAgICByZXR1cm4gJzI0cHgnO1xuICAgICAgY2FzZSAnbGFyZ2UnOlxuICAgICAgICByZXR1cm4gJzMycHgnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICcyNHB4JztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgbGF5b3V0IGlzIHN1aXRhYmxlIGZvciBnaXZlbiBhcmVhIGNvdW50LlxuICAgKi9cbiAgaXNTdWl0YWJsZUZvckFyZWFDb3VudChhcmVhQ291bnQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBhcmVhQ291bnQgPj0gdGhpcy5jb25maWcubWluQXJlYXMgJiYgXG4gICAgICAgICAgIGFyZWFDb3VudCA8PSB0aGlzLmNvbmZpZy5tYXhBcmVhcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0IHdpZGdldHMgYnkgcHJpb3JpdHkgZm9yIHBsYWNlbWVudC5cbiAgICovXG4gIHByb3RlY3RlZCBzb3J0V2lkZ2V0c0J5UHJpb3JpdHkod2lkZ2V0czogV2lkZ2V0Q29uZmlnW10pOiBXaWRnZXRDb25maWdbXSB7XG4gICAgLy8gUHJpb3JpdHkgb3JkZXI6IHJvb20gPiBjbGltYXRlID4gZGV2aWNlLWdyb3VwID4gcXVpY2stY29udHJvbHNcbiAgICBjb25zdCBwcmlvcml0eU1hcDogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHtcbiAgICAgICdyb29tJzogNCxcbiAgICAgICdjbGltYXRlJzogMyxcbiAgICAgICdkZXZpY2UtZ3JvdXAnOiAyLFxuICAgICAgJ3F1aWNrLWNvbnRyb2xzJzogMSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIFsuLi53aWRnZXRzXS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBjb25zdCBwcmlvcml0eUEgPSBwcmlvcml0eU1hcFthLnR5cGVdIHx8IDA7XG4gICAgICBjb25zdCBwcmlvcml0eUIgPSBwcmlvcml0eU1hcFtiLnR5cGVdIHx8IDA7XG4gICAgICBcbiAgICAgIC8vIFNvcnQgYnkgcHJpb3JpdHkgZmlyc3RcbiAgICAgIGlmIChwcmlvcml0eUEgIT09IHByaW9yaXR5Qikge1xuICAgICAgICByZXR1cm4gcHJpb3JpdHlCIC0gcHJpb3JpdHlBO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBUaGVuIGJ5IGVudGl0eSBjb3VudFxuICAgICAgcmV0dXJuIGIuZW50aXRpZXMubGVuZ3RoIC0gYS5lbnRpdGllcy5sZW5ndGg7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR3JvdXAgd2lkZ2V0cyBieSB0eXBlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdyb3VwV2lkZ2V0c0J5VHlwZSh3aWRnZXRzOiBXaWRnZXRDb25maWdbXSk6IE1hcDxzdHJpbmcsIFdpZGdldENvbmZpZ1tdPiB7XG4gICAgY29uc3QgZ3JvdXBzID0gbmV3IE1hcDxzdHJpbmcsIFdpZGdldENvbmZpZ1tdPigpO1xuICAgIFxuICAgIGZvciAoY29uc3Qgd2lkZ2V0IG9mIHdpZGdldHMpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSB3aWRnZXQudHlwZTtcbiAgICAgIGlmICghZ3JvdXBzLmhhcyh0eXBlKSkge1xuICAgICAgICBncm91cHMuc2V0KHR5cGUsIFtdKTtcbiAgICAgIH1cbiAgICAgIGdyb3Vwcy5nZXQodHlwZSkhLnB1c2god2lkZ2V0KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGdyb3VwcztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBDU1MgZm9yIGdyaWQgdGVtcGxhdGUuXG4gICAqL1xuICBnZW5lcmF0ZUdyaWRDU1MoYnJlYWtwb2ludD86IEJyZWFrcG9pbnQpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJwID0gYnJlYWtwb2ludCB8fCB0aGlzLmN1cnJlbnRCcmVha3BvaW50O1xuICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5nZW5lcmF0ZUdyaWRUZW1wbGF0ZShicCk7XG4gICAgY29uc3QgZ2FwID0gdGhpcy5nZXRHcmlkR2FwKGJwKTtcbiAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5nZXRDb250YWluZXJQYWRkaW5nKGJwKTtcbiAgICBcbiAgICByZXR1cm4gYFxuICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgIGdyaWQtdGVtcGxhdGU6ICR7dGVtcGxhdGV9O1xuICAgICAgZ2FwOiAke2dhcH07XG4gICAgICBwYWRkaW5nOiAke3BhZGRpbmd9O1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIGA7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGxheW91dCBtZXRhZGF0YS5cbiAgICovXG4gIGdldE1ldGFkYXRhKCk6IHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBjdXJyZW50QnJlYWtwb2ludDogQnJlYWtwb2ludDtcbiAgICBzdXBwb3J0ZWRBcmVhUmFuZ2U6IFtudW1iZXIsIG51bWJlcl07XG4gIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLmNvbmZpZy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuY29uZmlnLmRlc2NyaXB0aW9uLFxuICAgICAgY3VycmVudEJyZWFrcG9pbnQ6IHRoaXMuY3VycmVudEJyZWFrcG9pbnQsXG4gICAgICBzdXBwb3J0ZWRBcmVhUmFuZ2U6IFt0aGlzLmNvbmZpZy5taW5BcmVhcywgdGhpcy5jb25maWcubWF4QXJlYXNdLFxuICAgIH07XG4gIH1cbn0iLCIvKipcbiAqIFN0YW5kYXJkIGxheW91dCBmb3IgMi0zIGJlZHJvb20gaG9tZXMuXG4gKiBPcHRpbWl6ZWQgZ3JpZCBsYXlvdXQgd2l0aCByb29tIHdpZGdldHMgaW4gbWFpbiBhcmVhLFxuICogZGV2aWNlIGdyb3VwcyBpbiBzaWRlYmFyLCBjbGltYXRlIGluIGhlYWRlciwgYW5kIHF1aWNrIGNvbnRyb2xzIGluIGZvb3Rlci5cbiAqL1xuXG5pbXBvcnQgeyBCYXNlTGF5b3V0LCBCcmVha3BvaW50LCBHcmlkQXJlYSwgTGF5b3V0Q29uZmlnLCBXaWRnZXRQb3NpdGlvbiB9IGZyb20gJy4vYmFzZS1sYXlvdXQnO1xuaW1wb3J0IHsgV2lkZ2V0Q29uZmlnIH0gZnJvbSAnLi4vY29yZS93aWRnZXQtYmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBTdGFuZGFyZExheW91dCBleHRlbmRzIEJhc2VMYXlvdXQge1xuICBwcm90ZWN0ZWQgZ2V0TGF5b3V0Q29uZmlnKCk6IExheW91dENvbmZpZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdTdGFuZGFyZCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ09wdGltaXplZCBsYXlvdXQgZm9yIDItMyBiZWRyb29tIGhvbWVzJyxcbiAgICAgIG1pbkFyZWFzOiAyLFxuICAgICAgbWF4QXJlYXM6IDUsXG4gICAgICBicmVha3BvaW50czoge1xuICAgICAgICBtb2JpbGU6IDc2OCxcbiAgICAgICAgdGFibGV0OiAxMDI0LFxuICAgICAgICBkZXNrdG9wOiAxNDQwLFxuICAgICAgICBsYXJnZTogMTkyMCxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIGdlbmVyYXRlR3JpZFRlbXBsYXRlKGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQpOiBzdHJpbmcge1xuICAgIHN3aXRjaCAoYnJlYWtwb2ludCkge1xuICAgICAgY2FzZSAnbW9iaWxlJzpcbiAgICAgICAgLy8gU2luZ2xlIGNvbHVtbiBsYXlvdXRcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICBcImhlYWRlclwiIGF1dG9cbiAgICAgICAgICBcIm1haW5cIiAxZnJcbiAgICAgICAgICBcInNpZGViYXJcIiBhdXRvXG4gICAgICAgICAgXCJmb290ZXJcIiBhdXRvXG4gICAgICAgICAgLyAxZnJcbiAgICAgICAgYDtcbiAgICAgIFxuICAgICAgY2FzZSAndGFibGV0JzpcbiAgICAgICAgLy8gVHdvIGNvbHVtbiBsYXlvdXRcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICBcImhlYWRlciBoZWFkZXJcIiBhdXRvXG4gICAgICAgICAgXCJtYWluIG1haW5cIiAxZnJcbiAgICAgICAgICBcInNpZGViYXIgc2lkZWJhclwiIGF1dG9cbiAgICAgICAgICBcImZvb3RlciBmb290ZXJcIiBhdXRvXG4gICAgICAgICAgLyAxZnIgMWZyXG4gICAgICAgIGA7XG4gICAgICBcbiAgICAgIGNhc2UgJ2Rlc2t0b3AnOlxuICAgICAgICAvLyBUaHJlZSBjb2x1bW4gbGF5b3V0IHdpdGggc2lkZWJhclxuICAgICAgICByZXR1cm4gYFxuICAgICAgICAgIFwiaGVhZGVyIGhlYWRlciBoZWFkZXJcIiBhdXRvXG4gICAgICAgICAgXCJtYWluIG1haW4gc2lkZWJhclwiIDFmclxuICAgICAgICAgIFwiZm9vdGVyIGZvb3RlciBmb290ZXJcIiBhdXRvXG4gICAgICAgICAgLyAxZnIgMWZyIG1pbm1heCgyODBweCwgMC41ZnIpXG4gICAgICAgIGA7XG4gICAgICBcbiAgICAgIGNhc2UgJ2xhcmdlJzpcbiAgICAgICAgLy8gVGhyZWUgY29sdW1uIGxheW91dCB3aXRoIGxhcmdlciBzaWRlYmFyXG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgXCJoZWFkZXIgaGVhZGVyIGhlYWRlclwiIGF1dG9cbiAgICAgICAgICBcIm1haW4gbWFpbiBzaWRlYmFyXCIgMWZyXG4gICAgICAgICAgXCJmb290ZXIgZm9vdGVyIGZvb3RlclwiIGF1dG9cbiAgICAgICAgICAvIDFmciAxZnIgbWlubWF4KDMyMHB4LCAwLjZmcilcbiAgICAgICAgYDtcbiAgICAgIFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVHcmlkVGVtcGxhdGUoJ2Rlc2t0b3AnKTtcbiAgICB9XG4gIH1cblxuICBnZXRHcmlkQXJlYXMoYnJlYWtwb2ludDogQnJlYWtwb2ludCk6IEdyaWRBcmVhW10ge1xuICAgIGNvbnN0IGFyZWFzOiBHcmlkQXJlYVtdID0gW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnaGVhZGVyJyxcbiAgICAgICAgZ3JpZEFyZWE6ICdoZWFkZXInLFxuICAgICAgICBtaW5XaWRnZXRzOiAwLFxuICAgICAgICBtYXhXaWRnZXRzOiAyLFxuICAgICAgICB3aWRnZXRUeXBlczogWydjbGltYXRlJywgJ3F1aWNrLWNvbnRyb2xzJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnbWFpbicsXG4gICAgICAgIGdyaWRBcmVhOiAnbWFpbicsXG4gICAgICAgIG1pbldpZGdldHM6IDEsXG4gICAgICAgIG1heFdpZGdldHM6IDYsXG4gICAgICAgIHdpZGdldFR5cGVzOiBbJ3Jvb20nXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdzaWRlYmFyJyxcbiAgICAgICAgZ3JpZEFyZWE6ICdzaWRlYmFyJyxcbiAgICAgICAgbWluV2lkZ2V0czogMCxcbiAgICAgICAgbWF4V2lkZ2V0czogNCxcbiAgICAgICAgd2lkZ2V0VHlwZXM6IFsnZGV2aWNlLWdyb3VwJywgJ3F1aWNrLWNvbnRyb2xzJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnZm9vdGVyJyxcbiAgICAgICAgZ3JpZEFyZWE6ICdmb290ZXInLFxuICAgICAgICBtaW5XaWRnZXRzOiAwLFxuICAgICAgICBtYXhXaWRnZXRzOiAxLFxuICAgICAgICB3aWRnZXRUeXBlczogWydxdWljay1jb250cm9scyddLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgLy8gQWRqdXN0IGZvciBtb2JpbGVcbiAgICBpZiAoYnJlYWtwb2ludCA9PT0gJ21vYmlsZScpIHtcbiAgICAgIC8vIE9uIG1vYmlsZSwgZXZlcnl0aGluZyBzdGFja3MgdmVydGljYWxseVxuICAgICAgYXJlYXMuZm9yRWFjaChhcmVhID0+IHtcbiAgICAgICAgaWYgKGFyZWEubmFtZSA9PT0gJ21haW4nKSB7XG4gICAgICAgICAgYXJlYS5tYXhXaWRnZXRzID0gNDsgLy8gTGltaXQgcm9vbSB3aWRnZXRzIG9uIG1vYmlsZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJlYXM7XG4gIH1cblxuICBjYWxjdWxhdGVXaWRnZXRQb3NpdGlvbnMoXG4gICAgd2lkZ2V0czogV2lkZ2V0Q29uZmlnW10sXG4gICAgYXJlYUNvdW50OiBudW1iZXJcbiAgKTogV2lkZ2V0UG9zaXRpb25bXSB7XG4gICAgY29uc3QgcG9zaXRpb25zOiBXaWRnZXRQb3NpdGlvbltdID0gW107XG4gICAgY29uc3Qgc29ydGVkV2lkZ2V0cyA9IHRoaXMuc29ydFdpZGdldHNCeVByaW9yaXR5KHdpZGdldHMpO1xuICAgIGNvbnN0IHdpZGdldHNCeVR5cGUgPSB0aGlzLmdyb3VwV2lkZ2V0c0J5VHlwZShzb3J0ZWRXaWRnZXRzKTtcbiAgICBcbiAgICAvLyBQbGFjZSBjbGltYXRlIHdpZGdldHMgaW4gaGVhZGVyXG4gICAgY29uc3QgY2xpbWF0ZVdpZGdldHMgPSB3aWRnZXRzQnlUeXBlLmdldCgnY2xpbWF0ZScpIHx8IFtdO1xuICAgIGNsaW1hdGVXaWRnZXRzLnNsaWNlKDAsIDEpLmZvckVhY2goKHdpZGdldCwgaW5kZXgpID0+IHtcbiAgICAgIHBvc2l0aW9ucy5wdXNoKHtcbiAgICAgICAgd2lkZ2V0SWQ6IHRoaXMuZ2VuZXJhdGVXaWRnZXRJZCh3aWRnZXQpLFxuICAgICAgICBncmlkQXJlYTogJ2hlYWRlcicsXG4gICAgICAgIG9yZGVyOiBpbmRleCxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gUGxhY2Ugcm9vbSB3aWRnZXRzIGluIG1haW4gYXJlYVxuICAgIGNvbnN0IHJvb21XaWRnZXRzID0gd2lkZ2V0c0J5VHlwZS5nZXQoJ3Jvb20nKSB8fCBbXTtcbiAgICBjb25zdCBtYWluQ29sdW1ucyA9IHRoaXMuY3VycmVudEJyZWFrcG9pbnQgPT09ICdtb2JpbGUnID8gMSA6IDI7XG4gICAgY29uc3QgbWFpblJvd3MgPSBNYXRoLmNlaWwocm9vbVdpZGdldHMubGVuZ3RoIC8gbWFpbkNvbHVtbnMpO1xuICAgIFxuICAgIHJvb21XaWRnZXRzLnNsaWNlKDAsIDYpLmZvckVhY2goKHdpZGdldCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGNvbCA9IChpbmRleCAlIG1haW5Db2x1bW5zKSArIDE7XG4gICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGluZGV4IC8gbWFpbkNvbHVtbnMpICsgMTtcbiAgICAgIFxuICAgICAgcG9zaXRpb25zLnB1c2goe1xuICAgICAgICB3aWRnZXRJZDogdGhpcy5nZW5lcmF0ZVdpZGdldElkKHdpZGdldCksXG4gICAgICAgIGdyaWRBcmVhOiAnbWFpbicsXG4gICAgICAgIGdyaWRDb2x1bW46IHRoaXMuY3VycmVudEJyZWFrcG9pbnQgPT09ICdtb2JpbGUnIFxuICAgICAgICAgID8gJzEnIFxuICAgICAgICAgIDogYCR7Y29sfSAvIHNwYW4gMWAsXG4gICAgICAgIGdyaWRSb3c6IGAke3Jvd30gLyBzcGFuIDFgLFxuICAgICAgICBvcmRlcjogaW5kZXgsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIFBsYWNlIGRldmljZSBncm91cHMgaW4gc2lkZWJhclxuICAgIGNvbnN0IGRldmljZUdyb3VwcyA9IHdpZGdldHNCeVR5cGUuZ2V0KCdkZXZpY2UtZ3JvdXAnKSB8fCBbXTtcbiAgICBkZXZpY2VHcm91cHMuc2xpY2UoMCwgMykuZm9yRWFjaCgod2lkZ2V0LCBpbmRleCkgPT4ge1xuICAgICAgcG9zaXRpb25zLnB1c2goe1xuICAgICAgICB3aWRnZXRJZDogdGhpcy5nZW5lcmF0ZVdpZGdldElkKHdpZGdldCksXG4gICAgICAgIGdyaWRBcmVhOiAnc2lkZWJhcicsXG4gICAgICAgIG9yZGVyOiBpbmRleCxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gUGxhY2UgcXVpY2sgY29udHJvbHNcbiAgICBjb25zdCBxdWlja0NvbnRyb2xzID0gd2lkZ2V0c0J5VHlwZS5nZXQoJ3F1aWNrLWNvbnRyb2xzJykgfHwgW107XG4gICAgaWYgKHF1aWNrQ29udHJvbHMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gRmlyc3QgcXVpY2sgY29udHJvbHMgaW4gZm9vdGVyXG4gICAgICBwb3NpdGlvbnMucHVzaCh7XG4gICAgICAgIHdpZGdldElkOiB0aGlzLmdlbmVyYXRlV2lkZ2V0SWQocXVpY2tDb250cm9sc1swXSksXG4gICAgICAgIGdyaWRBcmVhOiAnZm9vdGVyJyxcbiAgICAgICAgb3JkZXI6IDAsXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQWRkaXRpb25hbCBxdWljayBjb250cm9scyBpbiBzaWRlYmFyXG4gICAgICBxdWlja0NvbnRyb2xzLnNsaWNlKDEsIDMpLmZvckVhY2goKHdpZGdldCwgaW5kZXgpID0+IHtcbiAgICAgICAgcG9zaXRpb25zLnB1c2goe1xuICAgICAgICAgIHdpZGdldElkOiB0aGlzLmdlbmVyYXRlV2lkZ2V0SWQod2lkZ2V0KSxcbiAgICAgICAgICBncmlkQXJlYTogJ3NpZGViYXInLFxuICAgICAgICAgIG9yZGVyOiBkZXZpY2VHcm91cHMubGVuZ3RoICsgaW5kZXgsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHVuaXF1ZSB3aWRnZXQgSUQuXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlV2lkZ2V0SWQod2lkZ2V0OiBXaWRnZXRDb25maWcpOiBzdHJpbmcge1xuICAgIC8vIFVzZSB0eXBlIGFuZCBmaXJzdCBlbnRpdHkgYXMgSURcbiAgICBjb25zdCBmaXJzdEVudGl0eSA9IHdpZGdldC5lbnRpdGllc1swXSB8fCAndW5rbm93bic7XG4gICAgcmV0dXJuIGAke3dpZGdldC50eXBlfS0ke2ZpcnN0RW50aXR5LnJlcGxhY2UoL1xcLi9nLCAnXycpfWA7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHJlY29tbWVuZGVkIHdpZGdldCBjb25maWd1cmF0aW9uIGZvciBhcmVhIGNvdW50LlxuICAgKi9cbiAgZ2V0UmVjb21tZW5kZWRXaWRnZXRzKGFyZWFDb3VudDogbnVtYmVyKToge1xuICAgIHJvb21XaWRnZXRzOiBudW1iZXI7XG4gICAgZGV2aWNlR3JvdXBzOiBudW1iZXI7XG4gICAgY2xpbWF0ZVdpZGdldHM6IG51bWJlcjtcbiAgICBxdWlja0NvbnRyb2xzOiBudW1iZXI7XG4gIH0ge1xuICAgIC8vIEJhc2UgcmVjb21tZW5kYXRpb25zXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgcm9vbVdpZGdldHM6IE1hdGgubWluKGFyZWFDb3VudCwgNCksXG4gICAgICBkZXZpY2VHcm91cHM6IDIsXG4gICAgICBjbGltYXRlV2lkZ2V0czogMSxcbiAgICAgIHF1aWNrQ29udHJvbHM6IDEsXG4gICAgfTtcblxuICAgIC8vIEFkanVzdCBiYXNlZCBvbiBhcmVhIGNvdW50XG4gICAgaWYgKGFyZWFDb3VudCA8PSAyKSB7XG4gICAgICAvLyBTbWFsbCBob21lOiBmZXdlciB3aWRnZXRzXG4gICAgICBjb25maWcucm9vbVdpZGdldHMgPSBhcmVhQ291bnQ7XG4gICAgICBjb25maWcuZGV2aWNlR3JvdXBzID0gMTtcbiAgICB9IGVsc2UgaWYgKGFyZWFDb3VudCA+PSA0KSB7XG4gICAgICAvLyBMYXJnZXIgaG9tZTogbW9yZSB3aWRnZXRzXG4gICAgICBjb25maWcuZGV2aWNlR3JvdXBzID0gMztcbiAgICAgIGNvbmZpZy5xdWlja0NvbnRyb2xzID0gMjtcbiAgICB9XG5cbiAgICAvLyBBZGp1c3QgZm9yIGJyZWFrcG9pbnRcbiAgICBpZiAodGhpcy5jdXJyZW50QnJlYWtwb2ludCA9PT0gJ21vYmlsZScpIHtcbiAgICAgIGNvbmZpZy5yb29tV2lkZ2V0cyA9IE1hdGgubWluKGNvbmZpZy5yb29tV2lkZ2V0cywgMyk7XG4gICAgICBjb25maWcuZGV2aWNlR3JvdXBzID0gTWF0aC5taW4oY29uZmlnLmRldmljZUdyb3VwcywgMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQ1NTIGZvciBzcGVjaWZpYyBncmlkIGFyZWFzLlxuICAgKi9cbiAgZ2V0QXJlYVN0eWxlcyhicmVha3BvaW50PzogQnJlYWtwb2ludCk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgIGNvbnN0IGJwID0gYnJlYWtwb2ludCB8fCB0aGlzLmN1cnJlbnRCcmVha3BvaW50O1xuICAgIFxuICAgIGNvbnN0IGJhc2VTdHlsZXMgPSB7XG4gICAgICBoZWFkZXI6IGBcbiAgICAgICAgZ3JpZC1hcmVhOiBoZWFkZXI7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgZ2FwOiAxNnB4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgYCxcbiAgICAgIG1haW46IGBcbiAgICAgICAgZ3JpZC1hcmVhOiBtYWluO1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBnYXA6IDE2cHg7XG4gICAgICAgIGFsaWduLWNvbnRlbnQ6IHN0YXJ0O1xuICAgICAgYCxcbiAgICAgIHNpZGViYXI6IGBcbiAgICAgICAgZ3JpZC1hcmVhOiBzaWRlYmFyO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBnYXA6IDE2cHg7XG4gICAgICBgLFxuICAgICAgZm9vdGVyOiBgXG4gICAgICAgIGdyaWQtYXJlYTogZm9vdGVyO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGAsXG4gICAgfTtcblxuICAgIC8vIEFkanVzdCBtYWluIGdyaWQgZm9yIGRpZmZlcmVudCBicmVha3BvaW50c1xuICAgIGlmIChicCA9PT0gJ21vYmlsZScpIHtcbiAgICAgIGJhc2VTdHlsZXMubWFpbiArPSBgXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICAgICAgYDtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVN0eWxlcy5tYWluICs9IGBcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcbiAgICAgIGA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2VTdHlsZXM7XG4gIH1cbn0iLCIvKipcbiAqIExheW91dCBlbmdpbmUgZm9yIERhc2h2aWV3IFYyLlxuICogSGFuZGxlcyBsYXlvdXQgc2VsZWN0aW9uLCB3aWRnZXQgb3JnYW5pemF0aW9uLCBhbmQgb3ZlcmZsb3cgbWFuYWdlbWVudC5cbiAqL1xuXG5pbXBvcnQgeyBCYXNlTGF5b3V0LCBCcmVha3BvaW50LCBXaWRnZXRQb3NpdGlvbiB9IGZyb20gJy4vYmFzZS1sYXlvdXQnO1xuaW1wb3J0IHsgU3RhbmRhcmRMYXlvdXQgfSBmcm9tICcuL3N0YW5kYXJkLWxheW91dCc7XG5pbXBvcnQgeyBXaWRnZXRDb25maWcgfSBmcm9tICcuLi9jb3JlL3dpZGdldC1iYXNlJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0xheW91dEVuZ2luZScpO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFyZWFJbmZvIHtcbiAgYXJlYUlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZW50aXRpZXM6IHN0cmluZ1tdO1xuICBlbnRpdHlDb3VudDogbnVtYmVyO1xuICBkZXZpY2VDb3VudDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExheW91dEVuZ2luZUNvbmZpZyB7XG4gIG1heFdpZGdldHNQZXJBcmVhOiBudW1iZXI7XG4gIHByaW9yaXRpemVCeVVzYWdlOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgTGF5b3V0RW5naW5lIHtcbiAgcHJpdmF0ZSBsYXlvdXRzOiBNYXA8c3RyaW5nLCBCYXNlTGF5b3V0PjtcbiAgcHJpdmF0ZSBjdXJyZW50TGF5b3V0OiBCYXNlTGF5b3V0IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgY29uZmlnOiBSZXF1aXJlZDxMYXlvdXRFbmdpbmVDb25maWc+O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGFydGlhbDxMYXlvdXRFbmdpbmVDb25maWc+ID0ge30pIHtcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIG1heFdpZGdldHNQZXJBcmVhOiBjb25maWcubWF4V2lkZ2V0c1BlckFyZWEgPz8gMixcbiAgICAgIHByaW9yaXRpemVCeVVzYWdlOiBjb25maWcucHJpb3JpdGl6ZUJ5VXNhZ2UgPz8gdHJ1ZSxcbiAgICB9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBhdmFpbGFibGUgbGF5b3V0c1xuICAgIHRoaXMubGF5b3V0cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLnJlZ2lzdGVyTGF5b3V0KCdzdGFuZGFyZCcsIG5ldyBTdGFuZGFyZExheW91dCgpKTtcbiAgICBcbiAgICAvLyBGdXR1cmUgbGF5b3V0cyBjYW4gYmUgcmVnaXN0ZXJlZCBoZXJlOlxuICAgIC8vIHRoaXMucmVnaXN0ZXJMYXlvdXQoJ2NvbXBhY3QnLCBuZXcgQ29tcGFjdExheW91dCgpKTtcbiAgICAvLyB0aGlzLnJlZ2lzdGVyTGF5b3V0KCdjb21wbGV4JywgbmV3IENvbXBsZXhMYXlvdXQoKSk7XG4gICAgLy8gdGhpcy5yZWdpc3RlckxheW91dCgnZXN0YXRlJywgbmV3IEVzdGF0ZUxheW91dCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGxheW91dC5cbiAgICovXG4gIHJlZ2lzdGVyTGF5b3V0KG5hbWU6IHN0cmluZywgbGF5b3V0OiBCYXNlTGF5b3V0KTogdm9pZCB7XG4gICAgdGhpcy5sYXlvdXRzLnNldChuYW1lLCBsYXlvdXQpO1xuICAgIGxvZ2dlci5pbmZvKGBSZWdpc3RlcmVkIGxheW91dDogJHtuYW1lfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCBvcHRpbWFsIGxheW91dCBiYXNlZCBvbiBjb21wbGV4aXR5IHNjb3JlLlxuICAgKi9cbiAgc2VsZWN0TGF5b3V0KGNvbXBsZXhpdHlTY29yZTogbnVtYmVyLCBhcmVhQ291bnQ6IG51bWJlcik6IEJhc2VMYXlvdXQge1xuICAgIC8vIEZvciBub3csIHdlIG9ubHkgaGF2ZSBTdGFuZGFyZExheW91dFxuICAgIC8vIEluIHRoZSBmdXR1cmUsIHRoaXMgd2lsbCBzZWxlY3QgYmFzZWQgb24gY29tcGxleGl0eVxuICAgIFxuICAgIGxldCBzZWxlY3RlZExheW91dDogQmFzZUxheW91dCB8IHVuZGVmaW5lZDtcbiAgICBsZXQgc2VsZWN0ZWROYW1lID0gJyc7XG5cbiAgICAvLyBGaW5kIHN1aXRhYmxlIGxheW91dCBmb3IgYXJlYSBjb3VudFxuICAgIGZvciAoY29uc3QgW25hbWUsIGxheW91dF0gb2YgdGhpcy5sYXlvdXRzKSB7XG4gICAgICBpZiAobGF5b3V0LmlzU3VpdGFibGVGb3JBcmVhQ291bnQoYXJlYUNvdW50KSkge1xuICAgICAgICBzZWxlY3RlZExheW91dCA9IGxheW91dDtcbiAgICAgICAgc2VsZWN0ZWROYW1lID0gbmFtZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmFsbGJhY2sgdG8gc3RhbmRhcmQgaWYgbm8gc3VpdGFibGUgbGF5b3V0IGZvdW5kXG4gICAgaWYgKCFzZWxlY3RlZExheW91dCkge1xuICAgICAgc2VsZWN0ZWRMYXlvdXQgPSB0aGlzLmxheW91dHMuZ2V0KCdzdGFuZGFyZCcpITtcbiAgICAgIHNlbGVjdGVkTmFtZSA9ICdzdGFuZGFyZCc7XG4gICAgICBsb2dnZXIud2FybihcbiAgICAgICAgYE5vIHN1aXRhYmxlIGxheW91dCBmb3IgJHthcmVhQ291bnR9IGFyZWFzLCB1c2luZyBzdGFuZGFyZCBsYXlvdXRgXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudExheW91dCA9IHNlbGVjdGVkTGF5b3V0O1xuICAgIGxvZ2dlci5pbmZvKFxuICAgICAgYFNlbGVjdGVkICR7c2VsZWN0ZWROYW1lfSBsYXlvdXQgZm9yIGNvbXBsZXhpdHkgJHtjb21wbGV4aXR5U2NvcmV9IGFuZCAke2FyZWFDb3VudH0gYXJlYXNgXG4gICAgKTtcblxuICAgIHJldHVybiBzZWxlY3RlZExheW91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcmdhbml6ZSB3aWRnZXRzIGJhc2VkIG9uIGFyZWFzIGFuZCBsYXlvdXQuXG4gICAqL1xuICBvcmdhbml6ZVdpZGdldHMoYXJlYXM6IEFyZWFJbmZvW10pOiBXaWRnZXRDb25maWdbXSB7XG4gICAgY29uc3Qgd2lkZ2V0czogV2lkZ2V0Q29uZmlnW10gPSBbXTtcblxuICAgIC8vIFNvcnQgYXJlYXMgYnkgZW50aXR5IGNvdW50IGFuZCBwcmlvcml0eVxuICAgIGNvbnN0IHNvcnRlZEFyZWFzID0gdGhpcy5zb3J0QXJlYXNCeVByaW9yaXR5KGFyZWFzKTtcblxuICAgIC8vIENyZWF0ZSByb29tIHdpZGdldHMgZm9yIGVhY2ggYXJlYVxuICAgIGZvciAoY29uc3QgYXJlYSBvZiBzb3J0ZWRBcmVhcykge1xuICAgICAgaWYgKGFyZWEuZW50aXR5Q291bnQgPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICBjb25zdCByb29tV2lkZ2V0OiBXaWRnZXRDb25maWcgPSB7XG4gICAgICAgIHR5cGU6ICdyb29tJyxcbiAgICAgICAgZW50aXRpZXM6IGFyZWEuZW50aXRpZXMsXG4gICAgICAgIHRpdGxlOiBhcmVhLm5hbWUsXG4gICAgICB9O1xuICAgICAgd2lkZ2V0cy5wdXNoKHJvb21XaWRnZXQpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBkZXZpY2UgZ3JvdXAgd2lkZ2V0c1xuICAgIGNvbnN0IGRldmljZUdyb3VwcyA9IHRoaXMuY3JlYXRlRGV2aWNlR3JvdXBzKGFyZWFzKTtcbiAgICB3aWRnZXRzLnB1c2goLi4uZGV2aWNlR3JvdXBzKTtcblxuICAgIC8vIENyZWF0ZSBjbGltYXRlIHdpZGdldCBpZiBjbGltYXRlIGVudGl0aWVzIGV4aXN0XG4gICAgY29uc3QgY2xpbWF0ZVdpZGdldCA9IHRoaXMuY3JlYXRlQ2xpbWF0ZVdpZGdldChhcmVhcyk7XG4gICAgaWYgKGNsaW1hdGVXaWRnZXQpIHtcbiAgICAgIHdpZGdldHMucHVzaChjbGltYXRlV2lkZ2V0KTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgcXVpY2sgY29udHJvbHMgd2lkZ2V0XG4gICAgY29uc3QgcXVpY2tDb250cm9scyA9IHRoaXMuY3JlYXRlUXVpY2tDb250cm9sc1dpZGdldChhcmVhcyk7XG4gICAgaWYgKHF1aWNrQ29udHJvbHMpIHtcbiAgICAgIHdpZGdldHMucHVzaChxdWlja0NvbnRyb2xzKTtcbiAgICB9XG5cbiAgICBsb2dnZXIuaW5mbyhgT3JnYW5pemVkICR7d2lkZ2V0cy5sZW5ndGh9IHdpZGdldHMgZnJvbSAke2FyZWFzLmxlbmd0aH0gYXJlYXNgKTtcbiAgICByZXR1cm4gd2lkZ2V0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgd2lkZ2V0IG92ZXJmbG93IGZvciBjdXJyZW50IGxheW91dC5cbiAgICovXG4gIGhhbmRsZU92ZXJmbG93KFxuICAgIHdpZGdldHM6IFdpZGdldENvbmZpZ1tdLFxuICAgIGxheW91dDogQmFzZUxheW91dCxcbiAgICBicmVha3BvaW50OiBCcmVha3BvaW50XG4gICk6IHtcbiAgICB2aXNpYmxlOiBXaWRnZXRDb25maWdbXTtcbiAgICBvdmVyZmxvdzogV2lkZ2V0Q29uZmlnW107XG4gIH0ge1xuICAgIGNvbnN0IGFyZWFzID0gbGF5b3V0LmdldEdyaWRBcmVhcyhicmVha3BvaW50KTtcbiAgICBjb25zdCB2aXNpYmxlOiBXaWRnZXRDb25maWdbXSA9IFtdO1xuICAgIGNvbnN0IG92ZXJmbG93OiBXaWRnZXRDb25maWdbXSA9IFtdO1xuICAgIFxuICAgIC8vIEdyb3VwIHdpZGdldHMgYnkgdHlwZVxuICAgIGNvbnN0IHdpZGdldHNCeVR5cGUgPSBuZXcgTWFwPHN0cmluZywgV2lkZ2V0Q29uZmlnW10+KCk7XG4gICAgZm9yIChjb25zdCB3aWRnZXQgb2Ygd2lkZ2V0cykge1xuICAgICAgaWYgKCF3aWRnZXRzQnlUeXBlLmhhcyh3aWRnZXQudHlwZSkpIHtcbiAgICAgICAgd2lkZ2V0c0J5VHlwZS5zZXQod2lkZ2V0LnR5cGUsIFtdKTtcbiAgICAgIH1cbiAgICAgIHdpZGdldHNCeVR5cGUuZ2V0KHdpZGdldC50eXBlKSEucHVzaCh3aWRnZXQpO1xuICAgIH1cblxuICAgIC8vIFBsYWNlIHdpZGdldHMgYWNjb3JkaW5nIHRvIGFyZWEgY29uc3RyYWludHNcbiAgICBmb3IgKGNvbnN0IGFyZWEgb2YgYXJlYXMpIHtcbiAgICAgIGxldCByZW1haW5pbmdTbG90cyA9IGFyZWEubWF4V2lkZ2V0cyB8fCA5OTk7XG4gICAgICBcbiAgICAgIGZvciAoY29uc3Qgd2lkZ2V0VHlwZSBvZiBhcmVhLndpZGdldFR5cGVzIHx8IFtdKSB7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZGdldHMgPSB3aWRnZXRzQnlUeXBlLmdldCh3aWRnZXRUeXBlKSB8fCBbXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3Qgd2lkZ2V0IG9mIGF2YWlsYWJsZVdpZGdldHMpIHtcbiAgICAgICAgICBpZiAocmVtYWluaW5nU2xvdHMgPiAwICYmICF2aXNpYmxlLmluY2x1ZGVzKHdpZGdldCkpIHtcbiAgICAgICAgICAgIHZpc2libGUucHVzaCh3aWRnZXQpO1xuICAgICAgICAgICAgcmVtYWluaW5nU2xvdHMtLTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCF2aXNpYmxlLmluY2x1ZGVzKHdpZGdldCkgJiYgIW92ZXJmbG93LmluY2x1ZGVzKHdpZGdldCkpIHtcbiAgICAgICAgICAgIG92ZXJmbG93LnB1c2god2lkZ2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsb2dnZXIuaW5mbyhcbiAgICAgIGBMYXlvdXQgb3ZlcmZsb3c6ICR7dmlzaWJsZS5sZW5ndGh9IHZpc2libGUsICR7b3ZlcmZsb3cubGVuZ3RofSBvdmVyZmxvd2BcbiAgICApO1xuXG4gICAgcmV0dXJuIHsgdmlzaWJsZSwgb3ZlcmZsb3cgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTb3J0IGFyZWFzIGJ5IHByaW9yaXR5LlxuICAgKi9cbiAgcHJpdmF0ZSBzb3J0QXJlYXNCeVByaW9yaXR5KGFyZWFzOiBBcmVhSW5mb1tdKTogQXJlYUluZm9bXSB7XG4gICAgcmV0dXJuIFsuLi5hcmVhc10uc29ydCgoYSwgYikgPT4ge1xuICAgICAgLy8gUHJpb3JpdGl6ZSBuYW1lZCBhcmVhcyBvdmVyIFwidW5hc3NpZ25lZFwiXG4gICAgICBpZiAoYS5hcmVhSWQgPT09ICd1bmFzc2lnbmVkJykgcmV0dXJuIDE7XG4gICAgICBpZiAoYi5hcmVhSWQgPT09ICd1bmFzc2lnbmVkJykgcmV0dXJuIC0xO1xuXG4gICAgICAvLyBQcmlvcml0aXplIGJ5IGVudGl0eSBjb3VudFxuICAgICAgaWYgKGEuZW50aXR5Q291bnQgIT09IGIuZW50aXR5Q291bnQpIHtcbiAgICAgICAgcmV0dXJuIGIuZW50aXR5Q291bnQgLSBhLmVudGl0eUNvdW50O1xuICAgICAgfVxuXG4gICAgICAvLyBUaGVuIGJ5IGRldmljZSBjb3VudFxuICAgICAgcmV0dXJuIGIuZGV2aWNlQ291bnQgLSBhLmRldmljZUNvdW50O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBkZXZpY2UgZ3JvdXAgd2lkZ2V0cy5cbiAgICovXG4gIHByaXZhdGUgY3JlYXRlRGV2aWNlR3JvdXBzKGFyZWFzOiBBcmVhSW5mb1tdKTogV2lkZ2V0Q29uZmlnW10ge1xuICAgIGNvbnN0IGdyb3VwczogV2lkZ2V0Q29uZmlnW10gPSBbXTtcbiAgICBjb25zdCBhbGxFbnRpdGllczogc3RyaW5nW10gPSBbXTtcblxuICAgIC8vIENvbGxlY3QgYWxsIGVudGl0aWVzXG4gICAgZm9yIChjb25zdCBhcmVhIG9mIGFyZWFzKSB7XG4gICAgICBhbGxFbnRpdGllcy5wdXNoKC4uLmFyZWEuZW50aXRpZXMpO1xuICAgIH1cblxuICAgIC8vIEdyb3VwIGJ5IGRvbWFpblxuICAgIGNvbnN0IGVudGl0eUJ5RG9tYWluID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZ1tdPigpO1xuICAgIGZvciAoY29uc3QgZW50aXR5SWQgb2YgYWxsRW50aXRpZXMpIHtcbiAgICAgIGNvbnN0IGRvbWFpbiA9IGVudGl0eUlkLnNwbGl0KCcuJylbMF07XG4gICAgICBpZiAoIWVudGl0eUJ5RG9tYWluLmhhcyhkb21haW4pKSB7XG4gICAgICAgIGVudGl0eUJ5RG9tYWluLnNldChkb21haW4sIFtdKTtcbiAgICAgIH1cbiAgICAgIGVudGl0eUJ5RG9tYWluLmdldChkb21haW4pIS5wdXNoKGVudGl0eUlkKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgZ3JvdXBzIGZvciBzcGVjaWZpYyBkb21haW5zXG4gICAgY29uc3QgZ3JvdXBhYmxlRG9tYWlucyA9IFsnbGlnaHQnLCAnc3dpdGNoJywgJ2NvdmVyJywgJ2ZhbiddO1xuICAgIFxuICAgIGZvciAoY29uc3QgZG9tYWluIG9mIGdyb3VwYWJsZURvbWFpbnMpIHtcbiAgICAgIGNvbnN0IGVudGl0aWVzID0gZW50aXR5QnlEb21haW4uZ2V0KGRvbWFpbikgfHwgW107XG4gICAgICBpZiAoZW50aXRpZXMubGVuZ3RoID49IDMpIHsgIC8vIE9ubHkgY3JlYXRlIGdyb3VwIGlmIGVub3VnaCBlbnRpdGllc1xuICAgICAgICBncm91cHMucHVzaCh7XG4gICAgICAgICAgdHlwZTogJ2RldmljZS1ncm91cCcsXG4gICAgICAgICAgZW50aXRpZXM6IGVudGl0aWVzLFxuICAgICAgICAgIHRpdGxlOiBgQWxsICR7ZG9tYWlufXNgLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBjbGltYXRlIHdpZGdldC5cbiAgICovXG4gIHByaXZhdGUgY3JlYXRlQ2xpbWF0ZVdpZGdldChhcmVhczogQXJlYUluZm9bXSk6IFdpZGdldENvbmZpZyB8IG51bGwge1xuICAgIGNvbnN0IGNsaW1hdGVFbnRpdGllczogc3RyaW5nW10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgYXJlYSBvZiBhcmVhcykge1xuICAgICAgZm9yIChjb25zdCBlbnRpdHlJZCBvZiBhcmVhLmVudGl0aWVzKSB7XG4gICAgICAgIGlmIChlbnRpdHlJZC5zdGFydHNXaXRoKCdjbGltYXRlLicpIHx8XG4gICAgICAgICAgICBlbnRpdHlJZC5pbmNsdWRlcygndGVtcGVyYXR1cmUnKSB8fFxuICAgICAgICAgICAgZW50aXR5SWQuaW5jbHVkZXMoJ2h1bWlkaXR5JykpIHtcbiAgICAgICAgICBjbGltYXRlRW50aXRpZXMucHVzaChlbnRpdHlJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2xpbWF0ZUVudGl0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdjbGltYXRlJyxcbiAgICAgIGVudGl0aWVzOiBjbGltYXRlRW50aXRpZXMsXG4gICAgICB0aXRsZTogJ0NsaW1hdGUgQ29udHJvbCcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgcXVpY2sgY29udHJvbHMgd2lkZ2V0LlxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVRdWlja0NvbnRyb2xzV2lkZ2V0KGFyZWFzOiBBcmVhSW5mb1tdKTogV2lkZ2V0Q29uZmlnIHwgbnVsbCB7XG4gICAgY29uc3QgcXVpY2tFbnRpdGllczogc3RyaW5nW10gPSBbXTtcblxuICAgIC8vIEZpbmQgbW9zdCBpbXBvcnRhbnQgZW50aXRpZXMgKHNjZW5lcywgbWFpbiBsaWdodHMsIGV0Yy4pXG4gICAgZm9yIChjb25zdCBhcmVhIG9mIGFyZWFzKSB7XG4gICAgICBmb3IgKGNvbnN0IGVudGl0eUlkIG9mIGFyZWEuZW50aXRpZXMpIHtcbiAgICAgICAgaWYgKGVudGl0eUlkLnN0YXJ0c1dpdGgoJ3NjZW5lLicpIHx8XG4gICAgICAgICAgICBlbnRpdHlJZC5pbmNsdWRlcygnbWFpbicpIHx8XG4gICAgICAgICAgICBlbnRpdHlJZC5pbmNsdWRlcygnYWxsJykpIHtcbiAgICAgICAgICBxdWlja0VudGl0aWVzLnB1c2goZW50aXR5SWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGltaXQgdG8gcmVhc29uYWJsZSBudW1iZXJcbiAgICBjb25zdCBsaW1pdGVkRW50aXRpZXMgPSBxdWlja0VudGl0aWVzLnNsaWNlKDAsIDgpO1xuXG4gICAgaWYgKGxpbWl0ZWRFbnRpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAncXVpY2stY29udHJvbHMnLFxuICAgICAgZW50aXRpZXM6IGxpbWl0ZWRFbnRpdGllcyxcbiAgICAgIHRpdGxlOiAnUXVpY2sgQ29udHJvbHMnLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgbGF5b3V0LlxuICAgKi9cbiAgZ2V0Q3VycmVudExheW91dCgpOiBCYXNlTGF5b3V0IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudExheW91dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgd2lkZ2V0IHBvc2l0aW9ucyBmb3IgY3VycmVudCBsYXlvdXQuXG4gICAqL1xuICBjYWxjdWxhdGVQb3NpdGlvbnMoXG4gICAgd2lkZ2V0czogV2lkZ2V0Q29uZmlnW10sXG4gICAgYXJlYUNvdW50OiBudW1iZXJcbiAgKTogV2lkZ2V0UG9zaXRpb25bXSB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRMYXlvdXQpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignTm8gbGF5b3V0IHNlbGVjdGVkJyk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudExheW91dC5jYWxjdWxhdGVXaWRnZXRQb3NpdGlvbnMod2lkZ2V0cywgYXJlYUNvdW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgY29udGFpbmVyIHdpZHRoIGFuZCBjaGVjayBmb3IgYnJlYWtwb2ludCBjaGFuZ2VzLlxuICAgKi9cbiAgdXBkYXRlQ29udGFpbmVyV2lkdGgod2lkdGg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5jdXJyZW50TGF5b3V0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY3VycmVudExheW91dC51cGRhdGVDb250YWluZXJXaWR0aCh3aWR0aCk7XG4gIH1cbn0iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQnO1xuXG5leHBvcnQgY29uc3QgZGFzaHZpZXdUaGVtZSA9IGNzc2BcbiAgOmhvc3Qge1xuICAgIC0tZGFzaHZpZXctcHJpbWFyeS1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgLS1kYXNodmlldy1wcmltYXJ5LXRleHQtY29sb3I6IHZhcigtLXByaW1hcnktdGV4dC1jb2xvcik7XG4gICAgLS1kYXNodmlldy1zZWNvbmRhcnktdGV4dC1jb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgIC0tZGFzaHZpZXctZGlzYWJsZWQtdGV4dC1jb2xvcjogdmFyKC0tZGlzYWJsZWQtdGV4dC1jb2xvcik7XG4gICAgLS1kYXNodmlldy1kaXZpZGVyLWNvbG9yOiB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAtLWRhc2h2aWV3LWVycm9yLWNvbG9yOiB2YXIoLS1lcnJvci1jb2xvcik7XG4gICAgLS1kYXNodmlldy1zdWNjZXNzLWNvbG9yOiB2YXIoLS1zdWNjZXNzLWNvbG9yKTtcbiAgICAtLWRhc2h2aWV3LXdhcm5pbmctY29sb3I6IHZhcigtLXdhcm5pbmctY29sb3IpO1xuICAgIC0tZGFzaHZpZXctaW5mby1jb2xvcjogdmFyKC0taW5mby1jb2xvcik7XG4gICAgLS1kYXNodmlldy1iYWNrZ3JvdW5kOiB2YXIoLS1sb3ZlbGFjZS1iYWNrZ3JvdW5kLCB2YXIoLS1wcmltYXJ5LWJhY2tncm91bmQtY29sb3IpKTtcbiAgICAtLWRhc2h2aWV3LWNhcmQtYmFja2dyb3VuZDogdmFyKC0tY2FyZC1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgICAtLWRhc2h2aWV3LXNwYWNpbmcteHM6IDRweDtcbiAgICAtLWRhc2h2aWV3LXNwYWNpbmctc206IDhweDtcbiAgICAtLWRhc2h2aWV3LXNwYWNpbmctbWQ6IDE2cHg7XG4gICAgLS1kYXNodmlldy1zcGFjaW5nLWxnOiAyNHB4O1xuICAgIC0tZGFzaHZpZXctc3BhY2luZy14bDogMzJweDtcbiAgICAtLWRhc2h2aWV3LWJvcmRlci1yYWRpdXM6IHZhcigtLWhhLWNhcmQtYm9yZGVyLXJhZGl1cywgMTJweCk7XG4gICAgLS1kYXNodmlldy1ib3gtc2hhZG93OiB2YXIoLS1oYS1jYXJkLWJveC1zaGFkb3csIG5vbmUpO1xuICB9XG5gO1xuXG5leHBvcnQgY29uc3QgZGFzaHZpZXdTdHlsZXMgPSBjc3NgXG4gICoge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cblxuICAuZGFzaHZpZXctY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWRhc2h2aWV3LWJhY2tncm91bmQpO1xuICB9XG5cbiAgLmRhc2h2aWV3LWhlYWRlciB7XG4gICAgcGFkZGluZzogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1sZyk7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tZGFzaHZpZXctY2FyZC1iYWNrZ3JvdW5kKTtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tZGFzaHZpZXctZGl2aWRlci1jb2xvcik7XG4gICAgYm94LXNoYWRvdzogdmFyKC0tZGFzaHZpZXctYm94LXNoYWRvdyk7XG4gIH1cblxuICAuZGFzaHZpZXctY29udGVudCB7XG4gICAgZmxleDogMTtcbiAgICBwYWRkaW5nOiB2YXIoLS1kYXNodmlldy1zcGFjaW5nLWxnKTtcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xuICB9XG5cbiAgLmRhc2h2aWV3LWNhcmQge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWRhc2h2aWV3LWNhcmQtYmFja2dyb3VuZCk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tZGFzaHZpZXctYm9yZGVyLXJhZGl1cyk7XG4gICAgcGFkZGluZzogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1sZyk7XG4gICAgbWFyZ2luLWJvdHRvbTogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1tZCk7XG4gICAgYm94LXNoYWRvdzogdmFyKC0tZGFzaHZpZXctYm94LXNoYWRvdyk7XG4gIH1cblxuICAuZGFzaHZpZXctbG9hZGluZyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBjb2xvcjogdmFyKC0tZGFzaHZpZXctc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICB9XG5cbiAgLmRhc2h2aWV3LWVycm9yIHtcbiAgICBjb2xvcjogdmFyKC0tZGFzaHZpZXctZXJyb3ItY29sb3IpO1xuICAgIHBhZGRpbmc6IHZhcigtLWRhc2h2aWV3LXNwYWNpbmctbWQpO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgfVxuXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5kYXNodmlldy1oZWFkZXIge1xuICAgICAgcGFkZGluZzogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1tZCk7XG4gICAgfVxuXG4gICAgLmRhc2h2aWV3LWNvbnRlbnQge1xuICAgICAgcGFkZGluZzogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1tZCk7XG4gICAgfVxuICB9XG5gOyIsIi8qKlxuICogVG91Y2ggZ2VzdHVyZSB1dGlsaXRpZXMgZm9yIERhc2h2aWV3IFYyLlxuICogUHJvdmlkZXMgc3dpcGUgZGV0ZWN0aW9uLCBsb25nIHByZXNzIGhhbmRsaW5nLCBhbmQgaGFwdGljIGZlZWRiYWNrLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3dpcGVFdmVudCB7XG4gIGRpcmVjdGlvbjogJ2xlZnQnIHwgJ3JpZ2h0JyB8ICd1cCcgfCAnZG93bic7XG4gIGRpc3RhbmNlOiBudW1iZXI7XG4gIHZlbG9jaXR5OiBudW1iZXI7XG4gIGVsZW1lbnQ6IEVsZW1lbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9uZ1ByZXNzRXZlbnQge1xuICBlbGVtZW50OiBFbGVtZW50O1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXN0dXJlT3B0aW9ucyB7XG4gIHN3aXBlVGhyZXNob2xkPzogbnVtYmVyO1xuICBsb25nUHJlc3NEZWxheT86IG51bWJlcjtcbiAgdmVsb2NpdHlUaHJlc2hvbGQ/OiBudW1iZXI7XG4gIHByZXZlbnRTY3JvbGw/OiBib29sZWFuO1xufVxuXG5jb25zdCBERUZBVUxUX09QVElPTlM6IFJlcXVpcmVkPEdlc3R1cmVPcHRpb25zPiA9IHtcbiAgc3dpcGVUaHJlc2hvbGQ6IDUwLFxuICBsb25nUHJlc3NEZWxheTogNTAwLFxuICB2ZWxvY2l0eVRocmVzaG9sZDogMC4zLFxuICBwcmV2ZW50U2Nyb2xsOiBmYWxzZVxufTtcblxuZXhwb3J0IGNsYXNzIEdlc3R1cmVIYW5kbGVyIHtcbiAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50O1xuICBwcml2YXRlIG9wdGlvbnM6IFJlcXVpcmVkPEdlc3R1cmVPcHRpb25zPjtcbiAgcHJpdmF0ZSBzdGFydFggPSAwO1xuICBwcml2YXRlIHN0YXJ0WSA9IDA7XG4gIHByaXZhdGUgc3RhcnRUaW1lID0gMDtcbiAgcHJpdmF0ZSBsb25nUHJlc3NUaW1lb3V0PzogbnVtYmVyO1xuICBwcml2YXRlIGlzTG9uZ1ByZXNzID0gZmFsc2U7XG4gIHByaXZhdGUgaXNTd2lwaW5nID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBvblN3aXBlPzogKGV2ZW50OiBTd2lwZUV2ZW50KSA9PiB2b2lkO1xuICBwcml2YXRlIG9uTG9uZ1ByZXNzPzogKGV2ZW50OiBMb25nUHJlc3NFdmVudCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBvblRhcD86IChldmVudDogVG91Y2hFdmVudCkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50LCBvcHRpb25zOiBHZXN0dXJlT3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLkRFRkFVTFRfT1BUSU9OUywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICB9XG5cbiAgcHVibGljIG9uU3dpcGVEZXRlY3RlZChjYWxsYmFjazogKGV2ZW50OiBTd2lwZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vblN3aXBlID0gY2FsbGJhY2s7XG4gIH1cblxuICBwdWJsaWMgb25Mb25nUHJlc3NEZXRlY3RlZChjYWxsYmFjazogKGV2ZW50OiBMb25nUHJlc3NFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25Mb25nUHJlc3MgPSBjYWxsYmFjaztcbiAgfVxuXG4gIHB1YmxpYyBvblRhcERldGVjdGVkKGNhbGxiYWNrOiAoZXZlbnQ6IFRvdWNoRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uVGFwID0gY2FsbGJhY2s7XG4gIH1cblxuICBwcml2YXRlIGJpbmRFdmVudHMoKTogdm9pZCB7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQuYmluZCh0aGlzKSBhcyBFdmVudExpc3RlbmVyLCB7IHBhc3NpdmU6ICF0aGlzLm9wdGlvbnMucHJldmVudFNjcm9sbCB9KTtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUb3VjaE1vdmUuYmluZCh0aGlzKSBhcyBFdmVudExpc3RlbmVyLCB7IHBhc3NpdmU6ICF0aGlzLm9wdGlvbnMucHJldmVudFNjcm9sbCB9KTtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLmhhbmRsZVRvdWNoRW5kLmJpbmQodGhpcykgYXMgRXZlbnRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMuaGFuZGxlVG91Y2hDYW5jZWwuYmluZCh0aGlzKSBhcyBFdmVudExpc3RlbmVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZVRvdWNoU3RhcnQoZXZlbnQ6IFRvdWNoRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XG4gICAgdGhpcy5zdGFydFggPSB0b3VjaC5jbGllbnRYO1xuICAgIHRoaXMuc3RhcnRZID0gdG91Y2guY2xpZW50WTtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5pc0xvbmdQcmVzcyA9IGZhbHNlO1xuICAgIHRoaXMuaXNTd2lwaW5nID0gZmFsc2U7XG5cbiAgICAvLyBTdGFydCBsb25nIHByZXNzIHRpbWVyXG4gICAgaWYgKHRoaXMub25Mb25nUHJlc3MpIHtcbiAgICAgIHRoaXMubG9uZ1ByZXNzVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5pc0xvbmdQcmVzcyA9IHRydWU7XG4gICAgICAgIHRoaXMub25Mb25nUHJlc3MhKHtcbiAgICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgeDogdGhpcy5zdGFydFgsXG4gICAgICAgICAgeTogdGhpcy5zdGFydFlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJpZ2dlckhhcHRpY0ZlZWRiYWNrKCdtZWRpdW0nKTtcbiAgICAgIH0sIHRoaXMub3B0aW9ucy5sb25nUHJlc3NEZWxheSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUb3VjaE1vdmUoZXZlbnQ6IFRvdWNoRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0xvbmdQcmVzcykgcmV0dXJuO1xuXG4gICAgY29uc3QgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuICAgIGNvbnN0IGRlbHRhWCA9IE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLnN0YXJ0WCk7XG4gICAgY29uc3QgZGVsdGFZID0gTWF0aC5hYnModG91Y2guY2xpZW50WSAtIHRoaXMuc3RhcnRZKTtcblxuICAgIC8vIENhbmNlbCBsb25nIHByZXNzIGlmIG1vdmluZyB0b28gbXVjaFxuICAgIGlmICgoZGVsdGFYID4gMTAgfHwgZGVsdGFZID4gMTApICYmIHRoaXMubG9uZ1ByZXNzVGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubG9uZ1ByZXNzVGltZW91dCk7XG4gICAgICB0aGlzLmxvbmdQcmVzc1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gRGV0ZWN0IHN3aXBlIHN0YXJ0XG4gICAgaWYgKCF0aGlzLmlzU3dpcGluZyAmJiAoZGVsdGFYID4gdGhpcy5vcHRpb25zLnN3aXBlVGhyZXNob2xkIHx8IGRlbHRhWSA+IHRoaXMub3B0aW9ucy5zd2lwZVRocmVzaG9sZCkpIHtcbiAgICAgIHRoaXMuaXNTd2lwaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50U2Nyb2xsKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUb3VjaEVuZChldmVudDogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgZGVsdGFYID0gdG91Y2guY2xpZW50WCAtIHRoaXMuc3RhcnRYO1xuICAgIGNvbnN0IGRlbHRhWSA9IHRvdWNoLmNsaWVudFkgLSB0aGlzLnN0YXJ0WTtcbiAgICBjb25zdCBkdXJhdGlvbiA9IGVuZFRpbWUgLSB0aGlzLnN0YXJ0VGltZTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChkZWx0YVggKiBkZWx0YVggKyBkZWx0YVkgKiBkZWx0YVkpO1xuXG4gICAgLy8gQ2xlYXIgbG9uZyBwcmVzcyB0aW1lclxuICAgIGlmICh0aGlzLmxvbmdQcmVzc1RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxvbmdQcmVzc1RpbWVvdXQpO1xuICAgICAgdGhpcy5sb25nUHJlc3NUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzTG9uZ1ByZXNzKSB7XG4gICAgICAvLyBMb25nIHByZXNzIGFscmVhZHkgaGFuZGxlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3dpcGluZyAmJiBkaXN0YW5jZSA+PSB0aGlzLm9wdGlvbnMuc3dpcGVUaHJlc2hvbGQpIHtcbiAgICAgIC8vIEhhbmRsZSBzd2lwZVxuICAgICAgY29uc3QgdmVsb2NpdHkgPSBkaXN0YW5jZSAvIGR1cmF0aW9uO1xuICAgICAgXG4gICAgICBpZiAodmVsb2NpdHkgPj0gdGhpcy5vcHRpb25zLnZlbG9jaXR5VGhyZXNob2xkKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuZ2V0U3dpcGVEaXJlY3Rpb24oZGVsdGFYLCBkZWx0YVkpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMub25Td2lwZSkge1xuICAgICAgICAgIHRoaXMub25Td2lwZSh7XG4gICAgICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgICAgICBkaXN0YW5jZSxcbiAgICAgICAgICAgIHZlbG9jaXR5LFxuICAgICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRyaWdnZXJIYXB0aWNGZWVkYmFjaygnbGlnaHQnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU3dpcGluZyAmJiBkdXJhdGlvbiA8IDIwMCkge1xuICAgICAgLy8gSGFuZGxlIHRhcFxuICAgICAgaWYgKHRoaXMub25UYXApIHtcbiAgICAgICAgdGhpcy5vblRhcChldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUb3VjaENhbmNlbCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sb25nUHJlc3NUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5sb25nUHJlc3NUaW1lb3V0KTtcbiAgICAgIHRoaXMubG9uZ1ByZXNzVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTd2lwZURpcmVjdGlvbihkZWx0YVg6IG51bWJlciwgZGVsdGFZOiBudW1iZXIpOiAnbGVmdCcgfCAncmlnaHQnIHwgJ3VwJyB8ICdkb3duJyB7XG4gICAgY29uc3QgYWJzRGVsdGFYID0gTWF0aC5hYnMoZGVsdGFYKTtcbiAgICBjb25zdCBhYnNEZWx0YVkgPSBNYXRoLmFicyhkZWx0YVkpO1xuXG4gICAgaWYgKGFic0RlbHRhWCA+IGFic0RlbHRhWSkge1xuICAgICAgcmV0dXJuIGRlbHRhWCA+IDAgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVsdGFZID4gMCA/ICdkb3duJyA6ICd1cCc7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmlzTG9uZ1ByZXNzID0gZmFsc2U7XG4gICAgdGhpcy5pc1N3aXBpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgdHJpZ2dlckhhcHRpY0ZlZWRiYWNrKGludGVuc2l0eTogJ2xpZ2h0JyB8ICdtZWRpdW0nIHwgJ2hlYXZ5Jyk6IHZvaWQge1xuICAgIGlmICgndmlicmF0ZScgaW4gbmF2aWdhdG9yKSB7XG4gICAgICBjb25zdCBwYXR0ZXJucyA9IHtcbiAgICAgICAgbGlnaHQ6IDEwLFxuICAgICAgICBtZWRpdW06IDIwLFxuICAgICAgICBoZWF2eTogNTBcbiAgICAgIH07XG4gICAgICBuYXZpZ2F0b3IudmlicmF0ZShwYXR0ZXJuc1tpbnRlbnNpdHldKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5sb25nUHJlc3NUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5sb25nUHJlc3NUaW1lb3V0KTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQuYmluZCh0aGlzKSBhcyBFdmVudExpc3RlbmVyKTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUb3VjaE1vdmUuYmluZCh0aGlzKSBhcyBFdmVudExpc3RlbmVyKTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLmhhbmRsZVRvdWNoRW5kLmJpbmQodGhpcykgYXMgRXZlbnRMaXN0ZW5lcik7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5oYW5kbGVUb3VjaENhbmNlbC5iaW5kKHRoaXMpIGFzIEV2ZW50TGlzdGVuZXIpO1xuICB9XG59XG5cbi8qKlxuICogU2ltcGxlIHN3aXBlIGRldGVjdGlvbiBmb3IgZWxlbWVudHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFN3aXBlTGlzdGVuZXIoXG4gIGVsZW1lbnQ6IEVsZW1lbnQsXG4gIGNhbGxiYWNrOiAoZXZlbnQ6IFN3aXBlRXZlbnQpID0+IHZvaWQsXG4gIG9wdGlvbnM/OiBHZXN0dXJlT3B0aW9uc1xuKTogKCkgPT4gdm9pZCB7XG4gIGNvbnN0IGhhbmRsZXIgPSBuZXcgR2VzdHVyZUhhbmRsZXIoZWxlbWVudCwgb3B0aW9ucyk7XG4gIGhhbmRsZXIub25Td2lwZURldGVjdGVkKGNhbGxiYWNrKTtcbiAgXG4gIHJldHVybiAoKSA9PiBoYW5kbGVyLmRlc3Ryb3koKTtcbn1cblxuLyoqXG4gKiBTaW1wbGUgbG9uZyBwcmVzcyBkZXRlY3Rpb24gZm9yIGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRMb25nUHJlc3NMaXN0ZW5lcihcbiAgZWxlbWVudDogRWxlbWVudCxcbiAgY2FsbGJhY2s6IChldmVudDogTG9uZ1ByZXNzRXZlbnQpID0+IHZvaWQsXG4gIG9wdGlvbnM/OiBHZXN0dXJlT3B0aW9uc1xuKTogKCkgPT4gdm9pZCB7XG4gIGNvbnN0IGhhbmRsZXIgPSBuZXcgR2VzdHVyZUhhbmRsZXIoZWxlbWVudCwgb3B0aW9ucyk7XG4gIGhhbmRsZXIub25Mb25nUHJlc3NEZXRlY3RlZChjYWxsYmFjayk7XG4gIFxuICByZXR1cm4gKCkgPT4gaGFuZGxlci5kZXN0cm95KCk7XG59XG5cbi8qKlxuICogSGFwdGljIGZlZWRiYWNrIHV0aWxpdGllc1xuICovXG5leHBvcnQgY2xhc3MgSGFwdGljRmVlZGJhY2sge1xuICBwcml2YXRlIHN0YXRpYyBpc1N1cHBvcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gJ3ZpYnJhdGUnIGluIG5hdmlnYXRvcjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbGlnaHQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgbmF2aWdhdG9yLnZpYnJhdGUoMTApO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWVkaXVtKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIG5hdmlnYXRvci52aWJyYXRlKDIwKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGhlYXZ5KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIG5hdmlnYXRvci52aWJyYXRlKFs1MCwgNTAsIDUwXSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBzdWNjZXNzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIG5hdmlnYXRvci52aWJyYXRlKFsxMCwgMTAwLCAxMF0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZXJyb3IoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgbmF2aWdhdG9yLnZpYnJhdGUoWzEwMCwgNTAsIDEwMCwgNTAsIDEwMF0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgc2VsZWN0aW9uKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU3VwcG9ydGVkKCkpIHtcbiAgICAgIG5hdmlnYXRvci52aWJyYXRlKDUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY3VzdG9tKHBhdHRlcm46IG51bWJlciB8IG51bWJlcltdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgbmF2aWdhdG9yLnZpYnJhdGUocGF0dGVybik7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVG91Y2ggdGFyZ2V0IHNpemUgaGVscGVyc1xuICovXG5leHBvcnQgY29uc3QgVG91Y2hUYXJnZXQgPSB7XG4gIC8qKlxuICAgKiBNaW5pbXVtIHRvdWNoIHRhcmdldCBzaXplICg0NHB4KSBhcyBwZXIgV0NBRyBndWlkZWxpbmVzXG4gICAqL1xuICBNSU5fU0laRTogNDQsXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGVsZW1lbnQgbWVldHMgbWluaW11bSB0b3VjaCB0YXJnZXQgcmVxdWlyZW1lbnRzXG4gICAqL1xuICBtZWV0c01pbmltdW1TaXplKGVsZW1lbnQ6IEVsZW1lbnQpOiBib29sZWFuIHtcbiAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gcmVjdC53aWR0aCA+PSB0aGlzLk1JTl9TSVpFICYmIHJlY3QuaGVpZ2h0ID49IHRoaXMuTUlOX1NJWkU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZCB0b3VjaCB0YXJnZXQgcGFkZGluZyB0byBhbiBlbGVtZW50IGlmIG5lZWRlZFxuICAgKi9cbiAgZW5zdXJlTWluaW11bVNpemUoZWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBcbiAgICBpZiAocmVjdC53aWR0aCA8IHRoaXMuTUlOX1NJWkUpIHtcbiAgICAgIGNvbnN0IHBhZGRpbmcgPSAodGhpcy5NSU5fU0laRSAtIHJlY3Qud2lkdGgpIC8gMjtcbiAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBgJHtwYWRkaW5nfXB4YDtcbiAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7cGFkZGluZ31weGA7XG4gICAgfVxuICAgIFxuICAgIGlmIChyZWN0LmhlaWdodCA8IHRoaXMuTUlOX1NJWkUpIHtcbiAgICAgIGNvbnN0IHBhZGRpbmcgPSAodGhpcy5NSU5fU0laRSAtIHJlY3QuaGVpZ2h0KSAvIDI7XG4gICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdUb3AgPSBgJHtwYWRkaW5nfXB4YDtcbiAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ0JvdHRvbSA9IGAke3BhZGRpbmd9cHhgO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXN0dXJlLWVuYWJsZWQgYmFzZSBjbGFzcyBmb3IgTGl0IGVsZW1lbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBHZXN0dXJlRWxlbWVudCBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgcHJpdmF0ZSBnZXN0dXJlSGFuZGxlcj86IEdlc3R1cmVIYW5kbGVyO1xuXG4gIHByb3RlY3RlZCBlbmFibGVHZXN0dXJlcyhlbGVtZW50OiBFbGVtZW50LCBvcHRpb25zPzogR2VzdHVyZU9wdGlvbnMpOiB2b2lkIHtcbiAgICB0aGlzLmdlc3R1cmVIYW5kbGVyID0gbmV3IEdlc3R1cmVIYW5kbGVyKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIFxuICAgIHRoaXMuZ2VzdHVyZUhhbmRsZXIub25Td2lwZURldGVjdGVkKChldmVudCkgPT4ge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZ2VzdHVyZS1zd2lwZScsIHsgZGV0YWlsOiBldmVudCB9KSk7XG4gICAgfSk7XG4gICAgXG4gICAgdGhpcy5nZXN0dXJlSGFuZGxlci5vbkxvbmdQcmVzc0RldGVjdGVkKChldmVudCkgPT4ge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZ2VzdHVyZS1sb25ncHJlc3MnLCB7IGRldGFpbDogZXZlbnQgfSkpO1xuICAgIH0pO1xuICAgIFxuICAgIHRoaXMuZ2VzdHVyZUhhbmRsZXIub25UYXBEZXRlY3RlZCgoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2dlc3R1cmUtdGFwJywgeyBkZXRhaWw6IGV2ZW50IH0pKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkaXNhYmxlR2VzdHVyZXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZ2VzdHVyZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMuZ2VzdHVyZUhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgdGhpcy5nZXN0dXJlSGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn0iLCIvKipcbiAqIEFuaW1hdGlvbiBjb25zdGFudHMgYW5kIHV0aWxpdGllcyBmb3IgRGFzaHZpZXcgVjIgd2lkZ2V0cy5cbiAqIFByb3ZpZGVzIGNvbnNpc3RlbnQgdGltaW5nLCBlYXNpbmcsIGFuZCBrZXlmcmFtZSBhbmltYXRpb25zLlxuICovXG5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdCc7XG5cbmV4cG9ydCBjb25zdCBBTklNQVRJT05fRFVSQVRJT04gPSB7XG4gIGZhc3Q6ICcxNTBtcycsXG4gIG5vcm1hbDogJzI1MG1zJyxcbiAgc2xvdzogJzM1MG1zJ1xufTtcblxuZXhwb3J0IGNvbnN0IEVBU0lORyA9IHtcbiAgc3RhbmRhcmQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLjAsIDAuMiwgMSknLFxuICBkZWNlbGVyYXRlOiAnY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpJyxcbiAgYWNjZWxlcmF0ZTogJ2N1YmljLWJlemllcigwLjQsIDAuMCwgMSwgMSknLFxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAuMCwgMC42LCAxKSdcbn07XG5cbi8qKlxuICogU2tlbGV0b24gbG9hZGluZyBhbmltYXRpb24gc3R5bGVzXG4gKi9cbmV4cG9ydCBjb25zdCBza2VsZXRvblN0eWxlcyA9IGNzc2BcbiAgQGtleWZyYW1lcyBza2VsZXRvbi1sb2FkaW5nIHtcbiAgICAwJSB7IGJhY2tncm91bmQtcG9zaXRpb246IC0yMDAlIDA7IH1cbiAgICAxMDAlIHsgYmFja2dyb3VuZC1wb3NpdGlvbjogMjAwJSAwOyB9XG4gIH1cbiAgXG4gIC5za2VsZXRvbiB7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxuICAgICAgOTBkZWcsXG4gICAgICB2YXIoLS1jYXJkLWJhY2tncm91bmQtY29sb3IpIDAlLFxuICAgICAgdmFyKC0tZGl2aWRlci1jb2xvcikgNTAlLFxuICAgICAgdmFyKC0tY2FyZC1iYWNrZ3JvdW5kLWNvbG9yKSAxMDAlXG4gICAgKTtcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDIwMCUgMTAwJTtcbiAgICBhbmltYXRpb246IHNrZWxldG9uLWxvYWRpbmcgMS41cyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIH1cbiAgXG4gIC5za2VsZXRvbi10ZXh0IHtcbiAgICBoZWlnaHQ6IDE2cHg7XG4gICAgbWFyZ2luOiA0cHggMDtcbiAgfVxuICBcbiAgLnNrZWxldG9uLXRleHQubGFyZ2Uge1xuICAgIGhlaWdodDogMjBweDtcbiAgfVxuICBcbiAgLnNrZWxldG9uLXRleHQuc21hbGwge1xuICAgIGhlaWdodDogMTJweDtcbiAgfVxuICBcbiAgLnNrZWxldG9uLWJ1dHRvbiB7XG4gICAgaGVpZ2h0OiAzNnB4O1xuICAgIHdpZHRoOiAxMDBweDtcbiAgfVxuICBcbiAgLnNrZWxldG9uLWljb24ge1xuICAgIHdpZHRoOiAyNHB4O1xuICAgIGhlaWdodDogMjRweDtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIH1cbiAgXG4gIC5za2VsZXRvbi1jYXJkIHtcbiAgICBoZWlnaHQ6IDEyMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgfVxuYDtcblxuLyoqXG4gKiBTbW9vdGggZXhwYW5kL2NvbGxhcHNlIGFuaW1hdGlvbiBzdHlsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGV4cGFuZENvbGxhcHNlU3R5bGVzID0gY3NzYFxuICBAa2V5ZnJhbWVzIGV4cGFuZCB7XG4gICAgZnJvbSB7XG4gICAgICBtYXgtaGVpZ2h0OiAwO1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gICAgdG8ge1xuICAgICAgbWF4LWhlaWdodDogNjAwcHg7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgfVxuICBcbiAgQGtleWZyYW1lcyBjb2xsYXBzZSB7XG4gICAgZnJvbSB7XG4gICAgICBtYXgtaGVpZ2h0OiA2MDBweDtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgfVxuICAgIHRvIHtcbiAgICAgIG1heC1oZWlnaHQ6IDA7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cbiAgfVxuICBcbiAgLmV4cGFuZC1lbnRlciB7XG4gICAgYW5pbWF0aW9uOiBleHBhbmQgMjUwbXMgY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cbiAgXG4gIC5jb2xsYXBzZS1leGl0IHtcbiAgICBhbmltYXRpb246IGNvbGxhcHNlIDI1MG1zIGN1YmljLWJlemllcigwLjQsIDAuMCwgMSwgMSk7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgfVxuICBcbiAgLmNvbnRlbnQtZXhwYW5kYWJsZSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0cmFuc2l0aW9uOiBtYXgtaGVpZ2h0IDI1MG1zIGN1YmljLWJlemllcigwLjAsIDAuMCwgMC4yLCAxKTtcbiAgfVxuICBcbiAgLmNvbnRlbnQtY29sbGFwc2VkIHtcbiAgICBtYXgtaGVpZ2h0OiAwO1xuICB9XG4gIFxuICAuY29udGVudC1leHBhbmRlZCB7XG4gICAgbWF4LWhlaWdodDogNjAwcHg7XG4gIH1cbmA7XG5cbi8qKlxuICogVG91Y2ggaW50ZXJhY3Rpb24gYW5pbWF0aW9uc1xuICovXG5leHBvcnQgY29uc3QgdG91Y2hTdHlsZXMgPSBjc3NgXG4gIEBrZXlmcmFtZXMgdG91Y2gtZmVlZGJhY2sge1xuICAgIDAlIHsgdHJhbnNmb3JtOiBzY2FsZSgxKTsgfVxuICAgIDUwJSB7IHRyYW5zZm9ybTogc2NhbGUoMC45NSk7IH1cbiAgICAxMDAlIHsgdHJhbnNmb3JtOiBzY2FsZSgxKTsgfVxuICB9XG4gIFxuICAudG91Y2gtdGFyZ2V0IHtcbiAgICBtaW4taGVpZ2h0OiA0NHB4O1xuICAgIG1pbi13aWR0aDogNDRweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpO1xuICB9XG4gIFxuICAudG91Y2gtdGFyZ2V0OmFjdGl2ZSB7XG4gICAgYW5pbWF0aW9uOiB0b3VjaC1mZWVkYmFjayAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLjAsIDAuMiwgMSk7XG4gIH1cbiAgXG4gIC50b3VjaC10YXJnZXQ6aG92ZXIge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgfVxuICBcbiAgQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcbiAgICAudG91Y2gtdGFyZ2V0OmFjdGl2ZSB7XG4gICAgICBhbmltYXRpb246IG5vbmU7XG4gICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuOTgpO1xuICAgIH1cbiAgfVxuYDtcblxuLyoqXG4gKiBMb2FkaW5nIHNwaW5uZXIgYW5pbWF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBzcGlubmVyU3R5bGVzID0gY3NzYFxuICBAa2V5ZnJhbWVzIHNwaW4ge1xuICAgIGZyb20geyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxuICAgIHRvIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfVxuICB9XG4gIFxuICAuc3Bpbm5lciB7XG4gICAgYW5pbWF0aW9uOiBzcGluIDFzIGxpbmVhciBpbmZpbml0ZTtcbiAgfVxuICBcbiAgLmxvYWRpbmctZG90cyB7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgZ2FwOiA0cHg7XG4gIH1cbiAgXG4gIC5sb2FkaW5nLWRvdHM6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBhbmltYXRpb246IGxvYWRpbmctZG90cyAxLjVzIGVhc2UtaW4tb3V0IGluZmluaXRlO1xuICB9XG4gIFxuICBAa2V5ZnJhbWVzIGxvYWRpbmctZG90cyB7XG4gICAgMCUsIDIwJSB7IGNvbnRlbnQ6ICcnOyB9XG4gICAgNDAlIHsgY29udGVudDogJy4nOyB9XG4gICAgNjAlIHsgY29udGVudDogJy4uJzsgfVxuICAgIDgwJSwgMTAwJSB7IGNvbnRlbnQ6ICcuLi4nOyB9XG4gIH1cbmA7XG5cbi8qKlxuICogRmFkZSBpbi9vdXQgYW5pbWF0aW9uc1xuICovXG5leHBvcnQgY29uc3QgZmFkZVN0eWxlcyA9IGNzc2BcbiAgQGtleWZyYW1lcyBmYWRlLWluIHtcbiAgICBmcm9tIHsgb3BhY2l0eTogMDsgfVxuICAgIHRvIHsgb3BhY2l0eTogMTsgfVxuICB9XG4gIFxuICBAa2V5ZnJhbWVzIGZhZGUtb3V0IHtcbiAgICBmcm9tIHsgb3BhY2l0eTogMTsgfVxuICAgIHRvIHsgb3BhY2l0eTogMDsgfVxuICB9XG4gIFxuICAuZmFkZS1pbiB7XG4gICAgYW5pbWF0aW9uOiBmYWRlLWluIDI1MG1zIGN1YmljLWJlemllcigwLjAsIDAuMCwgMC4yLCAxKTtcbiAgfVxuICBcbiAgLmZhZGUtb3V0IHtcbiAgICBhbmltYXRpb246IGZhZGUtb3V0IDI1MG1zIGN1YmljLWJlemllcigwLjQsIDAuMCwgMSwgMSk7XG4gIH1cbiAgXG4gIC5mYWRlLXRyYW5zaXRpb24ge1xuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMjUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpO1xuICB9XG5gO1xuXG4vKipcbiAqIFNsaWRlIGFuaW1hdGlvbnMgZm9yIG1vYmlsZSBpbnRlcmFjdGlvbnNcbiAqL1xuZXhwb3J0IGNvbnN0IHNsaWRlU3R5bGVzID0gY3NzYFxuICBAa2V5ZnJhbWVzIHNsaWRlLWluLXJpZ2h0IHtcbiAgICBmcm9tIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMCUpOyB9XG4gICAgdG8geyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCk7IH1cbiAgfVxuICBcbiAgQGtleWZyYW1lcyBzbGlkZS1pbi1sZWZ0IHtcbiAgICBmcm9tIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTsgfVxuICAgIHRvIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApOyB9XG4gIH1cbiAgXG4gIEBrZXlmcmFtZXMgc2xpZGUtb3V0LXJpZ2h0IHtcbiAgICBmcm9tIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDApOyB9XG4gICAgdG8geyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwJSk7IH1cbiAgfVxuICBcbiAgQGtleWZyYW1lcyBzbGlkZS1vdXQtbGVmdCB7XG4gICAgZnJvbSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwKTsgfVxuICAgIHRvIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDAlKTsgfVxuICB9XG4gIFxuICAuc2xpZGUtaW4tcmlnaHQge1xuICAgIGFuaW1hdGlvbjogc2xpZGUtaW4tcmlnaHQgMjUwbXMgY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpO1xuICB9XG4gIFxuICAuc2xpZGUtaW4tbGVmdCB7XG4gICAgYW5pbWF0aW9uOiBzbGlkZS1pbi1sZWZ0IDI1MG1zIGN1YmljLWJlemllcigwLjAsIDAuMCwgMC4yLCAxKTtcbiAgfVxuICBcbiAgLnNsaWRlLW91dC1yaWdodCB7XG4gICAgYW5pbWF0aW9uOiBzbGlkZS1vdXQtcmlnaHQgMjUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAxLCAxKTtcbiAgfVxuICBcbiAgLnNsaWRlLW91dC1sZWZ0IHtcbiAgICBhbmltYXRpb246IHNsaWRlLW91dC1sZWZ0IDI1MG1zIGN1YmljLWJlemllcigwLjQsIDAuMCwgMSwgMSk7XG4gIH1cbmA7XG5cbi8qKlxuICogQ29tYmluZWQgYW5pbWF0aW9uIHN0eWxlcyBmb3IgZWFzeSBpbXBvcnRcbiAqL1xuZXhwb3J0IGNvbnN0IGFuaW1hdGlvblN0eWxlcyA9IGNzc2BcbiAgJHtza2VsZXRvblN0eWxlc31cbiAgJHtleHBhbmRDb2xsYXBzZVN0eWxlc31cbiAgJHt0b3VjaFN0eWxlc31cbiAgJHtzcGlubmVyU3R5bGVzfVxuICAke2ZhZGVTdHlsZXN9XG4gICR7c2xpZGVTdHlsZXN9XG4gIFxuICAvKiBSZXNwZWN0IHVzZXIncyBtb3Rpb24gcHJlZmVyZW5jZXMgKi9cbiAgQG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpIHtcbiAgICAqIHtcbiAgICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC4wMW1zICFpbXBvcnRhbnQ7XG4gICAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAxICFpbXBvcnRhbnQ7XG4gICAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjAxbXMgIWltcG9ydGFudDtcbiAgICB9XG4gIH1cbmA7IiwiLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgRGFzaHZpZXcgd2lkZ2V0cy5cbiAqIFByb3ZpZGVzIGxpZmVjeWNsZSBtYW5hZ2VtZW50LCBzdGF0ZSBoYW5kbGluZywgYW5kIHZpc2liaWxpdHkgdHJhY2tpbmcuXG4gKi9cblxuaW1wb3J0IHsgUHJvcGVydHlWYWx1ZXMsIGNzcyB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBwcm9wZXJ0eSwgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBEYXNodmlld0Jhc2VFbGVtZW50IH0gZnJvbSAnLi9iYXNlLWVsZW1lbnQnO1xuaW1wb3J0IHsgU3RhdGVEaWZmLCBTdGF0ZU1hbmFnZXIgfSBmcm9tICcuL3N0YXRlLW1hbmFnZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9IGZyb20gJy4vc3Vic2NyaXB0aW9uLW1hbmFnZXInO1xuaW1wb3J0IHsgSGFwdGljRmVlZGJhY2sgfSBmcm9tICcuLi91dGlscy9nZXN0dXJlcyc7XG5pbXBvcnQgeyBBTklNQVRJT05fRFVSQVRJT04sIEVBU0lORyB9IGZyb20gJy4uL3N0eWxlcy9hbmltYXRpb25zJztcbmltcG9ydCB0eXBlIHsgSG9tZUFzc2lzdGFudCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBXaWRnZXRDb25maWcge1xuICB0eXBlOiAncm9vbScgfCAnZGV2aWNlLWdyb3VwJyB8ICdjbGltYXRlJyB8ICdxdWljay1jb250cm9scyc7XG4gIGVudGl0aWVzOiBzdHJpbmdbXTtcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGxheW91dD86IHtcbiAgICBncmlkQ29sdW1uPzogc3RyaW5nO1xuICAgIGdyaWRSb3c/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEYXNodmlld1dpZGdldCBleHRlbmRzIERhc2h2aWV3QmFzZUVsZW1lbnQge1xuICBAcHJvcGVydHkoeyB0eXBlOiBPYmplY3QgfSkgd2lkZ2V0Q29uZmlnITogV2lkZ2V0Q29uZmlnO1xuICBAc3RhdGUoKSBwcm90ZWN0ZWQgZW50aXR5U3RhdGVzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcCgpO1xuICBAc3RhdGUoKSBwcm90ZWN0ZWQgaXNWaXNpYmxlID0gZmFsc2U7XG4gIEBzdGF0ZSgpIHByb3RlY3RlZCBpc0xvYWRpbmcgPSB0cnVlO1xuICBAc3RhdGUoKSBwcm90ZWN0ZWQgZXJyb3I6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIHByaXZhdGUgc3RhdGVNYW5hZ2VyPzogU3RhdGVNYW5hZ2VyO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbk1hbmFnZXI/OiBTdWJzY3JpcHRpb25NYW5hZ2VyO1xuICBwcml2YXRlIGludGVyc2VjdGlvbk9ic2VydmVyPzogSW50ZXJzZWN0aW9uT2JzZXJ2ZXI7XG4gIHByaXZhdGUgc3RhdGVVbnN1YnNjcmliZXJzOiAoKCkgPT4gdm9pZClbXSA9IFtdO1xuICBwcml2YXRlIGtleWJvYXJkSGFuZGxlcnM6IE1hcDxzdHJpbmcsIChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZD4gPSBuZXcgTWFwKCk7XG4gIHByaXZhdGUgYW5pbWF0aW9uRnJhbWVJZD86IG51bWJlcjtcblxuICAvKipcbiAgICogR2V0IHRoZSBsaXN0IG9mIGVudGl0eSBJRHMgdGhpcyB3aWRnZXQgd2FudHMgdG8gc3Vic2NyaWJlIHRvLlxuICAgKiBDYW4gYmUgb3ZlcnJpZGRlbiBieSBzdWJjbGFzc2VzIGZvciBkeW5hbWljIHN1YnNjcmlwdGlvbnMuXG4gICAqL1xuICBwcm90ZWN0ZWQgc3Vic2NyaWJlZEVudGl0aWVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy53aWRnZXRDb25maWc/LmVudGl0aWVzIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHdpZGdldCBjb25maWd1cmF0aW9uIGlzIHNldC5cbiAgICogU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdG8gdmFsaWRhdGUgdGhlaXIgc3BlY2lmaWMgY29uZmlnLlxuICAgKi9cbiAgc2V0Q29uZmlnKGNvbmZpZzogV2lkZ2V0Q29uZmlnKTogdm9pZCB7XG4gICAgaWYgKCFjb25maWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb25maWd1cmF0aW9uJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGVycm9ycyA9IHRoaXMudmFsaWRhdGVDb25maWcoY29uZmlnKTtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ29uZmlndXJhdGlvbiBlcnJvcnM6ICR7ZXJyb3JzLmpvaW4oJywgJyl9YCk7XG4gICAgfVxuXG4gICAgdGhpcy53aWRnZXRDb25maWcgPSBjb25maWc7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgd2lkZ2V0IGNvbmZpZ3VyYXRpb24uXG4gICAqIFJldHVybnMgYXJyYXkgb2YgZXJyb3IgbWVzc2FnZXMsIGVtcHR5IGlmIHZhbGlkLlxuICAgKi9cbiAgcHJvdGVjdGVkIHZhbGlkYXRlQ29uZmlnKGNvbmZpZzogV2lkZ2V0Q29uZmlnKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmICghY29uZmlnLnR5cGUpIHtcbiAgICAgIGVycm9ycy5wdXNoKCdXaWRnZXQgdHlwZSBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIGlmICghY29uZmlnLmVudGl0aWVzIHx8ICFBcnJheS5pc0FycmF5KGNvbmZpZy5lbnRpdGllcykpIHtcbiAgICAgIGVycm9ycy5wdXNoKCdFbnRpdGllcyBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9ycztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGVmYXVsdCBjb25maWd1cmF0aW9uIGZvciB0aGlzIHdpZGdldCB0eXBlLlxuICAgKiBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0byBwcm92aWRlIHNlbnNpYmxlIGRlZmF1bHRzLlxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldERlZmF1bHRDb25maWcoKTogUGFydGlhbDxXaWRnZXRDb25maWc+O1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBlbnRpdHkgc3RhdGUgY2hhbmdlcy5cbiAgICogU3ViY2xhc3NlcyBjYW4gb3ZlcnJpZGUgdG8gaGFuZGxlIHN0YXRlIGNoYW5nZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgb25TdGF0ZUNoYW5nZWQoXG4gICAgZW50aXR5SWQ6IHN0cmluZyxcbiAgICBuZXdTdGF0ZTogYW55LFxuICAgIG9sZFN0YXRlOiBhbnlcbiAgKTogdm9pZCB7XG4gICAgLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB1cGRhdGVzIHRoZSBsb2NhbCBzdGF0ZSBtYXBcbiAgICBpZiAobmV3U3RhdGUpIHtcbiAgICAgIHRoaXMuZW50aXR5U3RhdGVzLnNldChlbnRpdHlJZCwgbmV3U3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVudGl0eVN0YXRlcy5kZWxldGUoZW50aXR5SWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaWZlY3ljbGU6IENhbGxlZCB3aGVuIGVsZW1lbnQgaXMgYWRkZWQgdG8gRE9NLlxuICAgKi9cbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLnNldHVwVmlzaWJpbGl0eU9ic2VydmVyKCk7XG4gICAgdGhpcy5zZXR1cEtleWJvYXJkSGFuZGxlcnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaWZlY3ljbGU6IENhbGxlZCBhZnRlciBmaXJzdCB1cGRhdGUuXG4gICAqL1xuICBwcm90ZWN0ZWQgZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wczogUHJvcGVydHlWYWx1ZXMpOiB2b2lkIHtcbiAgICBzdXBlci5maXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BzKTtcbiAgICB0aGlzLmluaXRpYWxpemVXaWRnZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaWZlY3ljbGU6IENhbGxlZCB3aGVuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIERPTS5cbiAgICovXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgd2lkZ2V0LlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBpbml0aWFsaXplV2lkZ2V0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICB0aGlzLmVycm9yID0gbnVsbDtcblxuICAgICAgLy8gR2V0IG1hbmFnZXJzIGZyb20gZGFzaGJvYXJkIGNvbnRleHRcbiAgICAgIHRoaXMuc3RhdGVNYW5hZ2VyID0gdGhpcy5nZXRTdGF0ZU1hbmFnZXIoKTtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uTWFuYWdlciA9IHRoaXMuZ2V0U3Vic2NyaXB0aW9uTWFuYWdlcigpO1xuXG4gICAgICBpZiAoIXRoaXMuc3RhdGVNYW5hZ2VyIHx8ICF0aGlzLnN1YnNjcmlwdGlvbk1hbmFnZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGF0ZSBvciBzdWJzY3JpcHRpb24gbWFuYWdlciBub3QgYXZhaWxhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIExvYWQgaW5pdGlhbCBlbnRpdHkgc3RhdGVzXG4gICAgICBhd2FpdCB0aGlzLmxvYWRJbml0aWFsU3RhdGVzKCk7XG5cbiAgICAgIC8vIFN1YnNjcmliZSB0byBzdGF0ZSBjaGFuZ2VzXG4gICAgICB0aGlzLnN1YnNjcmliZVRvU3RhdGVDaGFuZ2VzKCk7XG5cbiAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJztcbiAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yIGFzIEVycm9yLCAnV2lkZ2V0IGluaXRpYWxpemF0aW9uJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdGF0ZSBtYW5hZ2VyIGZyb20gZGFzaGJvYXJkIGNvbnRleHQuXG4gICAqIFRoaXMgc2hvdWxkIGJlIHByb3ZpZGVkIGJ5IHRoZSBwYXJlbnQgZGFzaGJvYXJkLlxuICAgKi9cbiAgcHJpdmF0ZSBnZXRTdGF0ZU1hbmFnZXIoKTogU3RhdGVNYW5hZ2VyIHwgdW5kZWZpbmVkIHtcbiAgICAvLyBUcnkgdG8gZ2V0IGZyb20gcGFyZW50IGRhc2hib2FyZCBlbGVtZW50XG4gICAgY29uc3QgZGFzaGJvYXJkID0gdGhpcy5jbG9zZXN0KCdkYXNodmlldy1kYXNoYm9hcmQnKTtcbiAgICByZXR1cm4gKGRhc2hib2FyZCBhcyBhbnkpPy5zdGF0ZU1hbmFnZXI7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHN1YnNjcmlwdGlvbiBtYW5hZ2VyIGZyb20gZGFzaGJvYXJkIGNvbnRleHQuXG4gICAqL1xuICBwcml2YXRlIGdldFN1YnNjcmlwdGlvbk1hbmFnZXIoKTogU3Vic2NyaXB0aW9uTWFuYWdlciB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgZGFzaGJvYXJkID0gdGhpcy5jbG9zZXN0KCdkYXNodmlldy1kYXNoYm9hcmQnKTtcbiAgICByZXR1cm4gKGRhc2hib2FyZCBhcyBhbnkpPy5zdWJzY3JpcHRpb25NYW5hZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgaW5pdGlhbCBzdGF0ZXMgZm9yIGFsbCBlbnRpdGllcy5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgbG9hZEluaXRpYWxTdGF0ZXMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLnN1YnNjcmliZWRFbnRpdGllcygpO1xuICAgIFxuICAgIGZvciAoY29uc3QgZW50aXR5SWQgb2YgZW50aXRpZXMpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5oYXNzLnN0YXRlc1tlbnRpdHlJZF07XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5lbnRpdHlTdGF0ZXMuc2V0KGVudGl0eUlkLCBzdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byBzdGF0ZSBjaGFuZ2VzIGZvciBvdXIgZW50aXRpZXMuXG4gICAqL1xuICBwcml2YXRlIHN1YnNjcmliZVRvU3RhdGVDaGFuZ2VzKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zdGF0ZU1hbmFnZXIpIHJldHVybjtcblxuICAgIGNvbnN0IGVudGl0aWVzID0gdGhpcy5zdWJzY3JpYmVkRW50aXRpZXMoKTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGVudGl0eUlkIG9mIGVudGl0aWVzKSB7XG4gICAgICBjb25zdCB1bnN1YnNjcmliZSA9IHRoaXMuc3RhdGVNYW5hZ2VyLnN1YnNjcmliZVRvRW50aXR5KFxuICAgICAgICBlbnRpdHlJZCxcbiAgICAgICAgKGRpZmY6IFN0YXRlRGlmZikgPT4ge1xuICAgICAgICAgIHRoaXMub25TdGF0ZUNoYW5nZWQoXG4gICAgICAgICAgICBkaWZmLmVudGl0eUlkLFxuICAgICAgICAgICAgZGlmZi5uZXdTdGF0ZSxcbiAgICAgICAgICAgIGRpZmYub2xkU3RhdGVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgdGhpcy5zdGF0ZVVuc3Vic2NyaWJlcnMucHVzaCh1bnN1YnNjcmliZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIGludGVyc2VjdGlvbiBvYnNlcnZlciBmb3IgdmlzaWJpbGl0eSB0cmFja2luZy5cbiAgICovXG4gIHByaXZhdGUgc2V0dXBWaXNpYmlsaXR5T2JzZXJ2ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihcbiAgICAgIChlbnRyaWVzKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICAgIGlmIChlbnRyeS50YXJnZXQgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZShlbnRyeS5pc0ludGVyc2VjdGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICByb290OiBudWxsLFxuICAgICAgICByb290TWFyZ2luOiAnNTBweCcsICAvLyBTdGFydCBsb2FkaW5nIHNsaWdodGx5IGJlZm9yZSB2aXNpYmxlXG4gICAgICAgIHRocmVzaG9sZDogMC4wMSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSB2aXNpYmlsaXR5IGNoYW5nZXMuXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoaXNWaXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNWaXNpYmxlID09PSBpc1Zpc2libGUpIHJldHVybjtcblxuICAgIHRoaXMuaXNWaXNpYmxlID0gaXNWaXNpYmxlO1xuXG4gICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgdGhpcy5vbkJlY2FtZVZpc2libGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbkJlY2FtZUhpZGRlbigpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBzdWJzY3JpcHRpb25zIGJhc2VkIG9uIHZpc2liaWxpdHlcbiAgICB0aGlzLnVwZGF0ZVN1YnNjcmlwdGlvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB3aWRnZXQgYmVjb21lcyB2aXNpYmxlLlxuICAgKiBTdWJjbGFzc2VzIGNhbiBvdmVycmlkZSBmb3IgY3VzdG9tIGJlaGF2aW9yLlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uQmVjYW1lVmlzaWJsZSgpOiB2b2lkIHtcbiAgICAvLyBEZWZhdWx0OiBubyBhY3Rpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB3aWRnZXQgYmVjb21lcyBoaWRkZW4uXG4gICAqIFN1YmNsYXNzZXMgY2FuIG92ZXJyaWRlIGZvciBjdXN0b20gYmVoYXZpb3IuXG4gICAqL1xuICBwcm90ZWN0ZWQgb25CZWNhbWVIaWRkZW4oKTogdm9pZCB7XG4gICAgLy8gRGVmYXVsdDogbm8gYWN0aW9uXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHN1YnNjcmlwdGlvbnMgYmFzZWQgb24gY3VycmVudCB2aXNpYmlsaXR5LlxuICAgKi9cbiAgcHJpdmF0ZSB1cGRhdGVTdWJzY3JpcHRpb25zKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5zdWJzY3JpcHRpb25NYW5hZ2VyKSByZXR1cm47XG5cbiAgICBjb25zdCBlbnRpdGllcyA9IHRoaXMuc3Vic2NyaWJlZEVudGl0aWVzKCk7XG4gICAgXG4gICAgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAvLyBXaWRnZXQgaXMgdmlzaWJsZSwgZW5zdXJlIHdlJ3JlIHN1YnNjcmliZWRcbiAgICAgIGNvbnN0IHZpc2libGVFbnRpdGllcyA9IHRoaXMuc3Vic2NyaXB0aW9uTWFuYWdlci5nZXRWaXNpYmxlRW50aXRpZXMoKTtcbiAgICAgIGNvbnN0IGFsbFZpc2libGUgPSBuZXcgU2V0KFsuLi52aXNpYmxlRW50aXRpZXMsIC4uLmVudGl0aWVzXSk7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbk1hbmFnZXIudXBkYXRlVmlzaWJsZUVudGl0aWVzKEFycmF5LmZyb20oYWxsVmlzaWJsZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXaWRnZXQgaXMgaGlkZGVuLCB3ZSBjb3VsZCB1bnN1YnNjcmliZVxuICAgICAgLy8gQnV0IHRoaXMgaXMgaGFuZGxlZCBnbG9iYWxseSBieSB0aGUgZGFzaGJvYXJkXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFuIHVwIHJlc291cmNlcy5cbiAgICovXG4gIHByaXZhdGUgY2xlYW51cCgpOiB2b2lkIHtcbiAgICAvLyBVbnN1YnNjcmliZSBmcm9tIHN0YXRlIGNoYW5nZXNcbiAgICBmb3IgKGNvbnN0IHVuc3Vic2NyaWJlIG9mIHRoaXMuc3RhdGVVbnN1YnNjcmliZXJzKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICB0aGlzLnN0YXRlVW5zdWJzY3JpYmVycyA9IFtdO1xuXG4gICAgLy8gQ2xlYW4gdXAgaW50ZXJzZWN0aW9uIG9ic2VydmVyXG4gICAgaWYgKHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgdGhpcy5pbnRlcnNlY3Rpb25PYnNlcnZlciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBDbGVhbiB1cCBrZXlib2FyZCBoYW5kbGVyc1xuICAgIHRoaXMucmVtb3ZlS2V5Ym9hcmRIYW5kbGVycygpO1xuXG4gICAgLy8gQ2FuY2VsIGFueSBwZW5kaW5nIGFuaW1hdGlvbiBmcmFtZXNcbiAgICBpZiAodGhpcy5hbmltYXRpb25GcmFtZUlkKSB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkZyYW1lSWQpO1xuICAgIH1cblxuICAgIC8vIENsZWFyIHN0YXRlXG4gICAgdGhpcy5lbnRpdHlTdGF0ZXMuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gY2FsbCBIb21lIEFzc2lzdGFudCBzZXJ2aWNlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIGNhbGxTZXJ2aWNlKFxuICAgIGRvbWFpbjogc3RyaW5nLFxuICAgIHNlcnZpY2U6IHN0cmluZyxcbiAgICBkYXRhPzogYW55XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmhhc3MuY2FsbFNlcnZpY2UoZG9tYWluLCBzZXJ2aWNlLCBkYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciBhcyBFcnJvciwgYFNlcnZpY2UgY2FsbCAke2RvbWFpbn0uJHtzZXJ2aWNlfWApO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byB0b2dnbGUgYW4gZW50aXR5LlxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIHRvZ2dsZUVudGl0eShlbnRpdHlJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZG9tYWluID0gZW50aXR5SWQuc3BsaXQoJy4nKVswXTtcbiAgICBhd2FpdCB0aGlzLmNhbGxTZXJ2aWNlKGRvbWFpbiwgJ3RvZ2dsZScsIHsgZW50aXR5X2lkOiBlbnRpdHlJZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gdHVybiBvbiBhbiBlbnRpdHkuXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgdHVybk9uKGVudGl0eUlkOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBkb21haW4gPSBlbnRpdHlJZC5zcGxpdCgnLicpWzBdO1xuICAgIGF3YWl0IHRoaXMuY2FsbFNlcnZpY2UoZG9tYWluLCAndHVybl9vbicsIHsgZW50aXR5X2lkOiBlbnRpdHlJZCwgLi4uZGF0YSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gdHVybiBvZmYgYW4gZW50aXR5LlxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIHR1cm5PZmYoZW50aXR5SWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGRvbWFpbiA9IGVudGl0eUlkLnNwbGl0KCcuJylbMF07XG4gICAgYXdhaXQgdGhpcy5jYWxsU2VydmljZShkb21haW4sICd0dXJuX29mZicsIHsgZW50aXR5X2lkOiBlbnRpdHlJZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIGhhcHRpYyBmZWVkYmFjayB3aXRoIHRoZSBzcGVjaWZpZWQgaW50ZW5zaXR5LlxuICAgKi9cbiAgcHJvdGVjdGVkIHRyaWdnZXJIYXB0aWNGZWVkYmFjayhpbnRlbnNpdHk6ICdsaWdodCcgfCAnbWVkaXVtJyB8ICdoZWF2eScgfCAnc3VjY2VzcycgfCAnZXJyb3InIHwgJ3NlbGVjdGlvbicpOiB2b2lkIHtcbiAgICBIYXB0aWNGZWVkYmFja1tpbnRlbnNpdHldKCk7XG4gIH1cblxuICAvKipcbiAgICogQW5pbWF0ZSBhbiBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllZCBhbmltYXRpb24uXG4gICAqL1xuICBwcm90ZWN0ZWQgYW5pbWF0ZUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGFuaW1hdGlvbjogc3RyaW5nLCBkdXJhdGlvbj86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3QgYW5pbWF0aW9uRHVyYXRpb24gPSBkdXJhdGlvbiB8fCBBTklNQVRJT05fRFVSQVRJT04ubm9ybWFsO1xuICAgICAgXG4gICAgICBlbGVtZW50LnN0eWxlLmFuaW1hdGlvbiA9IGAke2FuaW1hdGlvbn0gJHthbmltYXRpb25EdXJhdGlvbn0gJHtFQVNJTkcuc3RhbmRhcmR9YDtcbiAgICAgIFxuICAgICAgY29uc3QgaGFuZGxlQW5pbWF0aW9uRW5kID0gKCkgPT4ge1xuICAgICAgICBlbGVtZW50LnN0eWxlLmFuaW1hdGlvbiA9ICcnO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb2N1cyBtYW5hZ2VtZW50IGhlbHBlci5cbiAgICovXG4gIHByb3RlY3RlZCBmb2N1c0VsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIG9wdGlvbnM/OiBGb2N1c09wdGlvbnMpOiB2b2lkIHtcbiAgICBlbGVtZW50LmZvY3VzKG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB1cCBrZXlib2FyZCBldmVudCBoYW5kbGVycyBmb3IgYWNjZXNzaWJpbGl0eS5cbiAgICovXG4gIHByaXZhdGUgc2V0dXBLZXlib2FyZEhhbmRsZXJzKCk6IHZvaWQge1xuICAgIC8vIERlZmF1bHQga2V5Ym9hcmQgaGFuZGxlcnNcbiAgICB0aGlzLmFkZEtleWJvYXJkSGFuZGxlcignRXNjYXBlJywgdGhpcy5oYW5kbGVFc2NhcGVLZXkuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5hZGRLZXlib2FyZEhhbmRsZXIoJ1RhYicsIHRoaXMuaGFuZGxlVGFiS2V5LmJpbmQodGhpcykpO1xuICAgIFxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bi5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUga2V5Ym9hcmQgZXZlbnQgaGFuZGxlcnMuXG4gICAqL1xuICBwcml2YXRlIHJlbW92ZUtleWJvYXJkSGFuZGxlcnMoKTogdm9pZCB7XG4gICAgdGhpcy5rZXlib2FyZEhhbmRsZXJzLmNsZWFyKCk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGtleWJvYXJkIGV2ZW50IGhhbmRsZXIuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWRkS2V5Ym9hcmRIYW5kbGVyKGtleTogc3RyaW5nLCBoYW5kbGVyOiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLmtleWJvYXJkSGFuZGxlcnMuc2V0KGtleSwgaGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGtleWJvYXJkIGV2ZW50cy5cbiAgICovXG4gIHByaXZhdGUgaGFuZGxlS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmtleWJvYXJkSGFuZGxlcnMuZ2V0KGV2ZW50LmtleSk7XG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXIoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgRXNjYXBlIGtleSAoZGVmYXVsdDogYmx1ciBhY3RpdmUgZWxlbWVudCkuXG4gICAqL1xuICBwcm90ZWN0ZWQgaGFuZGxlRXNjYXBlS2V5KF9ldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSB0aGlzLnNoYWRvd1Jvb3Q/LmFjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgVGFiIGtleSBmb3IgZm9jdXMgbWFuYWdlbWVudC5cbiAgICovXG4gIHByb3RlY3RlZCBoYW5kbGVUYWJLZXkoX2V2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgLy8gRGVmYXVsdCBiZWhhdmlvciAtIGNvdWxkIGJlIG92ZXJyaWRkZW4gYnkgc3ViY2xhc3Nlc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiB0aGUgd2lkZ2V0LlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldEZvY3VzYWJsZUVsZW1lbnRzKCk6IEhUTUxFbGVtZW50W10ge1xuICAgIGNvbnN0IGZvY3VzYWJsZVNlbGVjdG9ycyA9IFtcbiAgICAgICdidXR0b246bm90KFtkaXNhYmxlZF0pJyxcbiAgICAgICdpbnB1dDpub3QoW2Rpc2FibGVkXSknLFxuICAgICAgJ3NlbGVjdDpub3QoW2Rpc2FibGVkXSknLFxuICAgICAgJ3RleHRhcmVhOm5vdChbZGlzYWJsZWRdKScsXG4gICAgICAnYVtocmVmXScsXG4gICAgICAnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVwiLTFcIl0pJyxcbiAgICAgICdoYS1pY29uLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSknLFxuICAgICAgJ213Yy1idXR0b246bm90KFtkaXNhYmxlZF0pJyxcbiAgICAgICdoYS1zd2l0Y2g6bm90KFtkaXNhYmxlZF0pJ1xuICAgIF0uam9pbignLCAnKTtcblxuICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5zaGFkb3dSb290Py5xdWVyeVNlbGVjdG9yQWxsKGZvY3VzYWJsZVNlbGVjdG9ycykgfHwgW107XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudHMpIGFzIEhUTUxFbGVtZW50W107XG4gIH1cblxuICAvKipcbiAgICogQmFzZSBzdHlsZXMgZm9yIGFsbCB3aWRnZXRzLlxuICAgKi9cbiAgc3RhdGljIHN0eWxlcyA9IGNzc2BcbiAgICA6aG9zdCB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG5cbiAgICAud2lkZ2V0LWNvbnRhaW5lciB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB9XG5cbiAgICAud2lkZ2V0LWxvYWRpbmcge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LXRleHQtY29sb3IpO1xuICAgIH1cblxuICAgIC53aWRnZXQtZXJyb3Ige1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIGNvbG9yOiB2YXIoLS1lcnJvci1jb2xvciwgI2Y0NDMzNik7XG4gICAgICBwYWRkaW5nOiAxNnB4O1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgYDtcbn0iLCIvKipcbiAqIEVudGl0eSB0eXBlIHRvIGljb24gbWFwcGluZyB1dGlsaXR5LlxuICogTWFwcyBlbnRpdHkgdHlwZXMgYW5kIGRvbWFpbnMgdG8gTWF0ZXJpYWwgRGVzaWduIEljb25zLlxuICovXG5cbmV4cG9ydCBjb25zdCBFTlRJVFlfSUNPTlM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gIC8vIExpZ2h0c1xuICAnbGlnaHQnOiAnbWRpOmxpZ2h0YnVsYicsXG4gICdsaWdodC5jZWlsaW5nJzogJ21kaTpjZWlsaW5nLWxpZ2h0JyxcbiAgJ2xpZ2h0LmZsb29yJzogJ21kaTpmbG9vci1sYW1wJyxcbiAgJ2xpZ2h0LmRlc2snOiAnbWRpOmRlc2stbGFtcCcsXG4gICdsaWdodC5zdHJpcCc6ICdtZGk6bGVkLXN0cmlwLXZhcmlhbnQnLFxuICAnbGlnaHQuc3BvdCc6ICdtZGk6c3BvdGxpZ2h0LWJlYW0nLFxuICBcbiAgLy8gQ2xpbWF0ZVxuICAnY2xpbWF0ZSc6ICdtZGk6dGhlcm1vc3RhdCcsXG4gICd0ZW1wZXJhdHVyZSc6ICdtZGk6dGhlcm1vbWV0ZXInLFxuICAnaHVtaWRpdHknOiAnbWRpOndhdGVyLXBlcmNlbnQnLFxuICAnYWlyX3F1YWxpdHknOiAnbWRpOmFpci1maWx0ZXInLFxuICBcbiAgLy8gU2VjdXJpdHlcbiAgJ2xvY2snOiAnbWRpOmxvY2snLFxuICAnZG9vcic6ICdtZGk6ZG9vcicsXG4gICd3aW5kb3cnOiAnbWRpOndpbmRvdy1jbG9zZWQnLFxuICAnbW90aW9uJzogJ21kaTptb3Rpb24tc2Vuc29yJyxcbiAgJ3ByZXNlbmNlJzogJ21kaTpob21lLWFjY291bnQnLFxuICAnY2FtZXJhJzogJ21kaTpjY3R2JyxcbiAgJ2FsYXJtJzogJ21kaTpzaGllbGQtaG9tZScsXG4gIFxuICAvLyBNZWRpYVxuICAnbWVkaWFfcGxheWVyJzogJ21kaTp0ZWxldmlzaW9uJyxcbiAgJ3NwZWFrZXInOiAnbWRpOnNwZWFrZXInLFxuICAncmVtb3RlJzogJ21kaTpyZW1vdGUnLFxuICBcbiAgLy8gU3dpdGNoZXMgJiBDb250cm9sc1xuICAnc3dpdGNoJzogJ21kaTpsaWdodC1zd2l0Y2gnLFxuICAnZmFuJzogJ21kaTpmYW4nLFxuICAnY292ZXInOiAnbWRpOndpbmRvdy1zaHV0dGVyJyxcbiAgJ2JsaW5kJzogJ21kaTpibGluZHMnLFxuICAnY3VydGFpbic6ICdtZGk6Y3VydGFpbnMnLFxuICBcbiAgLy8gU2Vuc29yc1xuICAnc2Vuc29yJzogJ21kaTpleWUnLFxuICAnYmluYXJ5X3NlbnNvcic6ICdtZGk6cmFkaW9ib3gtbWFya2VkJyxcbiAgJ2JhdHRlcnknOiAnbWRpOmJhdHRlcnknLFxuICAncG93ZXInOiAnbWRpOmZsYXNoJyxcbiAgJ2VuZXJneSc6ICdtZGk6bGlnaHRuaW5nLWJvbHQnLFxuICBcbiAgLy8gT3RoZXIgZGV2aWNlc1xuICAndmFjdXVtJzogJ21kaTpyb2JvdC12YWN1dW0nLFxuICAncGVyc29uJzogJ21kaTphY2NvdW50JyxcbiAgJ2RldmljZV90cmFja2VyJzogJ21kaTpjZWxscGhvbmUnLFxuICAnc3VuJzogJ21kaTp3ZWF0aGVyLXN1bm55JyxcbiAgJ3dlYXRoZXInOiAnbWRpOndlYXRoZXItcGFydGx5LWNsb3VkeScsXG4gIFxuICAvLyBEZWZhdWx0XG4gICdkZWZhdWx0JzogJ21kaTpob21lLWFzc2lzdGFudCdcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbnRpdHlJY29uKGVudGl0eUlkOiBzdHJpbmcsIHN0YXRlPzogYW55KTogc3RyaW5nIHtcbiAgLy8gQ2hlY2sgY3VzdG9tIGljb24gZmlyc3RcbiAgaWYgKHN0YXRlPy5hdHRyaWJ1dGVzPy5pY29uKSB7XG4gICAgcmV0dXJuIHN0YXRlLmF0dHJpYnV0ZXMuaWNvbjtcbiAgfVxuICBcbiAgLy8gQ2hlY2sgZGV2aWNlIGNsYXNzIGZvciBtb3JlIHNwZWNpZmljIGljb25zXG4gIGNvbnN0IGRldmljZUNsYXNzID0gc3RhdGU/LmF0dHJpYnV0ZXM/LmRldmljZV9jbGFzcztcbiAgaWYgKGRldmljZUNsYXNzICYmIEVOVElUWV9JQ09OU1tkZXZpY2VDbGFzc10pIHtcbiAgICByZXR1cm4gRU5USVRZX0lDT05TW2RldmljZUNsYXNzXTtcbiAgfVxuICBcbiAgLy8gTWF0Y2ggYnkgZW50aXR5IElEIHBhdHRlcm5zXG4gIGZvciAoY29uc3QgW3BhdHRlcm4sIGljb25dIG9mIE9iamVjdC5lbnRyaWVzKEVOVElUWV9JQ09OUykpIHtcbiAgICBpZiAoZW50aXR5SWQuaW5jbHVkZXMocGF0dGVybikpIHtcbiAgICAgIHJldHVybiBpY29uO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gRG9tYWluIGZhbGxiYWNrXG4gIGNvbnN0IGRvbWFpbiA9IGVudGl0eUlkLnNwbGl0KCcuJylbMF07XG4gIHJldHVybiBFTlRJVFlfSUNPTlNbZG9tYWluXSB8fCBFTlRJVFlfSUNPTlMuZGVmYXVsdDtcbn1cblxuLyoqXG4gKiBHZXQgaWNvbiBjb2xvciBiYXNlZCBvbiBlbnRpdHkgc3RhdGUgYW5kIGRvbWFpbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVudGl0eUljb25Db2xvcihlbnRpdHlJZDogc3RyaW5nLCBzdGF0ZT86IGFueSk6IHN0cmluZyB7XG4gIGNvbnN0IGRvbWFpbiA9IGVudGl0eUlkLnNwbGl0KCcuJylbMF07XG4gIGNvbnN0IGlzT24gPSBzdGF0ZT8uc3RhdGUgPT09ICdvbic7XG4gIGNvbnN0IGlzQWN0aXZlID0gWydwbGF5aW5nJywgJ29wZW4nLCAndW5sb2NrZWQnLCAnaG9tZScsICdkZXRlY3RlZCddLmluY2x1ZGVzKHN0YXRlPy5zdGF0ZSk7XG4gIGNvbnN0IGlzVW5hdmFpbGFibGUgPSBzdGF0ZT8uc3RhdGUgPT09ICd1bmF2YWlsYWJsZSc7XG4gIFxuICBpZiAoaXNVbmF2YWlsYWJsZSkge1xuICAgIHJldHVybiAndmFyKC0tZGlzYWJsZWQtdGV4dC1jb2xvciknO1xuICB9XG4gIFxuICAvLyBEb21haW4tc3BlY2lmaWMgY29sb3JzIHdoZW4gYWN0aXZlXG4gIGlmIChpc09uIHx8IGlzQWN0aXZlKSB7XG4gICAgc3dpdGNoIChkb21haW4pIHtcbiAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgcmV0dXJuIHN0YXRlPy5hdHRyaWJ1dGVzPy5yZ2JfY29sb3IgXG4gICAgICAgICAgPyBgcmdiKCR7c3RhdGUuYXR0cmlidXRlcy5yZ2JfY29sb3Iuam9pbignLCcpfSlgIFxuICAgICAgICAgIDogJ3ZhcigtLXByaW1hcnktY29sb3IpJztcbiAgICAgIGNhc2UgJ2NsaW1hdGUnOlxuICAgICAgICBjb25zdCBtb2RlID0gc3RhdGU/LnN0YXRlO1xuICAgICAgICBpZiAobW9kZSA9PT0gJ2hlYXQnKSByZXR1cm4gJyNmZjZiMDAnO1xuICAgICAgICBpZiAobW9kZSA9PT0gJ2Nvb2wnKSByZXR1cm4gJyMwMjg4ZDEnO1xuICAgICAgICBpZiAobW9kZSA9PT0gJ2hlYXRfY29vbCcgfHwgbW9kZSA9PT0gJ2F1dG8nKSByZXR1cm4gJyMzODhlM2MnO1xuICAgICAgICByZXR1cm4gJ3ZhcigtLXByaW1hcnktY29sb3IpJztcbiAgICAgIGNhc2UgJ2xvY2snOlxuICAgICAgICByZXR1cm4gc3RhdGU/LnN0YXRlID09PSAnbG9ja2VkJyA/ICcjNGNhZjUwJyA6ICcjZjQ0MzM2JztcbiAgICAgIGNhc2UgJ2FsYXJtX2NvbnRyb2xfcGFuZWwnOlxuICAgICAgICBpZiAoc3RhdGU/LnN0YXRlID09PSAnYXJtZWRfYXdheScpIHJldHVybiAnI2Y0NDMzNic7XG4gICAgICAgIGlmIChzdGF0ZT8uc3RhdGUgPT09ICdhcm1lZF9ob21lJykgcmV0dXJuICcjZmY5ODAwJztcbiAgICAgICAgaWYgKHN0YXRlPy5zdGF0ZSA9PT0gJ2Rpc2FybWVkJykgcmV0dXJuICcjNGNhZjUwJztcbiAgICAgICAgcmV0dXJuICd2YXIoLS1wcmltYXJ5LWNvbG9yKSc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ3ZhcigtLXByaW1hcnktY29sb3IpJztcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiAndmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpJztcbn1cblxuLyoqXG4gKiBHZXQgYSBtaW5pIGljb24gZm9yIGVudGl0eSBzdW1tYXJpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNaW5pSWNvbihlbnRpdHlUeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBtaW5pSWNvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgJ2xpZ2h0cyc6ICdtZGk6bGlnaHRidWxiJyxcbiAgICAndGVtcGVyYXR1cmUnOiAnbWRpOnRoZXJtb21ldGVyJyxcbiAgICAnaHVtaWRpdHknOiAnbWRpOndhdGVyLXBlcmNlbnQnLFxuICAgICdtb3Rpb24nOiAnbWRpOm1vdGlvbi1zZW5zb3InLFxuICAgICdkb29ycyc6ICdtZGk6ZG9vcicsXG4gICAgJ3dpbmRvd3MnOiAnbWRpOndpbmRvdy1jbG9zZWQnLFxuICAgICdtZWRpYSc6ICdtZGk6dGVsZXZpc2lvbicsXG4gICAgJ2NsaW1hdGUnOiAnbWRpOnRoZXJtb3N0YXQnXG4gIH07XG4gIFxuICByZXR1cm4gbWluaUljb25zW2VudGl0eVR5cGVdIHx8ICdtZGk6Y2lyY2xlJztcbn0iLCIvKipcbiAqIFJvb20gd2lkZ2V0IGZvciBEYXNodmlldyBWMi5cbiAqIERpc3BsYXlzIGFsbCBlbnRpdGllcyBpbiBhIHJvb20gd2l0aCBzdW1tYXJ5IGFuZCBjb250cm9scy5cbiAqL1xuXG5pbXBvcnQgeyBQcm9wZXJ0eVZhbHVlcywgVGVtcGxhdGVSZXN1bHQsIGNzcywgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSwgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBEYXNodmlld1dpZGdldCwgV2lkZ2V0Q29uZmlnIH0gZnJvbSAnLi4vY29yZS93aWRnZXQtYmFzZSc7XG5pbXBvcnQgeyBnZXRFbnRpdHlJY29uLCBnZXRFbnRpdHlJY29uQ29sb3IgfSBmcm9tICcuLi91dGlscy9pY29ucyc7XG5pbXBvcnQgeyBza2VsZXRvblN0eWxlcywgdG91Y2hTdHlsZXMgfSBmcm9tICcuLi9zdHlsZXMvYW5pbWF0aW9ucyc7XG5cbmludGVyZmFjZSBSb29tV2lkZ2V0Q29uZmlnIGV4dGVuZHMgV2lkZ2V0Q29uZmlnIHtcbiAgdHlwZTogJ3Jvb20nO1xuICBhcmVhSWQ/OiBzdHJpbmc7XG4gIGFyZWFOYW1lPzogc3RyaW5nO1xuICBzaG93RW1wdHk/OiBib29sZWFuO1xufVxuXG5AY3VzdG9tRWxlbWVudCgnZGFzaHZpZXctcm9vbS13aWRnZXQnKVxuZXhwb3J0IGNsYXNzIFJvb21XaWRnZXQgZXh0ZW5kcyBEYXNodmlld1dpZGdldCB7XG4gIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KSBhcmVhSWQ/OiBzdHJpbmc7XG4gIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KSBhcmVhTmFtZT86IHN0cmluZztcbiAgQHN0YXRlKCkgcHJpdmF0ZSBleHBhbmRlZCA9IGZhbHNlO1xuICBAc3RhdGUoKSBwcml2YXRlIGxpZ2h0Q291bnQgPSAwO1xuICBAc3RhdGUoKSBwcml2YXRlIGxpZ2h0c09uID0gMDtcbiAgQHN0YXRlKCkgcHJpdmF0ZSB0ZW1wZXJhdHVyZT86IG51bWJlcjtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBodW1pZGl0eT86IG51bWJlcjtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBsYXN0TW90aW9uPzogRGF0ZTtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBncm91cGVkRW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPiA9IHt9O1xuXG4gIHByb3RlY3RlZCBzdWJzY3JpYmVkRW50aXRpZXMoKTogc3RyaW5nW10ge1xuICAgIC8vIFN1YnNjcmliZSB0byBhbGwgZW50aXRpZXMgd2hlbiBleHBhbmRlZCwgb3IganVzdCBrZXkgZW50aXRpZXMgd2hlbiBjb2xsYXBzZWRcbiAgICBpZiAodGhpcy5leHBhbmRlZCB8fCB0aGlzLmVudGl0eVN0YXRlcy5zaXplIDwgMTApIHtcbiAgICAgIHJldHVybiB0aGlzLndpZGdldENvbmZpZz8uZW50aXRpZXMgfHwgW107XG4gICAgfVxuICAgIFxuICAgIC8vIFdoZW4gY29sbGFwc2VkIHdpdGggbWFueSBlbnRpdGllcywgb25seSBzdWJzY3JpYmUgdG8ga2V5IGVudGl0aWVzXG4gICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLndpZGdldENvbmZpZz8uZW50aXRpZXMgfHwgW107XG4gICAgcmV0dXJuIGVudGl0aWVzLmZpbHRlcihpZCA9PiBcbiAgICAgIGlkLmluY2x1ZGVzKCdtb3Rpb24nKSB8fCBcbiAgICAgIGlkLmluY2x1ZGVzKCdkb29yJykgfHwgXG4gICAgICBpZC5pbmNsdWRlcygncHJlc2VuY2UnKSB8fFxuICAgICAgaWQuaW5jbHVkZXMoJ3RlbXBlcmF0dXJlJykgfHxcbiAgICAgIGlkLmluY2x1ZGVzKCdodW1pZGl0eScpIHx8XG4gICAgICBpZC5zdGFydHNXaXRoKCdsaWdodC4nKVxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdENvbmZpZygpOiBQYXJ0aWFsPFJvb21XaWRnZXRDb25maWc+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3Jvb20nLFxuICAgICAgZW50aXRpZXM6IFtdLFxuICAgICAgc2hvd0VtcHR5OiBmYWxzZSxcbiAgICB9O1xuICB9XG5cbiAgcHJvdGVjdGVkIGZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcHM6IFByb3BlcnR5VmFsdWVzKTogdm9pZCB7XG4gICAgc3VwZXIuZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wcyk7XG4gICAgdGhpcy51cGRhdGVTdW1tYXJ5KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TdGF0ZUNoYW5nZWQoZW50aXR5SWQ6IHN0cmluZywgbmV3U3RhdGU6IGFueSwgb2xkU3RhdGU6IGFueSk6IHZvaWQge1xuICAgIHN1cGVyLm9uU3RhdGVDaGFuZ2VkKGVudGl0eUlkLCBuZXdTdGF0ZSwgb2xkU3RhdGUpO1xuICAgIHRoaXMudXBkYXRlU3VtbWFyeSgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVTdW1tYXJ5KCk6IHZvaWQge1xuICAgIGxldCBsaWdodENvdW50ID0gMDtcbiAgICBsZXQgbGlnaHRzT24gPSAwO1xuICAgIGxldCB0ZW1wZXJhdHVyZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIGxldCBodW1pZGl0eTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIGxldCBsYXN0TW90aW9uOiBEYXRlIHwgdW5kZWZpbmVkO1xuXG4gICAgLy8gR3JvdXAgZW50aXRpZXMgYnkgdHlwZSBmb3IgYmV0dGVyIG9yZ2FuaXphdGlvblxuICAgIHRoaXMuZ3JvdXBlZEVudGl0aWVzID0gdGhpcy5ncm91cEVudGl0aWVzQnlUeXBlKCk7XG5cbiAgICBmb3IgKGNvbnN0IFtlbnRpdHlJZCwgc3RhdGVdIG9mIHRoaXMuZW50aXR5U3RhdGVzKSB7XG4gICAgICBpZiAoZW50aXR5SWQuc3RhcnRzV2l0aCgnbGlnaHQuJykpIHtcbiAgICAgICAgbGlnaHRDb3VudCsrO1xuICAgICAgICBpZiAoc3RhdGUuc3RhdGUgPT09ICdvbicpIHtcbiAgICAgICAgICBsaWdodHNPbisrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGVudGl0eUlkLmluY2x1ZGVzKCd0ZW1wZXJhdHVyZScpICYmIHN0YXRlLnN0YXRlICE9PSAndW5hdmFpbGFibGUnKSB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBwYXJzZUZsb2F0KHN0YXRlLnN0YXRlKTtcbiAgICAgICAgaWYgKCFpc05hTih0ZW1wKSkge1xuICAgICAgICAgIHRlbXBlcmF0dXJlID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbnRpdHlJZC5pbmNsdWRlcygnaHVtaWRpdHknKSAmJiBzdGF0ZS5zdGF0ZSAhPT0gJ3VuYXZhaWxhYmxlJykge1xuICAgICAgICBjb25zdCBodW0gPSBwYXJzZUZsb2F0KHN0YXRlLnN0YXRlKTtcbiAgICAgICAgaWYgKCFpc05hTihodW0pKSB7XG4gICAgICAgICAgaHVtaWRpdHkgPSBodW07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZW50aXR5SWQuaW5jbHVkZXMoJ21vdGlvbicpIHx8IGVudGl0eUlkLmluY2x1ZGVzKCdwcmVzZW5jZScpKSB7XG4gICAgICAgIGlmIChzdGF0ZS5zdGF0ZSA9PT0gJ29uJyAmJiBzdGF0ZS5sYXN0X2NoYW5nZWQpIHtcbiAgICAgICAgICBjb25zdCBtb3Rpb25UaW1lID0gbmV3IERhdGUoc3RhdGUubGFzdF9jaGFuZ2VkKTtcbiAgICAgICAgICBpZiAoIWxhc3RNb3Rpb24gfHwgbW90aW9uVGltZSA+IGxhc3RNb3Rpb24pIHtcbiAgICAgICAgICAgIGxhc3RNb3Rpb24gPSBtb3Rpb25UaW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGlnaHRDb3VudCA9IGxpZ2h0Q291bnQ7XG4gICAgdGhpcy5saWdodHNPbiA9IGxpZ2h0c09uO1xuICAgIHRoaXMudGVtcGVyYXR1cmUgPSB0ZW1wZXJhdHVyZTtcbiAgICB0aGlzLmh1bWlkaXR5ID0gaHVtaWRpdHk7XG4gICAgdGhpcy5sYXN0TW90aW9uID0gbGFzdE1vdGlvbjtcbiAgfVxuXG4gIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0IHJvb21OYW1lID0gdGhpcy5hcmVhTmFtZSB8fCB0aGlzLndpZGdldENvbmZpZz8udGl0bGUgfHwgJ1Vua25vd24gUm9vbSc7XG5cbiAgICBpZiAodGhpcy5pc0xvYWRpbmcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclNrZWxldG9uKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwid2lkZ2V0LWVycm9yXCI+XG4gICAgICAgICAgJHt0aGlzLmVycm9yfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8aGEtY2FyZCByb2xlPVwicmVnaW9uXCIgYXJpYS1sYWJlbD1cIiR7cm9vbU5hbWV9IHJvb20gY29udHJvbHNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlciB0b3VjaC10YXJnZXRcIiBAY2xpY2s9JHt0aGlzLnRvZ2dsZUV4cGFuZGVkfSBAa2V5ZG93bj0ke3RoaXMuaGFuZGxlSGVhZGVyS2V5ZG93bn0+XG4gICAgICAgICAgPGgyPiR7cm9vbU5hbWV9PC9oMj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3VtbWFyeVwiPlxuICAgICAgICAgICAgJHt0aGlzLnJlbmRlclN1bW1hcnkoKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aGEtaWNvblxuICAgICAgICAgICAgY2xhc3M9XCJleHBhbmQtaWNvbiAke3RoaXMuZXhwYW5kZWQgPyAnZXhwYW5kZWQnIDogJyd9XCJcbiAgICAgICAgICAgIGljb249XCJtZGk6Y2hldnJvbi1kb3duXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCIke3RoaXMuZXhwYW5kZWQgPyAnQ29sbGFwc2UnIDogJ0V4cGFuZCd9IHJvb20gZGV0YWlsc1wiXG4gICAgICAgICAgPjwvaGEtaWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGVudCAke3RoaXMuZXhwYW5kZWQgPyAnZXhwYW5kZWQnIDogJ2NvbGxhcHNlZCd9XCI+XG4gICAgICAgICAgJHt0aGlzLnJlbmRlckV4cGFuZGVkKCl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImFjdGlvbnNcIj5cbiAgICAgICAgICAke3RoaXMubGlnaHRDb3VudCA+IDAgPyBodG1sYFxuICAgICAgICAgICAgPG13Yy1idXR0b24gQGNsaWNrPSR7dGhpcy50dXJuQWxsTGlnaHRzT2ZmfSBhcmlhLWxhYmVsPVwiVHVybiBhbGwgbGlnaHRzIG9mZlwiPlxuICAgICAgICAgICAgICA8aGEtaWNvbiBpY29uPVwibWRpOmxpZ2h0YnVsYi1vZmZcIj48L2hhLWljb24+XG4gICAgICAgICAgICAgIEFsbCBPZmZcbiAgICAgICAgICAgIDwvbXdjLWJ1dHRvbj5cbiAgICAgICAgICBgIDogJyd9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9oYS1jYXJkPlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlclN1bW1hcnkoKTogVGVtcGxhdGVSZXN1bHRbXSB7XG4gICAgY29uc3Qgc3VtbWFyeTogVGVtcGxhdGVSZXN1bHRbXSA9IFtdO1xuXG4gICAgLy8gTGlnaHQgc3RhdHVzXG4gICAgaWYgKHRoaXMubGlnaHRDb3VudCA+IDApIHtcbiAgICAgIHN1bW1hcnkucHVzaChodG1sYFxuICAgICAgICA8c3BhbiBjbGFzcz1cInN1bW1hcnktaXRlbVwiPlxuICAgICAgICAgIDxoYS1pY29uIGljb249XCJtZGk6bGlnaHRidWxiXCI+PC9oYS1pY29uPlxuICAgICAgICAgICR7dGhpcy5saWdodHNPbn0vJHt0aGlzLmxpZ2h0Q291bnR9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIGApO1xuICAgIH1cblxuICAgIC8vIFRlbXBlcmF0dXJlXG4gICAgaWYgKHRoaXMudGVtcGVyYXR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3VtbWFyeS5wdXNoKGh0bWxgXG4gICAgICAgIDxzcGFuIGNsYXNzPVwic3VtbWFyeS1pdGVtXCI+XG4gICAgICAgICAgPGhhLWljb24gaWNvbj1cIm1kaTp0aGVybW9tZXRlclwiPjwvaGEtaWNvbj5cbiAgICAgICAgICAke3RoaXMudGVtcGVyYXR1cmUudG9GaXhlZCgxKX3CsFxuICAgICAgICA8L3NwYW4+XG4gICAgICBgKTtcbiAgICB9XG5cbiAgICAvLyBIdW1pZGl0eVxuICAgIGlmICh0aGlzLmh1bWlkaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN1bW1hcnkucHVzaChodG1sYFxuICAgICAgICA8c3BhbiBjbGFzcz1cInN1bW1hcnktaXRlbVwiPlxuICAgICAgICAgIDxoYS1pY29uIGljb249XCJtZGk6d2F0ZXItcGVyY2VudFwiPjwvaGEtaWNvbj5cbiAgICAgICAgICAke3RoaXMuaHVtaWRpdHkudG9GaXhlZCgwKX0lXG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIGApO1xuICAgIH1cblxuICAgIC8vIExhc3QgbW90aW9uXG4gICAgaWYgKHRoaXMubGFzdE1vdGlvbikge1xuICAgICAgY29uc3QgbWludXRlc0FnbyA9IE1hdGguZmxvb3IoKERhdGUubm93KCkgLSB0aGlzLmxhc3RNb3Rpb24uZ2V0VGltZSgpKSAvIDYwMDAwKTtcbiAgICAgIGNvbnN0IHRpbWVTdHIgPSBtaW51dGVzQWdvIDwgMSA/ICdub3cnIDogXG4gICAgICAgICAgICAgICAgICAgICAgbWludXRlc0FnbyA8IDYwID8gYCR7bWludXRlc0Fnb31tIGFnb2AgOlxuICAgICAgICAgICAgICAgICAgICAgIGAke01hdGguZmxvb3IobWludXRlc0FnbyAvIDYwKX1oIGFnb2A7XG4gICAgICBzdW1tYXJ5LnB1c2goaHRtbGBcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzdW1tYXJ5LWl0ZW1cIj5cbiAgICAgICAgICA8aGEtaWNvbiBpY29uPVwibWRpOm1vdGlvbi1zZW5zb3JcIj48L2hhLWljb24+XG4gICAgICAgICAgJHt0aW1lU3RyfVxuICAgICAgICA8L3NwYW4+XG4gICAgICBgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VtbWFyeTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyRXhwYW5kZWQoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImVudGl0eS1saXN0XCI+XG4gICAgICAgICR7T2JqZWN0LmVudHJpZXModGhpcy5ncm91cGVkRW50aXRpZXMpLm1hcCgoW3R5cGUsIGVudGl0aWVzXSkgPT4gXG4gICAgICAgICAgdGhpcy5yZW5kZXJFbnRpdHlHcm91cCh0eXBlLCBlbnRpdGllcylcbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckVudGl0eShlbnRpdHlJZDogc3RyaW5nKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5lbnRpdHlTdGF0ZXMuZ2V0KGVudGl0eUlkKTtcbiAgICBpZiAoIXN0YXRlKSByZXR1cm4gaHRtbGBgO1xuXG4gICAgY29uc3QgbmFtZSA9IHN0YXRlLmF0dHJpYnV0ZXMuZnJpZW5kbHlfbmFtZSB8fCBlbnRpdHlJZDtcbiAgICBjb25zdCBkb21haW4gPSBlbnRpdHlJZC5zcGxpdCgnLicpWzBdO1xuICAgIGNvbnN0IGlzVG9nZ2xlYWJsZSA9IFsnbGlnaHQnLCAnc3dpdGNoJywgJ2ZhbicsICdpbnB1dF9ib29sZWFuJ10uaW5jbHVkZXMoZG9tYWluKTtcbiAgICBjb25zdCBpY29uID0gZ2V0RW50aXR5SWNvbihlbnRpdHlJZCwgc3RhdGUpO1xuICAgIGNvbnN0IGljb25Db2xvciA9IGdldEVudGl0eUljb25Db2xvcihlbnRpdHlJZCwgc3RhdGUpO1xuXG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8ZGl2IGNsYXNzPVwiZW50aXR5LWl0ZW0gdG91Y2gtdGFyZ2V0XCIgQGNsaWNrPSR7aXNUb2dnbGVhYmxlID8gKCkgPT4gdGhpcy50b2dnbGVFbnRpdHkoZW50aXR5SWQpIDogdW5kZWZpbmVkfT5cbiAgICAgICAgPGhhLWljb24gXG4gICAgICAgICAgY2xhc3M9XCJlbnRpdHktaWNvbiAke3N0YXRlLnN0YXRlfSAke3N0YXRlLnN0YXRlID09PSAndW5hdmFpbGFibGUnID8gJ3VuYXZhaWxhYmxlJyA6ICcnfVwiXG4gICAgICAgICAgaWNvbj1cIiR7aWNvbn1cIlxuICAgICAgICAgIHN0eWxlPVwiY29sb3I6ICR7aWNvbkNvbG9yfVwiXG4gICAgICAgID48L2hhLWljb24+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZW50aXR5LW5hbWVcIj4ke25hbWV9PC9zcGFuPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZW50aXR5LWNvbnRyb2xzXCI+XG4gICAgICAgICAgJHtpc1RvZ2dsZWFibGUgPyBodG1sYFxuICAgICAgICAgICAgPGhhLXN3aXRjaFxuICAgICAgICAgICAgICAuY2hlY2tlZD0ke3N0YXRlLnN0YXRlID09PSAnb24nfVxuICAgICAgICAgICAgICBAY2hhbmdlPSR7KGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUVudGl0eShlbnRpdHlJZCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJUb2dnbGUgJHtuYW1lfVwiXG4gICAgICAgICAgICA+PC9oYS1zd2l0Y2g+XG4gICAgICAgICAgYCA6IGh0bWxgXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVudGl0eS1zdGF0ZVwiPiR7c3RhdGUuc3RhdGV9PC9zcGFuPlxuICAgICAgICAgIGB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U29ydGVkRW50aXRpZXMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGVudGl0aWVzID0gQXJyYXkuZnJvbSh0aGlzLmVudGl0eVN0YXRlcy5rZXlzKCkpO1xuICAgIFxuICAgIC8vIFNvcnQgYnkgZG9tYWluIHByaW9yaXR5LCB0aGVuIGJ5IG5hbWVcbiAgICBjb25zdCBkb21haW5Qcmlvcml0eTogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHtcbiAgICAgICdsaWdodCc6IDEsXG4gICAgICAnc3dpdGNoJzogMixcbiAgICAgICdmYW4nOiAzLFxuICAgICAgJ2NsaW1hdGUnOiA0LFxuICAgICAgJ2NvdmVyJzogNSxcbiAgICAgICdzZW5zb3InOiA2LFxuICAgICAgJ2JpbmFyeV9zZW5zb3InOiA3LFxuICAgIH07XG5cbiAgICByZXR1cm4gZW50aXRpZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgY29uc3QgZG9tYWluQSA9IGEuc3BsaXQoJy4nKVswXTtcbiAgICAgIGNvbnN0IGRvbWFpbkIgPSBiLnNwbGl0KCcuJylbMF07XG4gICAgICBjb25zdCBwcmlvcml0eUEgPSBkb21haW5Qcmlvcml0eVtkb21haW5BXSB8fCA5OTk7XG4gICAgICBjb25zdCBwcmlvcml0eUIgPSBkb21haW5Qcmlvcml0eVtkb21haW5CXSB8fCA5OTk7XG4gICAgICBcbiAgICAgIGlmIChwcmlvcml0eUEgIT09IHByaW9yaXR5Qikge1xuICAgICAgICByZXR1cm4gcHJpb3JpdHlBIC0gcHJpb3JpdHlCO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gYS5sb2NhbGVDb21wYXJlKGIpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVFeHBhbmRlZCgpOiB2b2lkIHtcbiAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG4gICAgXG4gICAgLy8gVXBkYXRlIHN1YnNjcmlwdGlvbnMgd2hlbiBleHBhbmRpbmcvY29sbGFwc2luZ1xuICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZVN1YnNjcmlwdGlvbnMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUhlYWRlcktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInIHx8IGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy50b2dnbGVFeHBhbmRlZCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ3JvdXBFbnRpdGllc0J5VHlwZSgpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT4ge1xuICAgIGNvbnN0IGdyb3VwczogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0ge307XG4gICAgXG4gICAgZm9yIChjb25zdCBlbnRpdHlJZCBvZiB0aGlzLmVudGl0eVN0YXRlcy5rZXlzKCkpIHtcbiAgICAgIGNvbnN0IGRvbWFpbiA9IGVudGl0eUlkLnNwbGl0KCcuJylbMF07XG4gICAgICBcbiAgICAgIC8vIEdyb3VwIGJ5IGRvbWFpbiB3aXRoIGZyaWVuZGx5IG5hbWVzXG4gICAgICBjb25zdCBncm91cE5hbWUgPSB0aGlzLmdldERvbWFpbkdyb3VwTmFtZShkb21haW4pO1xuICAgICAgaWYgKCFncm91cHNbZ3JvdXBOYW1lXSkge1xuICAgICAgICBncm91cHNbZ3JvdXBOYW1lXSA9IFtdO1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2dyb3VwTmFtZV0ucHVzaChlbnRpdHlJZCk7XG4gICAgfVxuICAgIFxuICAgIC8vIFNvcnQgZW50aXRpZXMgd2l0aGluIGVhY2ggZ3JvdXBcbiAgICBmb3IgKGNvbnN0IFtncm91cE5hbWUsIGVudGl0aWVzXSBvZiBPYmplY3QuZW50cmllcyhncm91cHMpKSB7XG4gICAgICBncm91cHNbZ3JvdXBOYW1lXSA9IGVudGl0aWVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGVBID0gdGhpcy5lbnRpdHlTdGF0ZXMuZ2V0KGEpO1xuICAgICAgICBjb25zdCBzdGF0ZUIgPSB0aGlzLmVudGl0eVN0YXRlcy5nZXQoYik7XG4gICAgICAgIGNvbnN0IG5hbWVBID0gc3RhdGVBPy5hdHRyaWJ1dGVzPy5mcmllbmRseV9uYW1lIHx8IGE7XG4gICAgICAgIGNvbnN0IG5hbWVCID0gc3RhdGVCPy5hdHRyaWJ1dGVzPy5mcmllbmRseV9uYW1lIHx8IGI7XG4gICAgICAgIHJldHVybiBuYW1lQS5sb2NhbGVDb21wYXJlKG5hbWVCKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREb21haW5Hcm91cE5hbWUoZG9tYWluOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRvbWFpbk5hbWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgJ2xpZ2h0JzogJ0xpZ2h0cycsXG4gICAgICAnc3dpdGNoJzogJ1N3aXRjaGVzJyxcbiAgICAgICdmYW4nOiAnRmFucycsXG4gICAgICAnY2xpbWF0ZSc6ICdDbGltYXRlJyxcbiAgICAgICdjb3Zlcic6ICdDb3ZlcnMnLFxuICAgICAgJ2xvY2snOiAnTG9ja3MnLFxuICAgICAgJ3NlbnNvcic6ICdTZW5zb3JzJyxcbiAgICAgICdiaW5hcnlfc2Vuc29yJzogJ0JpbmFyeSBTZW5zb3JzJyxcbiAgICAgICdtZWRpYV9wbGF5ZXInOiAnTWVkaWEnLFxuICAgICAgJ2NhbWVyYSc6ICdDYW1lcmFzJyxcbiAgICAgICdhbGFybV9jb250cm9sX3BhbmVsJzogJ1NlY3VyaXR5J1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIGRvbWFpbk5hbWVzW2RvbWFpbl0gfHwgZG9tYWluLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZG9tYWluLnNsaWNlKDEpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJFbnRpdHlHcm91cCh0eXBlOiBzdHJpbmcsIGVudGl0aWVzOiBzdHJpbmdbXSk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBpZiAoZW50aXRpZXMubGVuZ3RoID09PSAwKSByZXR1cm4gaHRtbGBgO1xuICAgIFxuICAgIGNvbnN0IHR5cGVJY29uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICdMaWdodHMnOiAnbWRpOmxpZ2h0YnVsYicsXG4gICAgICAnU3dpdGNoZXMnOiAnbWRpOmxpZ2h0LXN3aXRjaCcsXG4gICAgICAnU2Vuc29ycyc6ICdtZGk6ZXllJyxcbiAgICAgICdDbGltYXRlJzogJ21kaTp0aGVybW9zdGF0JyxcbiAgICAgICdNZWRpYSc6ICdtZGk6dGVsZXZpc2lvbicsXG4gICAgICAnQ292ZXJzJzogJ21kaTp3aW5kb3ctc2h1dHRlcicsXG4gICAgICAnTG9ja3MnOiAnbWRpOmxvY2snLFxuICAgICAgJ0ZhbnMnOiAnbWRpOmZhbicsXG4gICAgICAnQ2FtZXJhcyc6ICdtZGk6Y2N0dicsXG4gICAgICAnU2VjdXJpdHknOiAnbWRpOnNoaWVsZC1ob21lJ1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8ZGl2IGNsYXNzPVwiZW50aXR5LWdyb3VwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJlbnRpdHktZ3JvdXAtaGVhZGVyXCI+XG4gICAgICAgICAgPGhhLWljb24gaWNvbj0ke3R5cGVJY29uc1t0eXBlXSB8fCAnbWRpOmhvbWUnfT48L2hhLWljb24+XG4gICAgICAgICAgPHNwYW4+JHt0eXBlfTwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvdW50XCI+KCR7ZW50aXRpZXMubGVuZ3RofSk8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAke2VudGl0aWVzLm1hcChlbnRpdHkgPT4gdGhpcy5yZW5kZXJFbnRpdHkoZW50aXR5KSl9XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJTa2VsZXRvbigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8aGEtY2FyZD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJza2VsZXRvbiBza2VsZXRvbi10ZXh0IGxhcmdlXCIgc3R5bGU9XCJ3aWR0aDogMTIwcHg7XCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInN1bW1hcnlcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJza2VsZXRvbiBza2VsZXRvbi10ZXh0XCIgc3R5bGU9XCJ3aWR0aDogNDBweDtcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJza2VsZXRvbiBza2VsZXRvbi10ZXh0XCIgc3R5bGU9XCJ3aWR0aDogNTBweDtcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJza2VsZXRvbiBza2VsZXRvbi10ZXh0XCIgc3R5bGU9XCJ3aWR0aDogNDVweDtcIj48L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2tlbGV0b24gc2tlbGV0b24taWNvblwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvaGEtY2FyZD5cbiAgICBgO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyB0dXJuQWxsTGlnaHRzT2ZmKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGxpZ2h0cyA9IEFycmF5LmZyb20odGhpcy5lbnRpdHlTdGF0ZXMua2V5cygpKS5maWx0ZXIoaWQgPT4gXG4gICAgICBpZC5zdGFydHNXaXRoKCdsaWdodC4nKSAmJiB0aGlzLmVudGl0eVN0YXRlcy5nZXQoaWQpPy5zdGF0ZSA9PT0gJ29uJ1xuICAgICk7XG5cbiAgICBmb3IgKGNvbnN0IGxpZ2h0IG9mIGxpZ2h0cykge1xuICAgICAgYXdhaXQgdGhpcy50dXJuT2ZmKGxpZ2h0KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc3R5bGVzID0gY3NzYFxuICAgICR7RGFzaHZpZXdXaWRnZXQuc3R5bGVzfVxuICAgICR7c2tlbGV0b25TdHlsZXN9XG4gICAgJHt0b3VjaFN0eWxlc31cbiAgICAgIGhhLWNhcmQge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICB9XG5cbiAgICAgIC5oZWFkZXIge1xuICAgICAgICBwYWRkaW5nOiAxNnB4O1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogOHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQgMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpO1xuICAgICAgfVxuXG4gICAgICAuaGVhZGVyOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAuaGVhZGVyOmZvY3VzIHtcbiAgICAgICAgb3V0bGluZTogMnB4IHNvbGlkIHZhcigtLXByaW1hcnktY29sb3IpO1xuICAgICAgICBvdXRsaW5lLW9mZnNldDogMnB4O1xuICAgICAgfVxuXG4gICAgICAuaGVhZGVyIGgyIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBmb250LXNpemU6IDEuMmVtO1xuICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgfVxuXG4gICAgICAuc3VtbWFyeSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGdhcDogMTZweDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgIH1cblxuICAgICAgLnN1bW1hcnktaXRlbSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogNHB4O1xuICAgICAgfVxuXG4gICAgICAuc3VtbWFyeS1pdGVtIGhhLWljb24ge1xuICAgICAgICAtLW1kYy1pY29uLXNpemU6IDE2cHg7XG4gICAgICB9XG5cbiAgICAgIC5leHBhbmQtaWNvbiB7XG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAyNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLjAsIDAuMiwgMSk7XG4gICAgICAgIC0tbWRjLWljb24tc2l6ZTogMjRweDtcbiAgICAgIH1cblxuICAgICAgLmV4cGFuZC1pY29uLmV4cGFuZGVkIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcbiAgICAgIH1cblxuICAgICAgLyogRW5oYW5jZWQgY29udGVudCB3aXRoIHNtb290aCBhbmltYXRpb25zICovXG4gICAgICAuY29udGVudCB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHRyYW5zaXRpb246IG1heC1oZWlnaHQgMjUwbXMgY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpO1xuICAgICAgfVxuXG4gICAgICAuY29udGVudC5jb2xsYXBzZWQge1xuICAgICAgICBtYXgtaGVpZ2h0OiAwO1xuICAgICAgfVxuXG4gICAgICAuY29udGVudC5leHBhbmRlZCB7XG4gICAgICAgIG1heC1oZWlnaHQ6IDYwMHB4O1xuICAgICAgfVxuXG4gICAgICAuZW50aXR5LWxpc3Qge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBnYXA6IDJweDtcbiAgICAgICAgbWF4LWhlaWdodDogNDAwcHg7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICAgIHNjcm9sbGJhci13aWR0aDogdGhpbjtcbiAgICAgICAgcGFkZGluZzogMCAxNnB4IDE2cHg7XG4gICAgICB9XG5cbiAgICAgIC5lbnRpdHktZ3JvdXAge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuICAgICAgfVxuXG4gICAgICAuZW50aXR5LWdyb3VwOmxhc3QtY2hpbGQge1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgfVxuXG4gICAgICAuZW50aXR5LWdyb3VwLWhlYWRlciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogOHB4O1xuICAgICAgICBwYWRkaW5nOiA4cHggMDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWRpdmlkZXItY29sb3IpO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiA4cHg7XG4gICAgICB9XG5cbiAgICAgIC5lbnRpdHktZ3JvdXAtaGVhZGVyIGhhLWljb24ge1xuICAgICAgICAtLW1kYy1pY29uLXNpemU6IDE4cHg7XG4gICAgICB9XG5cbiAgICAgIC5jb3VudCB7XG4gICAgICAgIG9wYWNpdHk6IDAuNztcbiAgICAgICAgZm9udC1zaXplOiAwLjg1ZW07XG4gICAgICB9XG5cbiAgICAgIC5lbnRpdHktaXRlbSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogMTJweDtcbiAgICAgICAgcGFkZGluZzogMTJweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpO1xuICAgICAgICBtaW4taGVpZ2h0OiA0NHB4O1xuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIC5lbnRpdHktaXRlbTpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLmVudGl0eS1pdGVtOmFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC45OCk7XG4gICAgICB9XG5cbiAgICAgIC5lbnRpdHktaWNvbiB7XG4gICAgICAgIC0tbWRjLWljb24tc2l6ZTogMjRweDtcbiAgICAgICAgdHJhbnNpdGlvbjogY29sb3IgMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpO1xuICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgIH1cblxuICAgICAgLmVudGl0eS1pY29uLnVuYXZhaWxhYmxlIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWRpc2FibGVkLXRleHQtY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAuZW50aXR5LW5hbWUge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgZm9udC1zaXplOiAwLjk1ZW07XG4gICAgICB9XG5cbiAgICAgIC5lbnRpdHktY29udHJvbHMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBmbGV4LXNocmluazogMDtcbiAgICAgIH1cblxuICAgICAgLmVudGl0eS1zdGF0ZSB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktdGV4dC1jb2xvcik7XG4gICAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgICBtaW4td2lkdGg6IDYwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hY3Rpb25zIHtcbiAgICAgICAgcGFkZGluZzogOHB4IDE2cHg7XG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgZ2FwOiA4cHg7XG4gICAgICB9XG5cbiAgICAgIC5hY3Rpb25zOmVtcHR5IHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgbXdjLWJ1dHRvbiB7XG4gICAgICAgIC0tbWRjLXRoZW1lLXByaW1hcnk6IHZhcigtLXByaW1hcnktY29sb3IpO1xuICAgICAgICBtaW4taGVpZ2h0OiA0NHB4O1xuICAgICAgfVxuXG4gICAgICBtd2MtYnV0dG9uIGhhLWljb24ge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICAgIH1cblxuICAgICAgLyogTW9iaWxlIG9wdGltaXphdGlvbnMgKi9cbiAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgICAuaGVhZGVyIHtcbiAgICAgICAgICBwYWRkaW5nOiAxMnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnN1bW1hcnkge1xuICAgICAgICAgIGdhcDogMTJweDtcbiAgICAgICAgICBmb250LXNpemU6IDAuODVlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5lbnRpdHktaXRlbSB7XG4gICAgICAgICAgcGFkZGluZzogMTBweCAxMnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLmVudGl0eS1uYW1lIHtcbiAgICAgICAgICBmb250LXNpemU6IDAuOWVtO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIEFjY2Vzc2liaWxpdHkgZW5oYW5jZW1lbnRzICovXG4gICAgICBAbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSkge1xuICAgICAgICAuaGVhZGVyLFxuICAgICAgICAuZXhwYW5kLWljb24sXG4gICAgICAgIC5lbnRpdHktaXRlbSxcbiAgICAgICAgLmVudGl0eS1pY29uLFxuICAgICAgICAuY29udGVudCB7XG4gICAgICAgICAgdHJhbnNpdGlvbjogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5lbnRpdHktaXRlbTphY3RpdmUge1xuICAgICAgICAgIHRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBGb2N1cyBpbmRpY2F0b3JzICovXG4gICAgICAuZW50aXR5LWl0ZW06Zm9jdXMsXG4gICAgICBoYS1zd2l0Y2g6Zm9jdXMge1xuICAgICAgICBvdXRsaW5lOiAycHggc29saWQgdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgICAgIG91dGxpbmUtb2Zmc2V0OiAycHg7XG4gICAgICB9XG4gICAgYDtcbn0iLCIvKipcbiAqIERldmljZSBncm91cCB3aWRnZXQgZm9yIERhc2h2aWV3IFYyLlxuICogR3JvdXBzIGFuZCBkaXNwbGF5cyBkZXZpY2VzIGJ5IHR5cGUgKHN3aXRjaGVzLCBzZW5zb3JzLCBldGMpLlxuICovXG5cbmltcG9ydCB7IFByb3BlcnR5VmFsdWVzLCBUZW1wbGF0ZVJlc3VsdCwgY3NzLCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5LCBzdGF0ZSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IERhc2h2aWV3V2lkZ2V0LCBXaWRnZXRDb25maWcgfSBmcm9tICcuLi9jb3JlL3dpZGdldC1iYXNlJztcblxuaW50ZXJmYWNlIERldmljZUdyb3VwV2lkZ2V0Q29uZmlnIGV4dGVuZHMgV2lkZ2V0Q29uZmlnIHtcbiAgdHlwZTogJ2RldmljZS1ncm91cCc7XG4gIGRldmljZVR5cGU6ICdzd2l0Y2gnIHwgJ3NlbnNvcicgfCAnYmluYXJ5X3NlbnNvcicgfCAnY292ZXInIHwgJ2Zhbic7XG4gIGdyb3VwTmFtZT86IHN0cmluZztcbiAgc2hvd09mZmxpbmU/OiBib29sZWFuO1xuICBzaG93R3JvdXBDb250cm9scz86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBHcm91cGVkRW50aXR5IHtcbiAgZW50aXR5SWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBzdGF0ZTogc3RyaW5nO1xuICBpY29uPzogc3RyaW5nO1xuICBsYXN0Q2hhbmdlZD86IERhdGU7XG4gIGlzVG9nZ2xlYWJsZTogYm9vbGVhbjtcbiAgaXNPbmxpbmU6IGJvb2xlYW47XG59XG5cbkBjdXN0b21FbGVtZW50KCdkYXNodmlldy1kZXZpY2UtZ3JvdXAtd2lkZ2V0JylcbmV4cG9ydCBjbGFzcyBEZXZpY2VHcm91cFdpZGdldCBleHRlbmRzIERhc2h2aWV3V2lkZ2V0IHtcbiAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pIGRldmljZVR5cGU6IHN0cmluZyA9ICdzd2l0Y2gnO1xuICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSkgZ3JvdXBOYW1lPzogc3RyaW5nO1xuICBAc3RhdGUoKSBwcml2YXRlIGV4cGFuZGVkID0gZmFsc2U7XG4gIEBzdGF0ZSgpIHByaXZhdGUgZ3JvdXBlZEVudGl0aWVzOiBHcm91cGVkRW50aXR5W10gPSBbXTtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBvbmxpbmVDb3VudCA9IDA7XG4gIEBzdGF0ZSgpIHByaXZhdGUgYWN0aXZlQ291bnQgPSAwO1xuXG4gIHByb3RlY3RlZCBzdWJzY3JpYmVkRW50aXRpZXMoKTogc3RyaW5nW10ge1xuICAgIC8vIFN1YnNjcmliZSB0byBhbGwgZW50aXRpZXMgd2hlbiBleHBhbmRlZCwgb3IganVzdCBhY3RpdmUgb25lcyB3aGVuIGNvbGxhcHNlZFxuICAgIGNvbnN0IGVudGl0aWVzID0gdGhpcy53aWRnZXRDb25maWc/LmVudGl0aWVzIHx8IFtdO1xuICAgIFxuICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICByZXR1cm4gZW50aXRpZXM7XG4gICAgfVxuICAgIFxuICAgIC8vIFdoZW4gY29sbGFwc2VkLCBvbmx5IHN1YnNjcmliZSB0byBhY3RpdmUgZW50aXRpZXNcbiAgICByZXR1cm4gZW50aXRpZXMuZmlsdGVyKGlkID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5lbnRpdHlTdGF0ZXMuZ2V0KGlkKTtcbiAgICAgIHJldHVybiBzdGF0ZSAmJiBzdGF0ZS5zdGF0ZSAhPT0gJ3VuYXZhaWxhYmxlJyAmJiBzdGF0ZS5zdGF0ZSAhPT0gJ3Vua25vd24nO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldERlZmF1bHRDb25maWcoKTogUGFydGlhbDxEZXZpY2VHcm91cFdpZGdldENvbmZpZz4ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZGV2aWNlLWdyb3VwJyxcbiAgICAgIGRldmljZVR5cGU6ICdzd2l0Y2gnLFxuICAgICAgZW50aXRpZXM6IFtdLFxuICAgICAgc2hvd09mZmxpbmU6IGZhbHNlLFxuICAgICAgc2hvd0dyb3VwQ29udHJvbHM6IHRydWUsXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BzOiBQcm9wZXJ0eVZhbHVlcyk6IHZvaWQge1xuICAgIHN1cGVyLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcHMpO1xuICAgIHRoaXMudXBkYXRlR3JvdXBlZEVudGl0aWVzKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TdGF0ZUNoYW5nZWQoZW50aXR5SWQ6IHN0cmluZywgbmV3U3RhdGU6IGFueSwgb2xkU3RhdGU6IGFueSk6IHZvaWQge1xuICAgIHN1cGVyLm9uU3RhdGVDaGFuZ2VkKGVudGl0eUlkLCBuZXdTdGF0ZSwgb2xkU3RhdGUpO1xuICAgIHRoaXMudXBkYXRlR3JvdXBlZEVudGl0aWVzKCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUdyb3VwZWRFbnRpdGllcygpOiB2b2lkIHtcbiAgICBjb25zdCBncm91cGVkOiBHcm91cGVkRW50aXR5W10gPSBbXTtcbiAgICBsZXQgb25saW5lQ291bnQgPSAwO1xuICAgIGxldCBhY3RpdmVDb3VudCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IFtlbnRpdHlJZCwgc3RhdGVdIG9mIHRoaXMuZW50aXR5U3RhdGVzKSB7XG4gICAgICBjb25zdCBpc09ubGluZSA9IHN0YXRlLnN0YXRlICE9PSAndW5hdmFpbGFibGUnICYmIHN0YXRlLnN0YXRlICE9PSAndW5rbm93bic7XG4gICAgICBjb25zdCBpc1RvZ2dsZWFibGUgPSB0aGlzLmlzVG9nZ2xlYWJsZUVudGl0eShlbnRpdHlJZCk7XG4gICAgICBjb25zdCBpc0FjdGl2ZSA9IGlzVG9nZ2xlYWJsZSA/IHN0YXRlLnN0YXRlID09PSAnb24nIDogaXNPbmxpbmU7XG5cbiAgICAgIGlmIChpc09ubGluZSkgb25saW5lQ291bnQrKztcbiAgICAgIGlmIChpc0FjdGl2ZSkgYWN0aXZlQ291bnQrKztcblxuICAgICAgZ3JvdXBlZC5wdXNoKHtcbiAgICAgICAgZW50aXR5SWQsXG4gICAgICAgIG5hbWU6IHN0YXRlLmF0dHJpYnV0ZXMuZnJpZW5kbHlfbmFtZSB8fCBlbnRpdHlJZC5zcGxpdCgnLicpWzFdLnJlcGxhY2UoL18vZywgJyAnKSxcbiAgICAgICAgc3RhdGU6IHN0YXRlLnN0YXRlLFxuICAgICAgICBpY29uOiBzdGF0ZS5hdHRyaWJ1dGVzLmljb24gfHwgdGhpcy5nZXREZWZhdWx0SWNvbihlbnRpdHlJZCksXG4gICAgICAgIGxhc3RDaGFuZ2VkOiBzdGF0ZS5sYXN0X2NoYW5nZWQgPyBuZXcgRGF0ZShzdGF0ZS5sYXN0X2NoYW5nZWQpIDogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvZ2dsZWFibGUsXG4gICAgICAgIGlzT25saW5lLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gU29ydCBieSBvbmxpbmUgc3RhdHVzLCB0aGVuIGJ5IHN0YXRlLCB0aGVuIGJ5IG5hbWVcbiAgICBncm91cGVkLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGlmIChhLmlzT25saW5lICE9PSBiLmlzT25saW5lKSByZXR1cm4gYi5pc09ubGluZSA/IDEgOiAtMTtcbiAgICAgIGlmIChhLnN0YXRlICE9PSBiLnN0YXRlKSB7XG4gICAgICAgIGlmIChhLnN0YXRlID09PSAnb24nKSByZXR1cm4gLTE7XG4gICAgICAgIGlmIChiLnN0YXRlID09PSAnb24nKSByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5ncm91cGVkRW50aXRpZXMgPSBncm91cGVkO1xuICAgIHRoaXMub25saW5lQ291bnQgPSBvbmxpbmVDb3VudDtcbiAgICB0aGlzLmFjdGl2ZUNvdW50ID0gYWN0aXZlQ291bnQ7XG4gIH1cblxuICBwcml2YXRlIGlzVG9nZ2xlYWJsZUVudGl0eShlbnRpdHlJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgZG9tYWluID0gZW50aXR5SWQuc3BsaXQoJy4nKVswXTtcbiAgICByZXR1cm4gWydzd2l0Y2gnLCAnbGlnaHQnLCAnZmFuJywgJ2lucHV0X2Jvb2xlYW4nLCAnY292ZXInXS5pbmNsdWRlcyhkb21haW4pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXREZWZhdWx0SWNvbihlbnRpdHlJZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBkb21haW4gPSBlbnRpdHlJZC5zcGxpdCgnLicpWzBdO1xuICAgIGNvbnN0IGljb25NYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnc3dpdGNoJzogJ21kaTp0b2dnbGUtc3dpdGNoJyxcbiAgICAgICdzZW5zb3InOiAnbWRpOmV5ZScsXG4gICAgICAnYmluYXJ5X3NlbnNvcic6ICdtZGk6cmFkaW9ib3gtYmxhbmsnLFxuICAgICAgJ2NvdmVyJzogJ21kaTp3aW5kb3ctc2h1dHRlcicsXG4gICAgICAnZmFuJzogJ21kaTpmYW4nLFxuICAgICAgJ2xpZ2h0JzogJ21kaTpsaWdodGJ1bGInLFxuICAgIH07XG4gICAgcmV0dXJuIGljb25NYXBbZG9tYWluXSB8fCAnbWRpOmRldmljZXMnO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgY29uc3QgdGl0bGUgPSB0aGlzLmdyb3VwTmFtZSB8fCBcbiAgICAgICAgICAgICAgICAgIHRoaXMud2lkZ2V0Q29uZmlnPy50aXRsZSB8fCBcbiAgICAgICAgICAgICAgICAgIGAke3RoaXMuZGV2aWNlVHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRoaXMuZGV2aWNlVHlwZS5zbGljZSgxKX1zYDtcblxuICAgIGlmICh0aGlzLmlzTG9hZGluZykge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3aWRnZXQtbG9hZGluZ1wiPlxuICAgICAgICAgIExvYWRpbmcgZGV2aWNlcy4uLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwid2lkZ2V0LWVycm9yXCI+XG4gICAgICAgICAgJHt0aGlzLmVycm9yfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0gdGhpcy53aWRnZXRDb25maWcgYXMgRGV2aWNlR3JvdXBXaWRnZXRDb25maWc7XG4gICAgY29uc3Qgc2hvd09mZmxpbmUgPSBjb25maWc/LnNob3dPZmZsaW5lID8/IGZhbHNlO1xuICAgIGNvbnN0IGZpbHRlcmVkRW50aXRpZXMgPSBzaG93T2ZmbGluZSA/IFxuICAgICAgdGhpcy5ncm91cGVkRW50aXRpZXMgOiBcbiAgICAgIHRoaXMuZ3JvdXBlZEVudGl0aWVzLmZpbHRlcihlID0+IGUuaXNPbmxpbmUpO1xuXG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8aGEtY2FyZD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRlclwiIEBjbGljaz0ke3RoaXMudG9nZ2xlRXhwYW5kZWR9PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZWFkZXItY29udGVudFwiPlxuICAgICAgICAgICAgPGgyPiR7dGl0bGV9PC9oMj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkZXZpY2UtY291bnRcIj5cbiAgICAgICAgICAgICAgJHt0aGlzLmFjdGl2ZUNvdW50fS8ke3RoaXMub25saW5lQ291bnR9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aGEtaWNvblxuICAgICAgICAgICAgY2xhc3M9XCJleHBhbmQtaWNvbiAke3RoaXMuZXhwYW5kZWQgPyAnZXhwYW5kZWQnIDogJyd9XCJcbiAgICAgICAgICAgIGljb249XCJtZGk6Y2hldnJvbi1kb3duXCJcbiAgICAgICAgICA+PC9oYS1pY29uPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICAke3RoaXMuZXhwYW5kZWQgPyBodG1sYFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbnRpdGllc1wiPlxuICAgICAgICAgICAgJHtmaWx0ZXJlZEVudGl0aWVzLmxlbmd0aCA9PT0gMCA/IGh0bWxgXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eS1zdGF0ZVwiPlxuICAgICAgICAgICAgICAgIE5vICR7c2hvd09mZmxpbmUgPyAnJyA6ICdvbmxpbmUnfSBkZXZpY2VzIGZvdW5kXG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgYCA6IGZpbHRlcmVkRW50aXRpZXMubWFwKGVudGl0eSA9PiB0aGlzLnJlbmRlckVudGl0eShlbnRpdHkpKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYCA6ICcnfVxuXG4gICAgICAgICR7dGhpcy5yZW5kZXJBY3Rpb25zKCl9XG4gICAgICA8L2hhLWNhcmQ+XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyRW50aXR5KGVudGl0eTogR3JvdXBlZEVudGl0eSk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdCBzdGF0ZURpc3BsYXkgPSB0aGlzLmdldFN0YXRlRGlzcGxheShlbnRpdHkpO1xuICAgIGNvbnN0IHN0YXRlQ2xhc3MgPSBlbnRpdHkuaXNPbmxpbmUgPyAnJyA6ICdvZmZsaW5lJztcblxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImVudGl0eS1yb3cgJHtzdGF0ZUNsYXNzfVwiPlxuICAgICAgICA8aGEtaWNvbiBcbiAgICAgICAgICBpY29uPVwiJHtlbnRpdHkuaWNvbn1cIlxuICAgICAgICAgIGNsYXNzPVwiZW50aXR5LWljb24gJHtlbnRpdHkuc3RhdGUgPT09ICdvbicgPyAnYWN0aXZlJyA6ICcnfVwiXG4gICAgICAgID48L2hhLWljb24+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZW50aXR5LW5hbWVcIj4ke2VudGl0eS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgJHtlbnRpdHkuaXNUb2dnbGVhYmxlICYmIGVudGl0eS5pc09ubGluZSA/IGh0bWxgXG4gICAgICAgICAgPGhhLXN3aXRjaFxuICAgICAgICAgICAgLmNoZWNrZWQ9JHtlbnRpdHkuc3RhdGUgPT09ICdvbid9XG4gICAgICAgICAgICBAY2hhbmdlPSR7KCkgPT4gdGhpcy50b2dnbGVFbnRpdHkoZW50aXR5LmVudGl0eUlkKX1cbiAgICAgICAgICA+PC9oYS1zd2l0Y2g+XG4gICAgICAgIGAgOiBodG1sYFxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZW50aXR5LXN0YXRlXCI+JHtzdGF0ZURpc3BsYXl9PC9zcGFuPlxuICAgICAgICBgfVxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3RhdGVEaXNwbGF5KGVudGl0eTogR3JvdXBlZEVudGl0eSk6IHN0cmluZyB7XG4gICAgaWYgKCFlbnRpdHkuaXNPbmxpbmUpIHJldHVybiAnT2ZmbGluZSc7XG4gICAgXG4gICAgLy8gRm9yIHNlbnNvcnMsIHNob3cgdGhlIHZhbHVlIHdpdGggdW5pdFxuICAgIGlmIChlbnRpdHkuZW50aXR5SWQuaW5jbHVkZXMoJ3NlbnNvcicpKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZW50aXR5U3RhdGVzLmdldChlbnRpdHkuZW50aXR5SWQpO1xuICAgICAgY29uc3QgdW5pdCA9IHN0YXRlPy5hdHRyaWJ1dGVzPy51bml0X29mX21lYXN1cmVtZW50IHx8ICcnO1xuICAgICAgcmV0dXJuIGAke2VudGl0eS5zdGF0ZX0ke3VuaXQgPyAnICcgKyB1bml0IDogJyd9YDtcbiAgICB9XG4gICAgXG4gICAgLy8gRm9yIGJpbmFyeSBzZW5zb3JzLCBzaG93IG1vcmUgZGVzY3JpcHRpdmUgdGV4dFxuICAgIGlmIChlbnRpdHkuZW50aXR5SWQuaW5jbHVkZXMoJ2JpbmFyeV9zZW5zb3InKSkge1xuICAgICAgcmV0dXJuIGVudGl0eS5zdGF0ZSA9PT0gJ29uJyA/ICdEZXRlY3RlZCcgOiAnQ2xlYXInO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZW50aXR5LnN0YXRlO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJBY3Rpb25zKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLndpZGdldENvbmZpZyBhcyBEZXZpY2VHcm91cFdpZGdldENvbmZpZztcbiAgICBjb25zdCBzaG93R3JvdXBDb250cm9scyA9IGNvbmZpZz8uc2hvd0dyb3VwQ29udHJvbHMgPz8gdHJ1ZTtcbiAgICBcbiAgICBpZiAoIXNob3dHcm91cENvbnRyb2xzIHx8ICF0aGlzLmhhc1RvZ2dsZWFibGVFbnRpdGllcygpKSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc0FjdGl2ZURldmljZXMgPSB0aGlzLmdyb3VwZWRFbnRpdGllcy5zb21lKGUgPT4gXG4gICAgICBlLmlzVG9nZ2xlYWJsZSAmJiBlLmlzT25saW5lICYmIGUuc3RhdGUgPT09ICdvbidcbiAgICApO1xuXG4gICAgcmV0dXJuIGh0bWxgXG4gICAgICA8ZGl2IGNsYXNzPVwiYWN0aW9uc1wiPlxuICAgICAgICAke2hhc0FjdGl2ZURldmljZXMgPyBodG1sYFxuICAgICAgICAgIDxtd2MtYnV0dG9uIEBjbGljaz0ke3RoaXMudHVybkFsbE9mZn0+XG4gICAgICAgICAgICA8aGEtaWNvbiBpY29uPVwibWRpOnBvd2VyLW9mZlwiPjwvaGEtaWNvbj5cbiAgICAgICAgICAgIEFsbCBPZmZcbiAgICAgICAgICA8L213Yy1idXR0b24+XG4gICAgICAgIGAgOiAnJ31cbiAgICAgICAgPG13Yy1idXR0b24gQGNsaWNrPSR7dGhpcy50dXJuQWxsT259PlxuICAgICAgICAgIDxoYS1pY29uIGljb249XCJtZGk6cG93ZXItb25cIj48L2hhLWljb24+XG4gICAgICAgICAgQWxsIE9uXG4gICAgICAgIDwvbXdjLWJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIGhhc1RvZ2dsZWFibGVFbnRpdGllcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ncm91cGVkRW50aXRpZXMuc29tZShlID0+IGUuaXNUb2dnbGVhYmxlICYmIGUuaXNPbmxpbmUpO1xuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVFeHBhbmRlZCgpOiB2b2lkIHtcbiAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG4gICAgXG4gICAgLy8gVXBkYXRlIHN1YnNjcmlwdGlvbnMgd2hlbiBleHBhbmRpbmcvY29sbGFwc2luZ1xuICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZVN1YnNjcmlwdGlvbnMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHR1cm5BbGxPZmYoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgdG9nZ2xlYWJsZSA9IHRoaXMuZ3JvdXBlZEVudGl0aWVzLmZpbHRlcihlID0+IFxuICAgICAgZS5pc1RvZ2dsZWFibGUgJiYgZS5pc09ubGluZSAmJiBlLnN0YXRlID09PSAnb24nXG4gICAgKTtcblxuICAgIGZvciAoY29uc3QgZW50aXR5IG9mIHRvZ2dsZWFibGUpIHtcbiAgICAgIGF3YWl0IHRoaXMudHVybk9mZihlbnRpdHkuZW50aXR5SWQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdHVybkFsbE9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHRvZ2dsZWFibGUgPSB0aGlzLmdyb3VwZWRFbnRpdGllcy5maWx0ZXIoZSA9PiBcbiAgICAgIGUuaXNUb2dnbGVhYmxlICYmIGUuaXNPbmxpbmUgJiYgZS5zdGF0ZSA9PT0gJ29mZidcbiAgICApO1xuXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgdG9nZ2xlYWJsZSkge1xuICAgICAgYXdhaXQgdGhpcy50dXJuT24oZW50aXR5LmVudGl0eUlkKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc3R5bGVzID0gW1xuICAgIERhc2h2aWV3V2lkZ2V0LnN0eWxlcyxcbiAgICBjc3NgXG4gICAgICBoYS1jYXJkIHtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgfVxuXG4gICAgICAuaGVhZGVyIHtcbiAgICAgICAgcGFkZGluZzogMTZweDtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sIHJnYmEodmFyKC0tcmdiLXByaW1hcnktY29sb3IpLCAwLjA1KSwgdHJhbnNwYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICAuaGVhZGVyLWNvbnRlbnQge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDEycHg7XG4gICAgICB9XG5cbiAgICAgIC5oZWFkZXIgaDIge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICB9XG5cbiAgICAgIC5kZXZpY2UtY291bnQge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcbiAgICAgICAgY29sb3I6IHZhcigtLXRleHQtcHJpbWFyeS1jb2xvciwgd2hpdGUpO1xuICAgICAgICBwYWRkaW5nOiAycHggOHB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgfVxuXG4gICAgICAuZXhwYW5kLWljb24ge1xuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcyBlYXNlO1xuICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAuZXhwYW5kLWljb24uZXhwYW5kZWQge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xuICAgICAgfVxuXG4gICAgICAuZW50aXRpZXMge1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgICBwYWRkaW5nOiAwIDE2cHg7XG4gICAgICAgIG1heC1oZWlnaHQ6IDQwMHB4O1xuICAgICAgfVxuXG4gICAgICAuZW50aXR5LXJvdyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogMTJweDtcbiAgICAgICAgcGFkZGluZzogMTJweCAwO1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tZGl2aWRlci1jb2xvcik7XG4gICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMC4ycyBlYXNlO1xuICAgICAgfVxuXG4gICAgICAuZW50aXR5LXJvdzpsYXN0LWNoaWxkIHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgLmVudGl0eS1yb3cub2ZmbGluZSB7XG4gICAgICAgIG9wYWNpdHk6IDAuNTtcbiAgICAgIH1cblxuICAgICAgLmVudGl0eS1pY29uIHtcbiAgICAgICAgLS1tZGMtaWNvbi1zaXplOiAyMHB4O1xuICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgICAgICB0cmFuc2l0aW9uOiBjb2xvciAwLjJzIGVhc2U7XG4gICAgICB9XG5cbiAgICAgIC5lbnRpdHktaWNvbi5hY3RpdmUge1xuICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC5lbnRpdHktbmFtZSB7XG4gICAgICAgIGZsZXg6IDE7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgfVxuXG4gICAgICAuZW50aXR5LXN0YXRlIHtcbiAgICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgICAgbWluLXdpZHRoOiA2MHB4O1xuICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgIH1cblxuICAgICAgLmVtcHR5LXN0YXRlIHtcbiAgICAgICAgcGFkZGluZzogMzJweDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICB9XG5cbiAgICAgIC5hY3Rpb25zIHtcbiAgICAgICAgcGFkZGluZzogOHB4IDE2cHg7XG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgZ2FwOiA4cHg7XG4gICAgICB9XG5cbiAgICAgIC5hY3Rpb25zOmVtcHR5IHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cblxuICAgICAgbXdjLWJ1dHRvbiB7XG4gICAgICAgIC0tbWRjLXRoZW1lLXByaW1hcnk6IHZhcigtLXByaW1hcnktY29sb3IpO1xuICAgICAgfVxuXG4gICAgICBtd2MtYnV0dG9uIGhhLWljb24ge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICAgIH1cbiAgICBgXG4gIF07XG59IiwiLyoqXG4gKiBDbGltYXRlIHdpZGdldCBmb3IgRGFzaHZpZXcgVjIuXG4gKiBDb250cm9scyBIVkFDIHN5c3RlbXMsIHRoZXJtb3N0YXRzLCBhbmQgY2xpbWF0ZSBlbnRpdGllcy5cbiAqL1xuXG5pbXBvcnQgeyBQcm9wZXJ0eVZhbHVlcywgVGVtcGxhdGVSZXN1bHQsIGNzcywgaHRtbCB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBjdXN0b21FbGVtZW50LCBwcm9wZXJ0eSwgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBEYXNodmlld1dpZGdldCwgV2lkZ2V0Q29uZmlnIH0gZnJvbSAnLi4vY29yZS93aWRnZXQtYmFzZSc7XG5pbXBvcnQgeyBza2VsZXRvblN0eWxlcywgdG91Y2hTdHlsZXMgfSBmcm9tICcuLi9zdHlsZXMvYW5pbWF0aW9ucyc7XG5cbmludGVyZmFjZSBDbGltYXRlV2lkZ2V0Q29uZmlnIGV4dGVuZHMgV2lkZ2V0Q29uZmlnIHtcbiAgdHlwZTogJ2NsaW1hdGUnO1xuICBjbGltYXRlRW50aXR5SWQ6IHN0cmluZztcbiAgc2hvd0h1bWlkaXR5PzogYm9vbGVhbjtcbiAgc2hvd1ByZXNldHM/OiBib29sZWFuO1xuICB0ZW1wZXJhdHVyZVN0ZXA/OiBudW1iZXI7XG59XG5cbnR5cGUgSHZhY01vZGUgPSAnb2ZmJyB8ICdoZWF0JyB8ICdjb29sJyB8ICdoZWF0X2Nvb2wnIHwgJ2F1dG8nIHwgJ2RyeScgfCAnZmFuX29ubHknO1xudHlwZSBQcmVzZXRNb2RlID0gJ2VjbycgfCAnYXdheScgfCAnYm9vc3QnIHwgJ2NvbWZvcnQnIHwgJ2hvbWUnIHwgJ3NsZWVwJyB8ICdhY3Rpdml0eSc7XG5cbkBjdXN0b21FbGVtZW50KCdkYXNodmlldy1jbGltYXRlLXdpZGdldCcpXG5leHBvcnQgY2xhc3MgQ2xpbWF0ZVdpZGdldCBleHRlbmRzIERhc2h2aWV3V2lkZ2V0IHtcbiAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pIGNsaW1hdGVFbnRpdHlJZD86IHN0cmluZztcbiAgQHN0YXRlKCkgcHJpdmF0ZSBjdXJyZW50VGVtcD86IG51bWJlcjtcbiAgQHN0YXRlKCkgcHJpdmF0ZSB0YXJnZXRUZW1wPzogbnVtYmVyO1xuICBAc3RhdGUoKSBwcml2YXRlIHRhcmdldFRlbXBMb3c/OiBudW1iZXI7XG4gIEBzdGF0ZSgpIHByaXZhdGUgdGFyZ2V0VGVtcEhpZ2g/OiBudW1iZXI7XG4gIEBzdGF0ZSgpIHByaXZhdGUgaHVtaWRpdHk/OiBudW1iZXI7XG4gIEBzdGF0ZSgpIHByaXZhdGUgaHZhY01vZGU6IEh2YWNNb2RlID0gJ29mZic7XG4gIEBzdGF0ZSgpIHByaXZhdGUgcHJlc2V0TW9kZT86IFByZXNldE1vZGU7XG4gIEBzdGF0ZSgpIHByaXZhdGUgYXZhaWxhYmxlTW9kZXM6IEh2YWNNb2RlW10gPSBbXTtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBhdmFpbGFibGVQcmVzZXRzOiBQcmVzZXRNb2RlW10gPSBbXTtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBpc0FkanVzdGluZyA9IGZhbHNlO1xuICBAc3RhdGUoKSBwcml2YXRlIHNob3dUZW1wRGlhbCA9IHRydWU7XG5cbiAgcHJvdGVjdGVkIHN1YnNjcmliZWRFbnRpdGllcygpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgZW50aXRpZXM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgLy8gUHJpbWFyeSBjbGltYXRlIGVudGl0eVxuICAgIGNvbnN0IGNsaW1hdGVJZCA9IHRoaXMuY2xpbWF0ZUVudGl0eUlkIHx8IHRoaXMud2lkZ2V0Q29uZmlnPy5lbnRpdGllcz8uWzBdO1xuICAgIGlmIChjbGltYXRlSWQpIHtcbiAgICAgIGVudGl0aWVzLnB1c2goY2xpbWF0ZUlkKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUmVsYXRlZCBodW1pZGl0eSBzZW5zb3IgaWYgYW55XG4gICAgY29uc3QgaHVtaWRpdHlFbnRpdHkgPSB0aGlzLndpZGdldENvbmZpZz8uZW50aXRpZXM/LmZpbmQoZSA9PiBcbiAgICAgIGUuaW5jbHVkZXMoJ2h1bWlkaXR5JykgJiYgIWUuaW5jbHVkZXMoJ2NsaW1hdGUnKVxuICAgICk7XG4gICAgaWYgKGh1bWlkaXR5RW50aXR5KSB7XG4gICAgICBlbnRpdGllcy5wdXNoKGh1bWlkaXR5RW50aXR5KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGVudGl0aWVzO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldERlZmF1bHRDb25maWcoKTogUGFydGlhbDxDbGltYXRlV2lkZ2V0Q29uZmlnPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdjbGltYXRlJyxcbiAgICAgIGVudGl0aWVzOiBbXSxcbiAgICAgIHNob3dIdW1pZGl0eTogdHJ1ZSxcbiAgICAgIHNob3dQcmVzZXRzOiB0cnVlLFxuICAgICAgdGVtcGVyYXR1cmVTdGVwOiAwLjUsXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BzOiBQcm9wZXJ0eVZhbHVlcyk6IHZvaWQge1xuICAgIHN1cGVyLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcHMpO1xuICAgIHRoaXMudXBkYXRlQ2xpbWF0ZVN0YXRlKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb25TdGF0ZUNoYW5nZWQoZW50aXR5SWQ6IHN0cmluZywgbmV3U3RhdGU6IGFueSwgb2xkU3RhdGU6IGFueSk6IHZvaWQge1xuICAgIHN1cGVyLm9uU3RhdGVDaGFuZ2VkKGVudGl0eUlkLCBuZXdTdGF0ZSwgb2xkU3RhdGUpO1xuICAgIHRoaXMudXBkYXRlQ2xpbWF0ZVN0YXRlKCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUNsaW1hdGVTdGF0ZSgpOiB2b2lkIHtcbiAgICBjb25zdCBjbGltYXRlSWQgPSB0aGlzLmNsaW1hdGVFbnRpdHlJZCB8fCB0aGlzLndpZGdldENvbmZpZz8uZW50aXRpZXM/LlswXTtcbiAgICBpZiAoIWNsaW1hdGVJZCkgcmV0dXJuO1xuXG4gICAgY29uc3QgY2xpbWF0ZVN0YXRlID0gdGhpcy5lbnRpdHlTdGF0ZXMuZ2V0KGNsaW1hdGVJZCk7XG4gICAgaWYgKCFjbGltYXRlU3RhdGUpIHJldHVybjtcblxuICAgIC8vIFVwZGF0ZSB0ZW1wZXJhdHVyZSB2YWx1ZXNcbiAgICB0aGlzLmN1cnJlbnRUZW1wID0gY2xpbWF0ZVN0YXRlLmF0dHJpYnV0ZXMuY3VycmVudF90ZW1wZXJhdHVyZTtcbiAgICB0aGlzLmh2YWNNb2RlID0gY2xpbWF0ZVN0YXRlLnN0YXRlIGFzIEh2YWNNb2RlO1xuICAgIHRoaXMucHJlc2V0TW9kZSA9IGNsaW1hdGVTdGF0ZS5hdHRyaWJ1dGVzLnByZXNldF9tb2RlIGFzIFByZXNldE1vZGU7XG4gICAgXG4gICAgLy8gSGFuZGxlIGRpZmZlcmVudCB0ZW1wZXJhdHVyZSBjb250cm9sIG1vZGVzXG4gICAgaWYgKGNsaW1hdGVTdGF0ZS5hdHRyaWJ1dGVzLnRhcmdldF90ZW1wX2xvdyAmJiBjbGltYXRlU3RhdGUuYXR0cmlidXRlcy50YXJnZXRfdGVtcF9oaWdoKSB7XG4gICAgICB0aGlzLnRhcmdldFRlbXBMb3cgPSBjbGltYXRlU3RhdGUuYXR0cmlidXRlcy50YXJnZXRfdGVtcF9sb3c7XG4gICAgICB0aGlzLnRhcmdldFRlbXBIaWdoID0gY2xpbWF0ZVN0YXRlLmF0dHJpYnV0ZXMudGFyZ2V0X3RlbXBfaGlnaDtcbiAgICAgIHRoaXMudGFyZ2V0VGVtcCA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50YXJnZXRUZW1wID0gY2xpbWF0ZVN0YXRlLmF0dHJpYnV0ZXMudGVtcGVyYXR1cmU7XG4gICAgICB0aGlzLnRhcmdldFRlbXBMb3cgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnRhcmdldFRlbXBIaWdoID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIEF2YWlsYWJsZSBtb2Rlc1xuICAgIHRoaXMuYXZhaWxhYmxlTW9kZXMgPSBjbGltYXRlU3RhdGUuYXR0cmlidXRlcy5odmFjX21vZGVzIHx8IFtdO1xuICAgIHRoaXMuYXZhaWxhYmxlUHJlc2V0cyA9IGNsaW1hdGVTdGF0ZS5hdHRyaWJ1dGVzLnByZXNldF9tb2RlcyB8fCBbXTtcblxuICAgIC8vIENoZWNrIGZvciBodW1pZGl0eSBzZW5zb3JcbiAgICBjb25zdCBodW1pZGl0eUVudGl0eSA9IHRoaXMud2lkZ2V0Q29uZmlnPy5lbnRpdGllcz8uZmluZChlID0+IFxuICAgICAgZS5pbmNsdWRlcygnaHVtaWRpdHknKSAmJiAhZS5pbmNsdWRlcygnY2xpbWF0ZScpXG4gICAgKTtcbiAgICBpZiAoaHVtaWRpdHlFbnRpdHkpIHtcbiAgICAgIGNvbnN0IGh1bWlkaXR5U3RhdGUgPSB0aGlzLmVudGl0eVN0YXRlcy5nZXQoaHVtaWRpdHlFbnRpdHkpO1xuICAgICAgaWYgKGh1bWlkaXR5U3RhdGUgJiYgaHVtaWRpdHlTdGF0ZS5zdGF0ZSAhPT0gJ3VuYXZhaWxhYmxlJykge1xuICAgICAgICB0aGlzLmh1bWlkaXR5ID0gcGFyc2VGbG9hdChodW1pZGl0eVN0YXRlLnN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdCBjbGltYXRlSWQgPSB0aGlzLmNsaW1hdGVFbnRpdHlJZCB8fCB0aGlzLndpZGdldENvbmZpZz8uZW50aXRpZXM/LlswXTtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMud2lkZ2V0Q29uZmlnPy50aXRsZSB8fCAnQ2xpbWF0ZSBDb250cm9sJztcblxuICAgIGlmICh0aGlzLmlzTG9hZGluZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU2tlbGV0b24oKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lcnJvciB8fCAhY2xpbWF0ZUlkKSB7XG4gICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPGRpdiBjbGFzcz1cIndpZGdldC1lcnJvclwiPlxuICAgICAgICAgICR7dGhpcy5lcnJvciB8fCAnTm8gY2xpbWF0ZSBlbnRpdHkgY29uZmlndXJlZCd9XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxoYS1jYXJkPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgICAgICAgPGgyPiR7dGl0bGV9PC9oMj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaHZhYy1tb2RlICR7dGhpcy5odmFjTW9kZX1cIj5cbiAgICAgICAgICAgICR7dGhpcy5odmFjTW9kZS50b1VwcGVyQ2FzZSgpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwidGVtcGVyYXR1cmUtZGlzcGxheVwiPlxuICAgICAgICAgICR7dGhpcy5zaG93VGVtcERpYWwgPyB0aGlzLnJlbmRlclRlbXBlcmF0dXJlRGlhbCgpIDogdGhpcy5yZW5kZXJUZW1wZXJhdHVyZURpc3BsYXkoKX1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgJHt0aGlzLnJlbmRlclRlbXBlcmF0dXJlQ29udHJvbHMoKX1cbiAgICAgICAgJHt0aGlzLnJlbmRlck1vZGVTZWxlY3RvcigpfVxuICAgICAgICAke3RoaXMucmVuZGVyUHJlc2V0U2VsZWN0b3IoKX1cbiAgICAgICAgJHt0aGlzLnJlbmRlckh1bWlkaXR5KCl9XG4gICAgICA8L2hhLWNhcmQ+XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyVGVtcGVyYXR1cmVEaXNwbGF5KCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBpZiAodGhpcy5jdXJyZW50VGVtcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaHRtbGA8c3BhbiBjbGFzcz1cInRlbXAtdW5hdmFpbGFibGVcIj4tLTwvc3Bhbj5gO1xuICAgIH1cblxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImN1cnJlbnQtdGVtcFwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInRlbXAtdmFsdWVcIj4ke3RoaXMuY3VycmVudFRlbXAudG9GaXhlZCgxKX08L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwidGVtcC11bml0XCI+wrBDPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgICAke3RoaXMucmVuZGVyVGFyZ2V0VGVtcCgpfVxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlclRlbXBlcmF0dXJlRGlhbCgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgaWYgKHRoaXMuY3VycmVudFRlbXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGh0bWxgPGRpdiBjbGFzcz1cInRlbXAtZGlhbC11bmF2YWlsYWJsZVwiPlRlbXBlcmF0dXJlIFVuYXZhaWxhYmxlPC9kaXY+YDtcbiAgICB9XG5cbiAgICBjb25zdCBtaW5UZW1wID0gMTA7XG4gICAgY29uc3QgbWF4VGVtcCA9IDM1O1xuICAgIGNvbnN0IGN1cnJlbnRQZXJjZW50ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMTAwLCAoKHRoaXMuY3VycmVudFRlbXAgLSBtaW5UZW1wKSAvIChtYXhUZW1wIC0gbWluVGVtcCkpICogMTAwKSk7XG4gICAgY29uc3QgdGFyZ2V0UGVyY2VudCA9IHRoaXMudGFyZ2V0VGVtcCA/IE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgKCh0aGlzLnRhcmdldFRlbXAgLSBtaW5UZW1wKSAvIChtYXhUZW1wIC0gbWluVGVtcCkpICogMTAwKSkgOiBjdXJyZW50UGVyY2VudDtcblxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cInRlbXAtZGlhbC1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRlbXAtZGlhbFwiPlxuICAgICAgICAgIDxzdmcgdmlld0JveD1cIjAgMCAyMDAgMjAwXCIgY2xhc3M9XCJkaWFsLXN2Z1wiPlxuICAgICAgICAgICAgPCEtLSBCYWNrZ3JvdW5kIGNpcmNsZSAtLT5cbiAgICAgICAgICAgIDxjaXJjbGUgY3g9XCIxMDBcIiBjeT1cIjEwMFwiIHI9XCI4MFwiIGNsYXNzPVwiZGlhbC1iZ1wiIC8+XG4gICAgICAgICAgICA8IS0tIEN1cnJlbnQgdGVtcGVyYXR1cmUgYXJjIC0tPlxuICAgICAgICAgICAgPGNpcmNsZSBcbiAgICAgICAgICAgICAgY3g9XCIxMDBcIiBcbiAgICAgICAgICAgICAgY3k9XCIxMDBcIiBcbiAgICAgICAgICAgICAgcj1cIjgwXCIgXG4gICAgICAgICAgICAgIGNsYXNzPVwiZGlhbC1jdXJyZW50XCJcbiAgICAgICAgICAgICAgc3Ryb2tlLWRhc2hhcnJheT1cIiR7KGN1cnJlbnRQZXJjZW50IC8gMTAwKSAqIDUwMi42fSA1MDIuNlwiXG4gICAgICAgICAgICAgIHRyYW5zZm9ybT1cInJvdGF0ZSgtOTAgMTAwIDEwMClcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwhLS0gVGFyZ2V0IHRlbXBlcmF0dXJlIGluZGljYXRvciAtLT5cbiAgICAgICAgICAgICR7dGhpcy50YXJnZXRUZW1wID8gaHRtbGBcbiAgICAgICAgICAgICAgPGNpcmNsZSBcbiAgICAgICAgICAgICAgICBjeD1cIjEwMFwiIFxuICAgICAgICAgICAgICAgIGN5PVwiMTAwXCIgXG4gICAgICAgICAgICAgICAgcj1cIjgwXCIgXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJkaWFsLXRhcmdldFwiXG4gICAgICAgICAgICAgICAgc3Ryb2tlLWRhc2hhcnJheT1cIjMgNTAyLjZcIlxuICAgICAgICAgICAgICAgIHN0cm9rZS1kYXNob2Zmc2V0PVwiJHstKCh0YXJnZXRQZXJjZW50IC8gMTAwKSAqIDUwMi42KX1cIlxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybT1cInJvdGF0ZSgtOTAgMTAwIDEwMClcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgYCA6ICcnfVxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkaWFsLWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImN1cnJlbnQtdGVtcC1kaWFsXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGVtcC12YWx1ZS1kaWFsXCI+JHt0aGlzLmN1cnJlbnRUZW1wLnRvRml4ZWQoMSl9PC9zcGFuPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRlbXAtdW5pdC1kaWFsXCI+wrBDPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAke3RoaXMudGFyZ2V0VGVtcCA/IGh0bWxgXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXJnZXQtdGVtcC1kaWFsXCI+XG4gICAgICAgICAgICAgICAgVGFyZ2V0OiAke3RoaXMudGFyZ2V0VGVtcC50b0ZpeGVkKDEpfcKwQ1xuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIGAgOiAnJ31cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZW1wLXRyZW5kXCI+XG4gICAgICAgICAgJHt0aGlzLnJlbmRlclRlbXBlcmF0dXJlVHJlbmQoKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJUZW1wZXJhdHVyZVRyZW5kKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAvLyBQbGFjZWhvbGRlciBmb3IgdGVtcGVyYXR1cmUgdHJlbmQgbWluaS1ncmFwaFxuICAgIC8vIEluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBzaG93IGhpc3RvcmljYWwgZGF0YVxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cInRyZW5kLWluZGljYXRvclwiPlxuICAgICAgICA8aGEtaWNvbiBpY29uPVwibWRpOnRyZW5kaW5nLXVwXCIgY2xhc3M9XCJ0cmVuZC1pY29uXCI+PC9oYS1pY29uPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInRyZW5kLXRleHRcIj5UcmVuZGluZyB1cDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlclRhcmdldFRlbXAoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGlmICh0aGlzLmh2YWNNb2RlID09PSAnb2ZmJykge1xuICAgICAgcmV0dXJuIGh0bWxgYDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50YXJnZXRUZW1wTG93ICE9PSB1bmRlZmluZWQgJiYgdGhpcy50YXJnZXRUZW1wSGlnaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPGRpdiBjbGFzcz1cInRhcmdldC10ZW1wLXJhbmdlXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0YXJnZXQtbGFiZWxcIj5UYXJnZXQ6PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGFyZ2V0LXZhbHVlXCI+JHt0aGlzLnRhcmdldFRlbXBMb3cudG9GaXhlZCgxKX0gLSAke3RoaXMudGFyZ2V0VGVtcEhpZ2gudG9GaXhlZCgxKX3CsEM8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50YXJnZXRUZW1wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFyZ2V0LXRlbXBcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRhcmdldC1sYWJlbFwiPlRhcmdldDo8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0YXJnZXQtdmFsdWVcIj4ke3RoaXMudGFyZ2V0VGVtcC50b0ZpeGVkKDEpfcKwQzwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgIH1cblxuICAgIHJldHVybiBodG1sYGA7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlclRlbXBlcmF0dXJlQ29udHJvbHMoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGlmICh0aGlzLmh2YWNNb2RlID09PSAnb2ZmJyB8fCB0aGlzLmh2YWNNb2RlID09PSAnZmFuX29ubHknKSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMud2lkZ2V0Q29uZmlnIGFzIENsaW1hdGVXaWRnZXRDb25maWc7XG4gICAgY29uc3Qgc3RlcCA9IGNvbmZpZz8udGVtcGVyYXR1cmVTdGVwIHx8IDAuNTtcblxuICAgIGlmICh0aGlzLnRhcmdldFRlbXBMb3cgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnRhcmdldFRlbXBIaWdoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwidGVtcC1jb250cm9scy1kdWFsXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRlbXAtY29udHJvbFwiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjb250cm9sLWxhYmVsXCI+Q29vbCB0bzwvc3Bhbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgPGhhLWljb24tYnV0dG9uXG4gICAgICAgICAgICAgICAgaWNvbj1cIm1kaTptaW51c1wiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5hZGp1c3RUYXJnZXRUZW1wKCdsb3cnLCAtc3RlcCl9XG4gICAgICAgICAgICAgID48L2hhLWljb24tYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbnRyb2wtdmFsdWVcIj4ke3RoaXMudGFyZ2V0VGVtcExvdy50b0ZpeGVkKDEpfcKwQzwvc3Bhbj5cbiAgICAgICAgICAgICAgPGhhLWljb24tYnV0dG9uXG4gICAgICAgICAgICAgICAgaWNvbj1cIm1kaTpwbHVzXCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9JHsoKSA9PiB0aGlzLmFkanVzdFRhcmdldFRlbXAoJ2xvdycsIHN0ZXApfVxuICAgICAgICAgICAgICA+PC9oYS1pY29uLWJ1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZW1wLWNvbnRyb2xcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPkhlYXQgdG88L3NwYW4+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbC1idXR0b25zXCI+XG4gICAgICAgICAgICAgIDxoYS1pY29uLWJ1dHRvblxuICAgICAgICAgICAgICAgIGljb249XCJtZGk6bWludXNcIlxuICAgICAgICAgICAgICAgIEBjbGljaz0keygpID0+IHRoaXMuYWRqdXN0VGFyZ2V0VGVtcCgnaGlnaCcsIC1zdGVwKX1cbiAgICAgICAgICAgICAgPjwvaGEtaWNvbi1idXR0b24+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29udHJvbC12YWx1ZVwiPiR7dGhpcy50YXJnZXRUZW1wSGlnaC50b0ZpeGVkKDEpfcKwQzwvc3Bhbj5cbiAgICAgICAgICAgICAgPGhhLWljb24tYnV0dG9uXG4gICAgICAgICAgICAgICAgaWNvbj1cIm1kaTpwbHVzXCJcbiAgICAgICAgICAgICAgICBAY2xpY2s9JHsoKSA9PiB0aGlzLmFkanVzdFRhcmdldFRlbXAoJ2hpZ2gnLCBzdGVwKX1cbiAgICAgICAgICAgICAgPjwvaGEtaWNvbi1idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRhcmdldFRlbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZW1wLWNvbnRyb2xzXCI+XG4gICAgICAgICAgPGhhLWljb24tYnV0dG9uXG4gICAgICAgICAgICBpY29uPVwibWRpOm1pbnVzXCJcbiAgICAgICAgICAgIEBjbGljaz0keygpID0+IHRoaXMuYWRqdXN0VGFyZ2V0VGVtcCgnc2luZ2xlJywgLXN0ZXApfVxuICAgICAgICAgID48L2hhLWljb24tYnV0dG9uPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY29udHJvbC12YWx1ZVwiPiR7dGhpcy50YXJnZXRUZW1wLnRvRml4ZWQoMSl9wrBDPC9zcGFuPlxuICAgICAgICAgIDxoYS1pY29uLWJ1dHRvblxuICAgICAgICAgICAgaWNvbj1cIm1kaTpwbHVzXCJcbiAgICAgICAgICAgIEBjbGljaz0keygpID0+IHRoaXMuYWRqdXN0VGFyZ2V0VGVtcCgnc2luZ2xlJywgc3RlcCl9XG4gICAgICAgICAgPjwvaGEtaWNvbi1idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICByZXR1cm4gaHRtbGBgO1xuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJNb2RlU2VsZWN0b3IoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGlmICh0aGlzLmF2YWlsYWJsZU1vZGVzLmxlbmd0aCA8PSAxKSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cblxuICAgIGNvbnN0IG1vZGVJY29uczogUmVjb3JkPEh2YWNNb2RlLCBzdHJpbmc+ID0ge1xuICAgICAgJ29mZic6ICdtZGk6cG93ZXInLFxuICAgICAgJ2hlYXQnOiAnbWRpOmZpcmUnLFxuICAgICAgJ2Nvb2wnOiAnbWRpOnNub3dmbGFrZScsXG4gICAgICAnaGVhdF9jb29sJzogJ21kaTphdXRvcmVuZXcnLFxuICAgICAgJ2F1dG8nOiAnbWRpOmNhbGVuZGFyLXN5bmMnLFxuICAgICAgJ2RyeSc6ICdtZGk6d2F0ZXItcGVyY2VudCcsXG4gICAgICAnZmFuX29ubHknOiAnbWRpOmZhbicsXG4gICAgfTtcblxuICAgIGNvbnN0IG1vZGVDb2xvcnM6IFJlY29yZDxIdmFjTW9kZSwgc3RyaW5nPiA9IHtcbiAgICAgICdvZmYnOiAndmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpJyxcbiAgICAgICdoZWF0JzogJyNmZjZiMDAnLFxuICAgICAgJ2Nvb2wnOiAnIzAyODhkMScsXG4gICAgICAnaGVhdF9jb29sJzogJyMzODhlM2MnLFxuICAgICAgJ2F1dG8nOiAnIzM4OGUzYycsXG4gICAgICAnZHJ5JzogJyM5YzI3YjAnLFxuICAgICAgJ2Zhbl9vbmx5JzogJyM2MDdkOGInLFxuICAgIH07XG5cbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RlLXNlbGVjdG9yXCI+XG4gICAgICAgICR7dGhpcy5hdmFpbGFibGVNb2Rlcy5tYXAobW9kZSA9PiBodG1sYFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwibW9kZS1idXR0b24gdG91Y2gtdGFyZ2V0ICR7bW9kZSA9PT0gdGhpcy5odmFjTW9kZSA/ICdhY3RpdmUnIDogJyd9XCJcbiAgICAgICAgICAgIEBjbGljaz0keygpID0+IHRoaXMuc2V0SHZhY01vZGUobW9kZSl9XG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiU2V0ICR7bW9kZS5yZXBsYWNlKCdfJywgJyAnKX0gbW9kZVwiXG4gICAgICAgICAgICBzdHlsZT1cIi0tbW9kZS1jb2xvcjogJHttb2RlQ29sb3JzW21vZGVdfVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGhhLWljb24gaWNvbj1cIiR7bW9kZUljb25zW21vZGVdfVwiPjwvaGEtaWNvbj5cbiAgICAgICAgICAgIDxzcGFuPiR7bW9kZS5yZXBsYWNlKCdfJywgJyAnKX08L3NwYW4+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIGApfVxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyUHJlc2V0U2VsZWN0b3IoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMud2lkZ2V0Q29uZmlnIGFzIENsaW1hdGVXaWRnZXRDb25maWc7XG4gICAgaWYgKCFjb25maWc/LnNob3dQcmVzZXRzIHx8IHRoaXMuYXZhaWxhYmxlUHJlc2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBodG1sYGA7XG4gICAgfVxuXG4gICAgY29uc3QgcHJlc2V0SWNvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnZWNvJzogJ21kaTpsZWFmJyxcbiAgICAgICdhd2F5JzogJ21kaTpob21lLWV4cG9ydC1vdXRsaW5lJyxcbiAgICAgICdib29zdCc6ICdtZGk6cm9ja2V0LWxhdW5jaCcsXG4gICAgICAnY29tZm9ydCc6ICdtZGk6c29mYScsXG4gICAgICAnaG9tZSc6ICdtZGk6aG9tZScsXG4gICAgICAnc2xlZXAnOiAnbWRpOnNsZWVwJyxcbiAgICAgICdhY3Rpdml0eSc6ICdtZGk6cnVuJ1xuICAgIH07XG5cbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxkaXYgY2xhc3M9XCJwcmVzZXQtc2VsZWN0b3JcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJwcmVzZXQtbGFiZWxcIj5QcmVzZXRzOjwvc3Bhbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInByZXNldC1idXR0b25zXCI+XG4gICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgIGNsYXNzPVwicHJlc2V0LWJ1dHRvbiB0b3VjaC10YXJnZXQgJHshdGhpcy5wcmVzZXRNb2RlID8gJ2FjdGl2ZScgOiAnJ31cIlxuICAgICAgICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5zZXRQcmVzZXRNb2RlKG51bGwpfVxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIk5vIHByZXNldFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGhhLWljb24gaWNvbj1cIm1kaTpjbG9zZVwiPjwvaGEtaWNvbj5cbiAgICAgICAgICAgIDxzcGFuPk5vbmU8L3NwYW4+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgJHt0aGlzLmF2YWlsYWJsZVByZXNldHMubWFwKHByZXNldCA9PiBodG1sYFxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBjbGFzcz1cInByZXNldC1idXR0b24gdG91Y2gtdGFyZ2V0ICR7cHJlc2V0ID09PSB0aGlzLnByZXNldE1vZGUgPyAnYWN0aXZlJyA6ICcnfVwiXG4gICAgICAgICAgICAgIEBjbGljaz0keygpID0+IHRoaXMuc2V0UHJlc2V0TW9kZShwcmVzZXQpfVxuICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiU2V0ICR7cHJlc2V0fSBwcmVzZXRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aGEtaWNvbiBpY29uPVwiJHtwcmVzZXRJY29uc1twcmVzZXRdIHx8ICdtZGk6Y29nJ31cIj48L2hhLWljb24+XG4gICAgICAgICAgICAgIDxzcGFuPiR7cHJlc2V0fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIGApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckh1bWlkaXR5KCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLndpZGdldENvbmZpZyBhcyBDbGltYXRlV2lkZ2V0Q29uZmlnO1xuICAgIGlmICghY29uZmlnPy5zaG93SHVtaWRpdHkgfHwgdGhpcy5odW1pZGl0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cblxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImh1bWlkaXR5LWRpc3BsYXlcIj5cbiAgICAgICAgPGhhLWljb24gaWNvbj1cIm1kaTp3YXRlci1wZXJjZW50XCI+PC9oYS1pY29uPlxuICAgICAgICA8c3Bhbj5IdW1pZGl0eTogJHt0aGlzLmh1bWlkaXR5LnRvRml4ZWQoMCl9JTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFkanVzdFRhcmdldFRlbXAodHlwZTogJ3NpbmdsZScgfCAnbG93JyB8ICdoaWdoJywgY2hhbmdlOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5pc0FkanVzdGluZykgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IGNsaW1hdGVJZCA9IHRoaXMuY2xpbWF0ZUVudGl0eUlkIHx8IHRoaXMud2lkZ2V0Q29uZmlnPy5lbnRpdGllcz8uWzBdO1xuICAgIGlmICghY2xpbWF0ZUlkKSByZXR1cm47XG5cbiAgICB0aGlzLmlzQWRqdXN0aW5nID0gdHJ1ZTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBzZXJ2aWNlX2RhdGE6IGFueSA9IHt9O1xuICAgICAgXG4gICAgICBpZiAodHlwZSA9PT0gJ3NpbmdsZScgJiYgdGhpcy50YXJnZXRUZW1wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2VydmljZV9kYXRhLnRlbXBlcmF0dXJlID0gTWF0aC5yb3VuZCgodGhpcy50YXJnZXRUZW1wICsgY2hhbmdlKSAqIDIpIC8gMjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2xvdycgJiYgdGhpcy50YXJnZXRUZW1wTG93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2VydmljZV9kYXRhLnRhcmdldF90ZW1wX2xvdyA9IE1hdGgucm91bmQoKHRoaXMudGFyZ2V0VGVtcExvdyArIGNoYW5nZSkgKiAyKSAvIDI7XG4gICAgICAgIHNlcnZpY2VfZGF0YS50YXJnZXRfdGVtcF9oaWdoID0gdGhpcy50YXJnZXRUZW1wSGlnaDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2hpZ2gnICYmIHRoaXMudGFyZ2V0VGVtcEhpZ2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXJ2aWNlX2RhdGEudGFyZ2V0X3RlbXBfbG93ID0gdGhpcy50YXJnZXRUZW1wTG93O1xuICAgICAgICBzZXJ2aWNlX2RhdGEudGFyZ2V0X3RlbXBfaGlnaCA9IE1hdGgucm91bmQoKHRoaXMudGFyZ2V0VGVtcEhpZ2ggKyBjaGFuZ2UpICogMikgLyAyO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCB0aGlzLmhhc3MuY2FsbFNlcnZpY2UoJ2NsaW1hdGUnLCAnc2V0X3RlbXBlcmF0dXJlJywge1xuICAgICAgICBlbnRpdHlfaWQ6IGNsaW1hdGVJZCxcbiAgICAgICAgLi4uc2VydmljZV9kYXRhXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGFkanVzdCB0ZW1wZXJhdHVyZTonLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuaXNBZGp1c3RpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNldEh2YWNNb2RlKG1vZGU6IEh2YWNNb2RlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2xpbWF0ZUlkID0gdGhpcy5jbGltYXRlRW50aXR5SWQgfHwgdGhpcy53aWRnZXRDb25maWc/LmVudGl0aWVzPy5bMF07XG4gICAgaWYgKCFjbGltYXRlSWQpIHJldHVybjtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmhhc3MuY2FsbFNlcnZpY2UoJ2NsaW1hdGUnLCAnc2V0X2h2YWNfbW9kZScsIHtcbiAgICAgICAgZW50aXR5X2lkOiBjbGltYXRlSWQsXG4gICAgICAgIGh2YWNfbW9kZTogbW9kZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzZXQgSFZBQyBtb2RlOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNldFByZXNldE1vZGUocHJlc2V0OiBQcmVzZXRNb2RlIHwgbnVsbCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGNsaW1hdGVJZCA9IHRoaXMuY2xpbWF0ZUVudGl0eUlkIHx8IHRoaXMud2lkZ2V0Q29uZmlnPy5lbnRpdGllcz8uWzBdO1xuICAgIGlmICghY2xpbWF0ZUlkKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5oYXNzLmNhbGxTZXJ2aWNlKCdjbGltYXRlJywgJ3NldF9wcmVzZXRfbW9kZScsIHtcbiAgICAgICAgZW50aXR5X2lkOiBjbGltYXRlSWQsXG4gICAgICAgIHByZXNldF9tb2RlOiBwcmVzZXRcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gc2V0IHByZXNldCBtb2RlOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbmRlclNrZWxldG9uKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxoYS1jYXJkPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNrZWxldG9uIHNrZWxldG9uLXRleHQgbGFyZ2VcIiBzdHlsZT1cIndpZHRoOiAxNDBweDtcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2tlbGV0b24gc2tlbGV0b24tYnV0dG9uXCIgc3R5bGU9XCJ3aWR0aDogODBweDsgaGVpZ2h0OiAyOHB4O1wiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRlbXBlcmF0dXJlLWRpc3BsYXlcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2tlbGV0b24gc2tlbGV0b24tY2FyZFwiIHN0eWxlPVwiaGVpZ2h0OiAyMDBweDsgbWFyZ2luOiAxNnB4O1wiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGUtc2VsZWN0b3JcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2tlbGV0b24gc2tlbGV0b24tYnV0dG9uXCIgc3R5bGU9XCJtYXJnaW46IDhweDtcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2tlbGV0b24gc2tlbGV0b24tYnV0dG9uXCIgc3R5bGU9XCJtYXJnaW46IDhweDtcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic2tlbGV0b24gc2tlbGV0b24tYnV0dG9uXCIgc3R5bGU9XCJtYXJnaW46IDhweDtcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2hhLWNhcmQ+XG4gICAgYDtcbiAgfVxuXG4gIHN0YXRpYyBzdHlsZXMgPSBjc3NgXG4gICAgJHtEYXNodmlld1dpZGdldC5zdHlsZXN9XG4gICAgJHtza2VsZXRvblN0eWxlc31cbiAgICAke3RvdWNoU3R5bGVzfVxuICAgICAgaGEtY2FyZCB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgbWluLWhlaWdodDogMjUwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICB9XG5cbiAgICAgIC5oZWFkZXIge1xuICAgICAgICBwYWRkaW5nOiAxNnB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICB9XG5cbiAgICAgIC5oZWFkZXIgaDIge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICB9XG5cbiAgICAgIC5odmFjLW1vZGUge1xuICAgICAgICBwYWRkaW5nOiA0cHggMTJweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTZweDtcbiAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuMDVlbTtcbiAgICAgIH1cblxuICAgICAgLmh2YWMtbW9kZS5vZmYge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcik7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktdGV4dC1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC5odmFjLW1vZGUuaGVhdCB7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAxNTIsIDAsIDAuMik7XG4gICAgICAgIGNvbG9yOiAjZmY2YjAwO1xuICAgICAgfVxuXG4gICAgICAuaHZhYy1tb2RlLmNvb2wge1xuICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDMzLCAxNTAsIDI0MywgMC4yKTtcbiAgICAgICAgY29sb3I6ICMwMjg4ZDE7XG4gICAgICB9XG5cbiAgICAgIC5odmFjLW1vZGUuaGVhdF9jb29sLFxuICAgICAgLmh2YWMtbW9kZS5hdXRvIHtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSg3NiwgMTc1LCA4MCwgMC4yKTtcbiAgICAgICAgY29sb3I6ICMzODhlM2M7XG4gICAgICB9XG5cbiAgICAgIC50ZW1wZXJhdHVyZS1kaXNwbGF5IHtcbiAgICAgICAgZmxleDogMTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgICB9XG5cbiAgICAgIC5jdXJyZW50LXRlbXAge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogYmFzZWxpbmU7XG4gICAgICAgIGdhcDogNHB4O1xuICAgICAgfVxuXG4gICAgICAudGVtcC12YWx1ZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMy41ZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICB9XG5cbiAgICAgIC50ZW1wLXVuaXQge1xuICAgICAgICBmb250LXNpemU6IDEuNWVtO1xuICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAudGVtcC11bmF2YWlsYWJsZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogM2VtO1xuICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAudGFyZ2V0LXRlbXAsXG4gICAgICAudGFyZ2V0LXRlbXAtcmFuZ2Uge1xuICAgICAgICBtYXJnaW4tdG9wOiA4cHg7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktdGV4dC1jb2xvcik7XG4gICAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICB9XG5cbiAgICAgIC50YXJnZXQtbGFiZWwge1xuICAgICAgICBvcGFjaXR5OiAwLjg7XG4gICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgfVxuXG4gICAgICAudGVtcC1jb250cm9scyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBnYXA6IDE2cHg7XG4gICAgICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLnRlbXAtY29udHJvbHMtZHVhbCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGdhcDogMjRweDtcbiAgICAgICAgcGFkZGluZzogMTZweDtcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWRpdmlkZXItY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAudGVtcC1jb250cm9sIHtcbiAgICAgICAgZmxleDogMTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiA4cHg7XG4gICAgICB9XG5cbiAgICAgIC5jb250cm9sLWxhYmVsIHtcbiAgICAgICAgZm9udC1zaXplOiAwLjg1ZW07XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktdGV4dC1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC5jb250cm9sLWJ1dHRvbnMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDEycHg7XG4gICAgICB9XG5cbiAgICAgIC5jb250cm9sLXZhbHVlIHtcbiAgICAgICAgZm9udC1zaXplOiAxLjRlbTtcbiAgICAgICAgbWluLXdpZHRoOiA2MHB4O1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICB9XG5cbiAgICAgIC5tb2RlLXNlbGVjdG9yIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCg4MHB4LCAxZnIpKTtcbiAgICAgICAgZ2FwOiA4cHg7XG4gICAgICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgIH1cblxuICAgICAgLm1vZGUtYnV0dG9uIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiA0cHg7XG4gICAgICAgIHBhZGRpbmc6IDEycHggOHB4O1xuICAgICAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tY2FyZC1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpO1xuICAgICAgICBmb250LXNpemU6IDAuNzVlbTtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDQ0cHg7XG4gICAgICAgIG1pbi13aWR0aDogNDRweDtcbiAgICAgIH1cblxuICAgICAgLm1vZGUtYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3IpO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTJweCk7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgICB9XG5cbiAgICAgIC5tb2RlLWJ1dHRvbi5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1tb2RlLWNvbG9yLCB2YXIoLS1wcmltYXJ5LWNvbG9yKSk7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1tb2RlLWNvbG9yLCB2YXIoLS1wcmltYXJ5LWNvbG9yKSk7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgNHB4IDEycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xuICAgICAgfVxuXG4gICAgICAubW9kZS1idXR0b246YWN0aXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApIHNjYWxlKDAuOTUpO1xuICAgICAgfVxuXG4gICAgICAubW9kZS1idXR0b24gaGEtaWNvbiB7XG4gICAgICAgIC0tbWRjLWljb24tc2l6ZTogMjRweDtcbiAgICAgIH1cblxuICAgICAgLnByZXNldC1zZWxlY3RvciB7XG4gICAgICAgIHBhZGRpbmc6IDEycHggMTZweDtcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWRpdmlkZXItY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAucHJlc2V0LWxhYmVsIHtcbiAgICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cblxuICAgICAgLnByZXNldC1idXR0b25zIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZ2FwOiA4cHg7XG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgIH1cblxuICAgICAgLnByZXNldC1idXR0b24ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDJweDtcbiAgICAgICAgcGFkZGluZzogOHB4IDEycHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWRpdmlkZXItY29sb3IpO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNhcmQtYmFja2dyb3VuZC1jb2xvcik7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAuMCwgMC4yLCAxKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjdlbTtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDQ0cHg7XG4gICAgICAgIG1pbi13aWR0aDogNDRweDtcbiAgICAgIH1cblxuICAgICAgLnByZXNldC1idXR0b246aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC5wcmVzZXQtYnV0dG9uLmFjdGl2ZSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktY29sb3IpO1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC5wcmVzZXQtYnV0dG9uIGhhLWljb24ge1xuICAgICAgICAtLW1kYy1pY29uLXNpemU6IDE4cHg7XG4gICAgICB9XG5cbiAgICAgIC5odW1pZGl0eS1kaXNwbGF5IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGdhcDogOHB4O1xuICAgICAgICBwYWRkaW5nOiAxMnB4IDE2cHg7XG4gICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgIH1cblxuICAgICAgLmh1bWlkaXR5LWRpc3BsYXkgaGEtaWNvbiB7XG4gICAgICAgIC0tbWRjLWljb24tc2l6ZTogMThweDtcbiAgICAgIH1cblxuICAgICAgaGEtaWNvbi1idXR0b24ge1xuICAgICAgICAtLW1kYy1pY29uLWJ1dHRvbi1zaXplOiA0OHB4O1xuICAgICAgICAtLW1kYy1pY29uLXNpemU6IDI0cHg7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDQ0cHg7XG4gICAgICAgIG1pbi13aWR0aDogNDRweDtcbiAgICAgIH1cblxuICAgICAgLyogVGVtcGVyYXR1cmUgZGlhbCBzdHlsZXMgKi9cbiAgICAgIC50ZW1wLWRpYWwtY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAxNnB4O1xuICAgICAgfVxuXG4gICAgICAudGVtcC1kaWFsIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB3aWR0aDogMjAwcHg7XG4gICAgICAgIGhlaWdodDogMjAwcHg7XG4gICAgICB9XG5cbiAgICAgIC5kaWFsLXN2ZyB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC5kaWFsLWJnIHtcbiAgICAgICAgZmlsbDogbm9uZTtcbiAgICAgICAgc3Ryb2tlOiB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiA4O1xuICAgICAgfVxuXG4gICAgICAuZGlhbC1jdXJyZW50IHtcbiAgICAgICAgZmlsbDogbm9uZTtcbiAgICAgICAgc3Ryb2tlOiB2YXIoLS1wcmltYXJ5LWNvbG9yKTtcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiA4O1xuICAgICAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gICAgICAgIHRyYW5zaXRpb246IHN0cm9rZS1kYXNoYXJyYXkgMzUwbXMgY3ViaWMtYmV6aWVyKDAuMCwgMC4wLCAwLjIsIDEpO1xuICAgICAgfVxuXG4gICAgICAuZGlhbC10YXJnZXQge1xuICAgICAgICBmaWxsOiBub25lO1xuICAgICAgICBzdHJva2U6IHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgICAgc3Ryb2tlLXdpZHRoOiA0O1xuICAgICAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gICAgICB9XG5cbiAgICAgIC5kaWFsLWNlbnRlciB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIH1cblxuICAgICAgLmN1cnJlbnQtdGVtcC1kaWFsIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiA0cHg7XG4gICAgICB9XG5cbiAgICAgIC50ZW1wLXZhbHVlLWRpYWwge1xuICAgICAgICBmb250LXNpemU6IDIuNWVtO1xuICAgICAgICBmb250LXdlaWdodDogMzAwO1xuICAgICAgICBjb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgICAgfVxuXG4gICAgICAudGVtcC11bml0LWRpYWwge1xuICAgICAgICBmb250LXNpemU6IDEuMmVtO1xuICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgICAgfVxuXG4gICAgICAudGFyZ2V0LXRlbXAtZGlhbCB7XG4gICAgICAgIG1hcmdpbi10b3A6IDhweDtcbiAgICAgICAgY29sb3I6IHZhcigtLXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgIH1cblxuICAgICAgLnRlbXAtZGlhbC11bmF2YWlsYWJsZSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBoZWlnaHQ6IDIwMHB4O1xuICAgICAgICBjb2xvcjogdmFyKC0tc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgICAgICBmb250LXNpemU6IDEuMWVtO1xuICAgICAgfVxuXG4gICAgICAudHJlbmQtaW5kaWNhdG9yIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiA2cHg7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zZWNvbmRhcnktdGV4dC1jb2xvcik7XG4gICAgICAgIGZvbnQtc2l6ZTogMC44NWVtO1xuICAgICAgfVxuXG4gICAgICAudHJlbmQtaWNvbiB7XG4gICAgICAgIC0tbWRjLWljb24tc2l6ZTogMTZweDtcbiAgICAgICAgY29sb3I6IHZhcigtLXN1Y2Nlc3MtY29sb3IsICM0Y2FmNTApO1xuICAgICAgfVxuXG4gICAgICAvKiBNb2JpbGUgb3B0aW1pemF0aW9ucyAqL1xuICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgICAgIC50ZW1wLWRpYWwge1xuICAgICAgICAgIHdpZHRoOiAxNjBweDtcbiAgICAgICAgICBoZWlnaHQ6IDE2MHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnRlbXAtdmFsdWUtZGlhbCB7XG4gICAgICAgICAgZm9udC1zaXplOiAyZW07XG4gICAgICAgIH1cblxuICAgICAgICAudGVtcC11bml0LWRpYWwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMWVtO1xuICAgICAgICB9XG5cbiAgICAgICAgLm1vZGUtc2VsZWN0b3Ige1xuICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LCBtaW5tYXgoNjBweCwgMWZyKSk7XG4gICAgICAgIH1cblxuICAgICAgICAucHJlc2V0LWJ1dHRvbnMge1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qIEFjY2Vzc2liaWxpdHkgKi9cbiAgICAgIEBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKSB7XG4gICAgICAgIC5tb2RlLWJ1dHRvbjpob3ZlciB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLm1vZGUtYnV0dG9uOmFjdGl2ZSB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjk4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5kaWFsLWN1cnJlbnQge1xuICAgICAgICAgIHRyYW5zaXRpb246IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBgO1xufSIsIi8qKlxuICogUXVpY2sgY29udHJvbHMgd2lkZ2V0IGZvciBEYXNodmlldyBWMi5cbiAqIFByb3ZpZGVzIGZhc3QgYWNjZXNzIHRvIGZyZXF1ZW50bHkgdXNlZCBjb250cm9scyBhbmQgc2NlbmVzLlxuICovXG5cbmltcG9ydCB7IFByb3BlcnR5VmFsdWVzLCBUZW1wbGF0ZVJlc3VsdCwgY3NzLCBodG1sIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IGN1c3RvbUVsZW1lbnQsIHByb3BlcnR5LCBzdGF0ZSB9IGZyb20gJ2xpdC9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IERhc2h2aWV3V2lkZ2V0LCBXaWRnZXRDb25maWcgfSBmcm9tICcuLi9jb3JlL3dpZGdldC1iYXNlJztcblxuaW50ZXJmYWNlIFF1aWNrQ29udHJvbENvbmZpZyB7XG4gIGVudGl0eUlkOiBzdHJpbmc7XG4gIGxhYmVsPzogc3RyaW5nO1xuICBpY29uPzogc3RyaW5nO1xuICBjb2xvcj86IHN0cmluZztcbiAgY29uZmlybUFjdGlvbj86IGJvb2xlYW47XG4gIHNlcnZpY2U/OiB7XG4gICAgZG9tYWluOiBzdHJpbmc7XG4gICAgc2VydmljZTogc3RyaW5nO1xuICAgIGRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICB9O1xufVxuXG5pbnRlcmZhY2UgUXVpY2tDb250cm9sc1dpZGdldENvbmZpZyBleHRlbmRzIFdpZGdldENvbmZpZyB7XG4gIHR5cGU6ICdxdWljay1jb250cm9scyc7XG4gIGNvbnRyb2xzOiBRdWlja0NvbnRyb2xDb25maWdbXTtcbiAgY29sdW1ucz86IG51bWJlcjtcbiAgc2hvd0xhYmVscz86IGJvb2xlYW47XG4gIGljb25TaXplPzogJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJztcbn1cblxuQGN1c3RvbUVsZW1lbnQoJ2Rhc2h2aWV3LXF1aWNrLWNvbnRyb2xzLXdpZGdldCcpXG5leHBvcnQgY2xhc3MgUXVpY2tDb250cm9sc1dpZGdldCBleHRlbmRzIERhc2h2aWV3V2lkZ2V0IHtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBjb250cm9sU3RhdGVzOiBNYXA8c3RyaW5nLCBib29sZWFuPiA9IG5ldyBNYXAoKTtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBleGVjdXRpbmdDb250cm9sOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBwcm90ZWN0ZWQgc3Vic2NyaWJlZEVudGl0aWVzKCk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLndpZGdldENvbmZpZyBhcyBRdWlja0NvbnRyb2xzV2lkZ2V0Q29uZmlnO1xuICAgIGlmICghY29uZmlnPy5jb250cm9scykgcmV0dXJuIFtdO1xuICAgIFxuICAgIC8vIFN1YnNjcmliZSB0byBhbGwgY29udHJvbCBlbnRpdGllc1xuICAgIHJldHVybiBjb25maWcuY29udHJvbHNcbiAgICAgIC5tYXAoY29udHJvbCA9PiBjb250cm9sLmVudGl0eUlkKVxuICAgICAgLmZpbHRlcihpZCA9PiBpZCAmJiAhaWQuc3RhcnRzV2l0aCgnc2NyaXB0LicpICYmICFpZC5zdGFydHNXaXRoKCdzY2VuZS4nKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0RGVmYXVsdENvbmZpZygpOiBQYXJ0aWFsPFF1aWNrQ29udHJvbHNXaWRnZXRDb25maWc+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3F1aWNrLWNvbnRyb2xzJyxcbiAgICAgIGNvbnRyb2xzOiBbXSxcbiAgICAgIGNvbHVtbnM6IDQsXG4gICAgICBzaG93TGFiZWxzOiB0cnVlLFxuICAgICAgaWNvblNpemU6ICdtZWRpdW0nLFxuICAgIH07XG4gIH1cblxuICBwcm90ZWN0ZWQgZmlyc3RVcGRhdGVkKGNoYW5nZWRQcm9wczogUHJvcGVydHlWYWx1ZXMpOiB2b2lkIHtcbiAgICBzdXBlci5maXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BzKTtcbiAgICB0aGlzLnVwZGF0ZUNvbnRyb2xTdGF0ZXMoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblN0YXRlQ2hhbmdlZChlbnRpdHlJZDogc3RyaW5nLCBuZXdTdGF0ZTogYW55LCBvbGRTdGF0ZTogYW55KTogdm9pZCB7XG4gICAgc3VwZXIub25TdGF0ZUNoYW5nZWQoZW50aXR5SWQsIG5ld1N0YXRlLCBvbGRTdGF0ZSk7XG4gICAgdGhpcy51cGRhdGVDb250cm9sU3RhdGVzKCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUNvbnRyb2xTdGF0ZXMoKTogdm9pZCB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy53aWRnZXRDb25maWcgYXMgUXVpY2tDb250cm9sc1dpZGdldENvbmZpZztcbiAgICBpZiAoIWNvbmZpZz8uY29udHJvbHMpIHJldHVybjtcblxuICAgIGNvbnN0IG5ld1N0YXRlcyA9IG5ldyBNYXA8c3RyaW5nLCBib29sZWFuPigpO1xuICAgIFxuICAgIGZvciAoY29uc3QgY29udHJvbCBvZiBjb25maWcuY29udHJvbHMpIHtcbiAgICAgIGNvbnN0IGVudGl0eUlkID0gY29udHJvbC5lbnRpdHlJZDtcbiAgICAgIGlmICghZW50aXR5SWQpIGNvbnRpbnVlO1xuXG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuZW50aXR5U3RhdGVzLmdldChlbnRpdHlJZCk7XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgLy8gRm9yIHRvZ2dsZWFibGUgZW50aXRpZXMsIHRyYWNrIG9uL29mZiBzdGF0ZVxuICAgICAgICBjb25zdCBkb21haW4gPSBlbnRpdHlJZC5zcGxpdCgnLicpWzBdO1xuICAgICAgICBpZiAoWydsaWdodCcsICdzd2l0Y2gnLCAnZmFuJywgJ2lucHV0X2Jvb2xlYW4nXS5pbmNsdWRlcyhkb21haW4pKSB7XG4gICAgICAgICAgbmV3U3RhdGVzLnNldChlbnRpdHlJZCwgc3RhdGUuc3RhdGUgPT09ICdvbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jb250cm9sU3RhdGVzID0gbmV3U3RhdGVzO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy53aWRnZXRDb25maWcgYXMgUXVpY2tDb250cm9sc1dpZGdldENvbmZpZztcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMud2lkZ2V0Q29uZmlnPy50aXRsZSB8fCAnUXVpY2sgQ29udHJvbHMnO1xuXG4gICAgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPGRpdiBjbGFzcz1cIndpZGdldC1sb2FkaW5nXCI+XG4gICAgICAgICAgTG9hZGluZyBjb250cm9scy4uLlxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXJyb3IgfHwgIWNvbmZpZz8uY29udHJvbHMgfHwgY29uZmlnLmNvbnRyb2xzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ3aWRnZXQtZXJyb3JcIj5cbiAgICAgICAgICAke3RoaXMuZXJyb3IgfHwgJ05vIGNvbnRyb2xzIGNvbmZpZ3VyZWQnfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG4gICAgfVxuXG4gICAgY29uc3QgY29sdW1ucyA9IGNvbmZpZy5jb2x1bW5zIHx8IDQ7XG4gICAgY29uc3QgaWNvblNpemUgPSBjb25maWcuaWNvblNpemUgfHwgJ21lZGl1bSc7XG5cbiAgICByZXR1cm4gaHRtbGBcbiAgICAgIDxoYS1jYXJkPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgICAgICAgPGgyPiR7dGl0bGV9PC9oMj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBcbiAgICAgICAgICBjbGFzcz1cImNvbnRyb2xzLWdyaWRcIlxuICAgICAgICAgIHN0eWxlPVwiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoJHtjb2x1bW5zfSwgMWZyKVwiXG4gICAgICAgID5cbiAgICAgICAgICAke2NvbmZpZy5jb250cm9scy5tYXAoY29udHJvbCA9PiB0aGlzLnJlbmRlckNvbnRyb2woY29udHJvbCwgaWNvblNpemUpKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2hhLWNhcmQ+XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyQ29udHJvbChjb250cm9sOiBRdWlja0NvbnRyb2xDb25maWcsIGljb25TaXplOiBzdHJpbmcpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy53aWRnZXRDb25maWcgYXMgUXVpY2tDb250cm9sc1dpZGdldENvbmZpZztcbiAgICBjb25zdCBzaG93TGFiZWxzID0gY29uZmlnPy5zaG93TGFiZWxzID8/IHRydWU7XG4gICAgXG4gICAgY29uc3QgZW50aXR5SWQgPSBjb250cm9sLmVudGl0eUlkO1xuICAgIGNvbnN0IHN0YXRlID0gZW50aXR5SWQgPyB0aGlzLmVudGl0eVN0YXRlcy5nZXQoZW50aXR5SWQpIDogbnVsbDtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMuY29udHJvbFN0YXRlcy5nZXQoZW50aXR5SWQpIHx8IGZhbHNlO1xuICAgIGNvbnN0IGlzRXhlY3V0aW5nID0gdGhpcy5leGVjdXRpbmdDb250cm9sID09PSBlbnRpdHlJZDtcbiAgICBcbiAgICAvLyBEZXRlcm1pbmUgaWNvblxuICAgIGxldCBpY29uID0gY29udHJvbC5pY29uO1xuICAgIGlmICghaWNvbiAmJiBzdGF0ZSkge1xuICAgICAgaWNvbiA9IHN0YXRlLmF0dHJpYnV0ZXMuaWNvbiB8fCB0aGlzLmdldERlZmF1bHRJY29uKGVudGl0eUlkKTtcbiAgICB9XG4gICAgXG4gICAgLy8gRGV0ZXJtaW5lIGxhYmVsXG4gICAgbGV0IGxhYmVsID0gY29udHJvbC5sYWJlbDtcbiAgICBpZiAoIWxhYmVsICYmIHN0YXRlKSB7XG4gICAgICBsYWJlbCA9IHN0YXRlLmF0dHJpYnV0ZXMuZnJpZW5kbHlfbmFtZSB8fCBlbnRpdHlJZC5zcGxpdCgnLicpWzFdLnJlcGxhY2UoL18vZywgJyAnKTtcbiAgICB9XG4gICAgXG4gICAgLy8gRGV0ZXJtaW5lIGNvbG9yXG4gICAgbGV0IGNvbG9yID0gY29udHJvbC5jb2xvciB8fCAndmFyKC0tcHJpbWFyeS1jb2xvciknO1xuICAgIGlmIChpc0FjdGl2ZSAmJiAhY29udHJvbC5jb2xvcikge1xuICAgICAgY29sb3IgPSB0aGlzLmdldEFjdGl2ZUNvbG9yKGVudGl0eUlkKTtcbiAgICB9XG5cbiAgICBjb25zdCBidXR0b25DbGFzcyA9IGBjb250cm9sLWJ1dHRvbiAke2ljb25TaXplfSAke2lzQWN0aXZlID8gJ2FjdGl2ZScgOiAnJ30gJHtpc0V4ZWN1dGluZyA/ICdleGVjdXRpbmcnIDogJyd9YDtcblxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGJ1dHRvblxuICAgICAgICBjbGFzcz1cIiR7YnV0dG9uQ2xhc3N9XCJcbiAgICAgICAgc3R5bGU9XCItLWNvbnRyb2wtY29sb3I6ICR7Y29sb3J9XCJcbiAgICAgICAgQGNsaWNrPSR7KCkgPT4gdGhpcy5oYW5kbGVDb250cm9sQ2xpY2soY29udHJvbCl9XG4gICAgICAgID9kaXNhYmxlZD0ke2lzRXhlY3V0aW5nfVxuICAgICAgPlxuICAgICAgICAke2lzRXhlY3V0aW5nID8gaHRtbGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lclwiPjwvZGl2PlxuICAgICAgICBgIDogaHRtbGBcbiAgICAgICAgICA8aGEtaWNvbiBpY29uPVwiJHtpY29ufVwiPjwvaGEtaWNvbj5cbiAgICAgICAgYH1cbiAgICAgICAgJHtzaG93TGFiZWxzICYmIGxhYmVsID8gaHRtbGBcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj4ke2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgYCA6ICcnfVxuICAgICAgPC9idXR0b24+XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGVmYXVsdEljb24oZW50aXR5SWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgW2RvbWFpbiwgbmFtZV0gPSBlbnRpdHlJZC5zcGxpdCgnLicpO1xuICAgIFxuICAgIC8vIERvbWFpbi1iYXNlZCBpY29uc1xuICAgIGNvbnN0IGRvbWFpbkljb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgJ2xpZ2h0JzogJ21kaTpsaWdodGJ1bGInLFxuICAgICAgJ3N3aXRjaCc6ICdtZGk6dG9nZ2xlLXN3aXRjaCcsXG4gICAgICAnZmFuJzogJ21kaTpmYW4nLFxuICAgICAgJ3NjZW5lJzogJ21kaTpwYWxldHRlJyxcbiAgICAgICdzY3JpcHQnOiAnbWRpOnNjcmlwdC10ZXh0JyxcbiAgICAgICdhdXRvbWF0aW9uJzogJ21kaTpyb2JvdCcsXG4gICAgICAnaW5wdXRfYm9vbGVhbic6ICdtZGk6dG9nZ2xlLXN3aXRjaC1vdXRsaW5lJyxcbiAgICB9O1xuICAgIFxuICAgIC8vIE5hbWUtYmFzZWQgaWNvbnNcbiAgICBpZiAobmFtZS5pbmNsdWRlcygnbW9ybmluZycpKSByZXR1cm4gJ21kaTp3ZWF0aGVyLXN1bnNldC11cCc7XG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJ25pZ2h0JykgfHwgbmFtZS5pbmNsdWRlcygnYmVkdGltZScpKSByZXR1cm4gJ21kaTp3ZWF0aGVyLW5pZ2h0JztcbiAgICBpZiAobmFtZS5pbmNsdWRlcygnYXdheScpKSByZXR1cm4gJ21kaTpob21lLWV4cG9ydC1vdXRsaW5lJztcbiAgICBpZiAobmFtZS5pbmNsdWRlcygnaG9tZScpKSByZXR1cm4gJ21kaTpob21lJztcbiAgICBpZiAobmFtZS5pbmNsdWRlcygncGFydHknKSkgcmV0dXJuICdtZGk6cGFydHktcG9wcGVyJztcbiAgICBpZiAobmFtZS5pbmNsdWRlcygnbW92aWUnKSB8fCBuYW1lLmluY2x1ZGVzKCd0dicpKSByZXR1cm4gJ21kaTp0ZWxldmlzaW9uJztcbiAgICBpZiAobmFtZS5pbmNsdWRlcygnZGlubmVyJykgfHwgbmFtZS5pbmNsdWRlcygnZGluaW5nJykpIHJldHVybiAnbWRpOnNpbHZlcndhcmUtZm9yay1rbmlmZSc7XG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJ3JlYWRpbmcnKSkgcmV0dXJuICdtZGk6Ym9vay1vcGVuLXBhZ2UtdmFyaWFudCc7XG4gICAgXG4gICAgcmV0dXJuIGRvbWFpbkljb25zW2RvbWFpbl0gfHwgJ21kaTpnZXN0dXJlLXRhcCc7XG4gIH1cblxuICBwcml2YXRlIGdldEFjdGl2ZUNvbG9yKGVudGl0eUlkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IFtkb21haW5dID0gZW50aXR5SWQuc3BsaXQoJy4nKTtcbiAgICBcbiAgICBzd2l0Y2ggKGRvbWFpbikge1xuICAgICAgY2FzZSAnbGlnaHQnOlxuICAgICAgICByZXR1cm4gJ3ZhcigtLXdhcm5pbmctY29sb3IpJztcbiAgICAgIGNhc2UgJ2Zhbic6XG4gICAgICAgIHJldHVybiAndmFyKC0taW5mby1jb2xvciknO1xuICAgICAgY2FzZSAnc3dpdGNoJzpcbiAgICAgICAgcmV0dXJuICd2YXIoLS1zdWNjZXNzLWNvbG9yKSc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ3ZhcigtLXByaW1hcnktY29sb3IpJztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGhhbmRsZUNvbnRyb2xDbGljayhjb250cm9sOiBRdWlja0NvbnRyb2xDb25maWcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5leGVjdXRpbmdDb250cm9sKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgZW50aXR5SWQgPSBjb250cm9sLmVudGl0eUlkO1xuICAgIGlmICghZW50aXR5SWQpIHJldHVybjtcblxuICAgIC8vIEhhbmRsZSBjb25maXJtYXRpb24gaWYgcmVxdWlyZWRcbiAgICBpZiAoY29udHJvbC5jb25maXJtQWN0aW9uKSB7XG4gICAgICBjb25zdCBsYWJlbCA9IGNvbnRyb2wubGFiZWwgfHwgZW50aXR5SWQuc3BsaXQoJy4nKVsxXS5yZXBsYWNlKC9fL2csICcgJyk7XG4gICAgICBpZiAoIWNvbmZpcm0oYEV4ZWN1dGUgXCIke2xhYmVsfVwiP2ApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmV4ZWN1dGluZ0NvbnRyb2wgPSBlbnRpdHlJZDtcblxuICAgIHRyeSB7XG4gICAgICAvLyBDdXN0b20gc2VydmljZSBjYWxsXG4gICAgICBpZiAoY29udHJvbC5zZXJ2aWNlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuaGFzcy5jYWxsU2VydmljZShcbiAgICAgICAgICBjb250cm9sLnNlcnZpY2UuZG9tYWluLFxuICAgICAgICAgIGNvbnRyb2wuc2VydmljZS5zZXJ2aWNlLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVudGl0eV9pZDogZW50aXR5SWQsXG4gICAgICAgICAgICAuLi5jb250cm9sLnNlcnZpY2UuZGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgYmFzZWQgb24gZW50aXR5IHR5cGVcbiAgICAgICAgY29uc3QgW2RvbWFpbl0gPSBlbnRpdHlJZC5zcGxpdCgnLicpO1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoIChkb21haW4pIHtcbiAgICAgICAgICBjYXNlICdzY2VuZSc6XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmhhc3MuY2FsbFNlcnZpY2UoJ3NjZW5lJywgJ3R1cm5fb24nLCB7IGVudGl0eV9pZDogZW50aXR5SWQgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgIGNhc2UgJ3NjcmlwdCc6XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmhhc3MuY2FsbFNlcnZpY2UoJ3NjcmlwdCcsICd0dXJuX29uJywgeyBlbnRpdHlfaWQ6IGVudGl0eUlkIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgICBjYXNlICdhdXRvbWF0aW9uJzpcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaGFzcy5jYWxsU2VydmljZSgnYXV0b21hdGlvbicsICd0cmlnZ2VyJywgeyBlbnRpdHlfaWQ6IGVudGl0eUlkIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgICBjYXNlICdsaWdodCc6XG4gICAgICAgICAgY2FzZSAnc3dpdGNoJzpcbiAgICAgICAgICBjYXNlICdmYW4nOlxuICAgICAgICAgIGNhc2UgJ2lucHV0X2Jvb2xlYW4nOlxuICAgICAgICAgICAgYXdhaXQgdGhpcy50b2dnbGVFbnRpdHkoZW50aXR5SWQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBVbmtub3duIGVudGl0eSBkb21haW46ICR7ZG9tYWlufWApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFZpc3VhbCBmZWVkYmFjayBmb3Igbm9uLXRvZ2dsZWFibGUgZW50aXRpZXNcbiAgICAgIGlmIChbJ3NjZW5lJywgJ3NjcmlwdCddLmluY2x1ZGVzKGVudGl0eUlkLnNwbGl0KCcuJylbMF0pKSB7XG4gICAgICAgIC8vIEtlZXAgc3Bpbm5lciBmb3IgYSBtb21lbnQgdG8gc2hvdyBleGVjdXRpb25cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5leGVjdXRpbmdDb250cm9sID0gbnVsbDtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGV4ZWN1dGUgY29udHJvbCAke2VudGl0eUlkfTpgLCBlcnJvcik7XG4gICAgfVxuXG4gICAgdGhpcy5leGVjdXRpbmdDb250cm9sID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBzdHlsZXMgPSBbXG4gICAgRGFzaHZpZXdXaWRnZXQuc3R5bGVzLFxuICAgIGNzc2BcbiAgICAgIGhhLWNhcmQge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICB9XG5cbiAgICAgIC5oZWFkZXIge1xuICAgICAgICBwYWRkaW5nOiAxNnB4O1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tZGl2aWRlci1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC5oZWFkZXIgaDIge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICB9XG5cbiAgICAgIC5jb250cm9scy1ncmlkIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ2FwOiAxMnB4O1xuICAgICAgICBwYWRkaW5nOiAxNnB4O1xuICAgICAgICBhbGlnbi1jb250ZW50OiBzdGFydDtcbiAgICAgIH1cblxuICAgICAgLmNvbnRyb2wtYnV0dG9uIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGdhcDogOHB4O1xuICAgICAgICBwYWRkaW5nOiAxNnB4IDhweDtcbiAgICAgICAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tZGl2aWRlci1jb2xvcik7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNhcmQtYmFja2dyb3VuZC1jb2xvcik7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgfVxuXG4gICAgICAuY29udHJvbC1idXR0b246aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcik7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTtcbiAgICAgICAgYm94LXNoYWRvdzogMCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgIH1cblxuICAgICAgLmNvbnRyb2wtYnV0dG9uOmFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICAgICAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgICAgIH1cblxuICAgICAgLmNvbnRyb2wtYnV0dG9uLmFjdGl2ZSB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbnRyb2wtY29sb3IpO1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1wcmltYXJ5LWNvbG9yLCB3aGl0ZSk7XG4gICAgICAgIGJvcmRlci1jb2xvcjogdmFyKC0tY29udHJvbC1jb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC5jb250cm9sLWJ1dHRvbi5hY3RpdmUgaGEtaWNvbiB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LXByaW1hcnktY29sb3IsIHdoaXRlKTtcbiAgICAgIH1cblxuICAgICAgLmNvbnRyb2wtYnV0dG9uOmRpc2FibGVkIHtcbiAgICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgICAgICAgb3BhY2l0eTogMC43O1xuICAgICAgfVxuXG4gICAgICAuY29udHJvbC1idXR0b24uZXhlY3V0aW5nIHtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICB9XG5cbiAgICAgIC8qIEljb24gc2l6ZXMgKi9cbiAgICAgIC5jb250cm9sLWJ1dHRvbi5zbWFsbCB7XG4gICAgICAgIHBhZGRpbmc6IDEycHggOHB4O1xuICAgICAgfVxuXG4gICAgICAuY29udHJvbC1idXR0b24uc21hbGwgaGEtaWNvbiB7XG4gICAgICAgIC0tbWRjLWljb24tc2l6ZTogMjRweDtcbiAgICAgIH1cblxuICAgICAgLmNvbnRyb2wtYnV0dG9uLm1lZGl1bSBoYS1pY29uIHtcbiAgICAgICAgLS1tZGMtaWNvbi1zaXplOiAzMnB4O1xuICAgICAgfVxuXG4gICAgICAuY29udHJvbC1idXR0b24ubGFyZ2Uge1xuICAgICAgICBwYWRkaW5nOiAyMHB4IDEycHg7XG4gICAgICB9XG5cbiAgICAgIC5jb250cm9sLWJ1dHRvbi5sYXJnZSBoYS1pY29uIHtcbiAgICAgICAgLS1tZGMtaWNvbi1zaXplOiA0MHB4O1xuICAgICAgfVxuXG4gICAgICAuY29udHJvbC1sYWJlbCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMC43NWVtO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjI7XG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAgICAgICAtd2Via2l0LWxpbmUtY2xhbXA6IDI7XG4gICAgICAgIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG4gICAgICB9XG5cbiAgICAgIC5jb250cm9sLWJ1dHRvbi5sYXJnZSAuY29udHJvbC1sYWJlbCB7XG4gICAgICAgIGZvbnQtc2l6ZTogMC44NWVtO1xuICAgICAgfVxuXG4gICAgICAvKiBTcGlubmVyIGFuaW1hdGlvbiAqL1xuICAgICAgLnNwaW5uZXIge1xuICAgICAgICB3aWR0aDogMjRweDtcbiAgICAgICAgaGVpZ2h0OiAyNHB4O1xuICAgICAgICBib3JkZXI6IDNweCBzb2xpZCB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgYW5pbWF0aW9uOiBzcGluIDAuOHMgbGluZWFyIGluZmluaXRlO1xuICAgICAgfVxuXG4gICAgICBAa2V5ZnJhbWVzIHNwaW4ge1xuICAgICAgICB0byB7IHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH1cbiAgICAgIH1cblxuICAgICAgLyogUmVzcG9uc2l2ZSBhZGp1c3RtZW50cyAqL1xuICAgICAgQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XG4gICAgICAgIC5jb250cm9scy1ncmlkIHtcbiAgICAgICAgICBnYXA6IDhweDtcbiAgICAgICAgICBwYWRkaW5nOiAxMnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLmNvbnRyb2wtYnV0dG9uIHtcbiAgICAgICAgICBwYWRkaW5nOiAxMnB4IDZweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jb250cm9sLWJ1dHRvbi5tZWRpdW0gaGEtaWNvbiB7XG4gICAgICAgICAgLS1tZGMtaWNvbi1zaXplOiAyOHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLmNvbnRyb2wtbGFiZWwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMC43ZW07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyogUHVsc2UgYW5pbWF0aW9uIGZvciBzY2VuZXMvc2NyaXB0cyAqL1xuICAgICAgQGtleWZyYW1lcyBwdWxzZSB7XG4gICAgICAgIDAlIHtcbiAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICB9XG4gICAgICAgIDUwJSB7XG4gICAgICAgICAgb3BhY2l0eTogMC42O1xuICAgICAgICB9XG4gICAgICAgIDEwMCUge1xuICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLmNvbnRyb2wtYnV0dG9uLmV4ZWN1dGluZyBoYS1pY29uIHtcbiAgICAgICAgYW5pbWF0aW9uOiBwdWxzZSAxcyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgICAgIH1cbiAgICBgXG4gIF07XG59IiwiaW1wb3J0IHsgUHJvcGVydHlWYWx1ZXMsIFRlbXBsYXRlUmVzdWx0LCBjc3MsIGh0bWwgfSBmcm9tICdsaXQnO1xuaW1wb3J0IHsgY3VzdG9tRWxlbWVudCwgc3RhdGUgfSBmcm9tICdsaXQvZGVjb3JhdG9ycy5qcyc7XG5pbXBvcnQgeyBEYXNodmlld0Jhc2VFbGVtZW50IH0gZnJvbSAnQC9jb3JlL2Jhc2UtZWxlbWVudCc7XG5pbXBvcnQgeyBXZWJTb2NrZXRDb25uZWN0aW9uIH0gZnJvbSAnQC9jb3JlL3dlYnNvY2tldC1jb25uZWN0aW9uJztcbmltcG9ydCB7IFN0YXRlTWFuYWdlciB9IGZyb20gJ0AvY29yZS9zdGF0ZS1tYW5hZ2VyJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbk1hbmFnZXIgfSBmcm9tICdAL2NvcmUvc3Vic2NyaXB0aW9uLW1hbmFnZXInO1xuaW1wb3J0IHsgQXJlYUluZm8sIExheW91dEVuZ2luZSB9IGZyb20gJ0AvbGF5b3V0cy9sYXlvdXQtZW5naW5lJztcbmltcG9ydCB7IEJhc2VMYXlvdXQgfSBmcm9tICdAL2xheW91dHMvYmFzZS1sYXlvdXQnO1xuaW1wb3J0IHR5cGUgeyBCcmVha3BvaW50IH0gZnJvbSAnQC9sYXlvdXRzL2Jhc2UtbGF5b3V0JztcbmltcG9ydCB7IFdpZGdldENvbmZpZyB9IGZyb20gJ0AvY29yZS93aWRnZXQtYmFzZSc7XG5pbXBvcnQgeyBkYXNodmlld1N0eWxlcywgZGFzaHZpZXdUaGVtZSB9IGZyb20gJ0Avc3R5bGVzL3RoZW1lJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0AvdXRpbHMvbG9nZ2VyJztcbmltcG9ydCB0eXBlIHsgSG9tZUluZm8gfSBmcm9tICdAL3R5cGVzJztcblxuLy8gSW1wb3J0IHdpZGdldHNcbmltcG9ydCAnLi4vd2lkZ2V0cy9yb29tLXdpZGdldCc7XG5pbXBvcnQgJy4uL3dpZGdldHMvZGV2aWNlLWdyb3VwLXdpZGdldCc7XG5pbXBvcnQgJy4uL3dpZGdldHMvY2xpbWF0ZS13aWRnZXQnO1xuaW1wb3J0ICcuLi93aWRnZXRzL3F1aWNrLWNvbnRyb2xzLXdpZGdldCc7XG5cbkBjdXN0b21FbGVtZW50KCdkYXNodmlldy1kYXNoYm9hcmQnKVxuZXhwb3J0IGNsYXNzIERhc2h2aWV3RGFzaGJvYXJkIGV4dGVuZHMgRGFzaHZpZXdCYXNlRWxlbWVudCB7XG4gIC8vIFB1YmxpYyBnZXR0ZXJzIGZvciBjaGlsZCBjb21wb25lbnRzXG4gIGdldCBzdGF0ZU1hbmFnZXIoKTogU3RhdGVNYW5hZ2VyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlTWFuYWdlcjtcbiAgfVxuXG4gIGdldCBzdWJzY3JpcHRpb25NYW5hZ2VyKCk6IFN1YnNjcmlwdGlvbk1hbmFnZXIgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uTWFuYWdlcjtcbiAgfVxuXG4gIC8vIFByaXZhdGUgc3RhdGVcbiAgcHJpdmF0ZSBfc3RhdGVNYW5hZ2VyOiBTdGF0ZU1hbmFnZXIgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uTWFuYWdlcjogU3Vic2NyaXB0aW9uTWFuYWdlciB8IG51bGwgPSBudWxsO1xuICBAc3RhdGUoKSBwcml2YXRlIGxvYWRpbmcgPSB0cnVlO1xuICBAc3RhdGUoKSBwcml2YXRlIGVycm9yOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBob21lSW5mbzogSG9tZUluZm8gfCBudWxsID0gbnVsbDtcbiAgQHN0YXRlKCkgcHJpdmF0ZSB3c0Nvbm5lY3Rpb246IFdlYlNvY2tldENvbm5lY3Rpb24gfCBudWxsID0gbnVsbDtcbiAgQHN0YXRlKCkgcHJpdmF0ZSBsYXlvdXRFbmdpbmU6IExheW91dEVuZ2luZSB8IG51bGwgPSBudWxsO1xuICBAc3RhdGUoKSBwcml2YXRlIGN1cnJlbnRMYXlvdXQ6IEJhc2VMYXlvdXQgfCBudWxsID0gbnVsbDtcbiAgQHN0YXRlKCkgcHJpdmF0ZSB3aWRnZXRzOiBXaWRnZXRDb25maWdbXSA9IFtdO1xuICBAc3RhdGUoKSBwcml2YXRlIGN1cnJlbnRCcmVha3BvaW50OiBCcmVha3BvaW50ID0gJ2Rlc2t0b3AnO1xuICBAc3RhdGUoKSBwcml2YXRlIGFyZWFzOiBNYXA8c3RyaW5nLCBBcmVhSW5mbz4gPSBuZXcgTWFwKCk7XG5cbiAgc3RhdGljIHN0eWxlcyA9IFtcbiAgICBkYXNodmlld1RoZW1lLFxuICAgIGRhc2h2aWV3U3R5bGVzLFxuICAgIGNzc2BcbiAgICAgIDpob3N0IHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICB9XG5cbiAgICAgIC53ZWxjb21lLWhlYWRlciB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogdmFyKC0tZGFzaHZpZXctc3BhY2luZy14bCk7XG4gICAgICB9XG5cbiAgICAgIC53ZWxjb21lLXRpdGxlIHtcbiAgICAgICAgZm9udC1zaXplOiAyLjVyZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1kYXNodmlldy1wcmltYXJ5LXRleHQtY29sb3IpO1xuICAgICAgICBtYXJnaW46IDAgMCB2YXIoLS1kYXNodmlldy1zcGFjaW5nLXNtKTtcbiAgICAgIH1cblxuICAgICAgLndlbGNvbWUtc3VidGl0bGUge1xuICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgICAgICAgY29sb3I6IHZhcigtLWRhc2h2aWV3LXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgfVxuXG4gICAgICAuaW5mby1ncmlkIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIG1pbm1heCgyMDBweCwgMWZyKSk7XG4gICAgICAgIGdhcDogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1tZCk7XG4gICAgICAgIG1hcmdpbi10b3A6IHZhcigtLWRhc2h2aWV3LXNwYWNpbmcteGwpO1xuICAgICAgfVxuXG4gICAgICAuaW5mby1jYXJkIHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tZGFzaHZpZXctY2FyZC1iYWNrZ3JvdW5kKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tZGFzaHZpZXctYm9yZGVyLXJhZGl1cyk7XG4gICAgICAgIHBhZGRpbmc6IHZhcigtLWRhc2h2aWV3LXNwYWNpbmctbGcpO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIGJveC1zaGFkb3c6IHZhcigtLWRhc2h2aWV3LWJveC1zaGFkb3cpO1xuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycyBlYXNlO1xuICAgICAgfVxuXG4gICAgICAuaW5mby1jYXJkOmhvdmVyIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0ycHgpO1xuICAgICAgfVxuXG4gICAgICAuaW5mby12YWx1ZSB7XG4gICAgICAgIGZvbnQtc2l6ZTogM3JlbTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgICAgICAgY29sb3I6IHZhcigtLXByaW1hcnktY29sb3IpO1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICB9XG5cbiAgICAgIC5pbmZvLWxhYmVsIHtcbiAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICBjb2xvcjogdmFyKC0tZGFzaHZpZXctc2Vjb25kYXJ5LXRleHQtY29sb3IpO1xuICAgICAgICBtYXJnaW46IHZhcigtLWRhc2h2aWV3LXNwYWNpbmctc20pIDAgMDtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuMDVlbTtcbiAgICAgIH1cblxuICAgICAgLmNvbXBsZXhpdHktbWV0ZXIge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAyMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgICAgbWFyZ2luLXRvcDogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1tZCk7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5jb21wbGV4aXR5LWZpbGwge1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MGRlZywgXG4gICAgICAgICAgdmFyKC0tc3VjY2Vzcy1jb2xvcikgMCUsIFxuICAgICAgICAgIHZhcigtLXdhcm5pbmctY29sb3IpIDUwJSwgXG4gICAgICAgICAgdmFyKC0tZXJyb3ItY29sb3IpIDEwMCVcbiAgICAgICAgKTtcbiAgICAgICAgdHJhbnNpdGlvbjogd2lkdGggMC41cyBlYXNlO1xuICAgICAgfVxuXG4gICAgICAuYXJlYXMtbGlzdCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICAgICAgZ2FwOiB2YXIoLS1kYXNodmlldy1zcGFjaW5nLXNtKTtcbiAgICAgICAgbWFyZ2luLXRvcDogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1tZCk7XG4gICAgICB9XG5cbiAgICAgIC5hcmVhLXRhZyB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktY29sb3IpO1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1wcmltYXJ5LWNvbG9yLCB3aGl0ZSk7XG4gICAgICAgIHBhZGRpbmc6IHZhcigtLWRhc2h2aWV3LXNwYWNpbmcteHMpIHZhcigtLWRhc2h2aWV3LXNwYWNpbmctc20pO1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1kYXNodmlldy1ib3JkZXItcmFkaXVzKTtcbiAgICAgICAgZm9udC1zaXplOiAwLjlyZW07XG4gICAgICB9XG5cbiAgICAgIC5sb2FkaW5nLXNwaW5uZXIge1xuICAgICAgICBhbmltYXRpb246IHNwaW4gMXMgbGluZWFyIGluZmluaXRlO1xuICAgICAgICB3aWR0aDogNDhweDtcbiAgICAgICAgaGVpZ2h0OiA0OHB4O1xuICAgICAgICBib3JkZXI6IDNweCBzb2xpZCB2YXIoLS1kaXZpZGVyLWNvbG9yKTtcbiAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogdmFyKC0tcHJpbWFyeS1jb2xvcik7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgIH1cblxuICAgICAgQGtleWZyYW1lcyBzcGluIHtcbiAgICAgICAgdG8geyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9XG4gICAgICB9XG5cbiAgICAgIC8qIERhc2hib2FyZCBncmlkIGxheW91dCAqL1xuICAgICAgLmRhc2hib2FyZC1ncmlkIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICB9XG5cbiAgICAgIC53aWRnZXQtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBtaW4taGVpZ2h0OiAyMDBweDtcbiAgICAgIH1cblxuICAgICAgLyogTG9hZGluZyBzdGF0ZSBmb3IgZGFzaGJvYXJkIG1vZGUgKi9cbiAgICAgIC5kYXNoYm9hcmQtbG9hZGluZyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGdhcDogdmFyKC0tZGFzaHZpZXctc3BhY2luZy1tZCk7XG4gICAgICB9XG5cbiAgICAgIC5kYXNoYm9hcmQtbG9hZGluZyBwIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWRhc2h2aWV3LXNlY29uZGFyeS10ZXh0LWNvbG9yKTtcbiAgICAgIH1cbiAgICBgLFxuICBdO1xuXG4gIHByb3RlY3RlZCBhc3luYyBmaXJzdFVwZGF0ZWQoY2hhbmdlZFByb3BzOiBQcm9wZXJ0eVZhbHVlcyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHN1cGVyLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcHMpO1xuICAgIGF3YWl0IHRoaXMuaW5pdGlhbGl6ZURhc2hib2FyZCgpO1xuICAgIHRoaXMuc2V0dXBSZXNpemVPYnNlcnZlcigpO1xuICB9XG5cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgc3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZURhc2hib2FyZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgbG9nZ2VyLmluZm8oJ0luaXRpYWxpemluZyBEYXNodmlldyBkYXNoYm9hcmQnKTtcbiAgICAgIFxuICAgICAgaWYgKCF0aGlzLmhhc3MpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIb21lIEFzc2lzdGFudCBjb25uZWN0aW9uIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgIH1cblxuICAgICAgLy8gSW5pdGlhbGl6ZSBjb3JlIHNlcnZpY2VzXG4gICAgICB0aGlzLndzQ29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXRDb25uZWN0aW9uKHRoaXMuaGFzcyk7XG4gICAgICB0aGlzLl9zdGF0ZU1hbmFnZXIgPSBuZXcgU3RhdGVNYW5hZ2VyKCk7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25NYW5hZ2VyID0gbmV3IFN1YnNjcmlwdGlvbk1hbmFnZXIodGhpcy53c0Nvbm5lY3Rpb24sIHRoaXMuX3N0YXRlTWFuYWdlcik7XG4gICAgICB0aGlzLmxheW91dEVuZ2luZSA9IG5ldyBMYXlvdXRFbmdpbmUoKTtcblxuICAgICAgLy8gTG9hZCBob21lIGluZm9ybWF0aW9uXG4gICAgICBhd2FpdCB0aGlzLmxvYWRIb21lSW5mbygpO1xuICAgICAgXG4gICAgICAvLyBBbmFseXplIGhvbWUgYW5kIHNldCB1cCBkYXNoYm9hcmRcbiAgICAgIGF3YWl0IHRoaXMuYW5hbHl6ZUhvbWUoKTtcbiAgICAgIHRoaXMuc2VsZWN0T3B0aW1hbExheW91dCgpO1xuICAgICAgYXdhaXQgdGhpcy5pbml0aWFsaXplV2lkZ2V0cygpO1xuXG4gICAgICAvLyBTdGFydCBzdGF0ZSBtYW5hZ2VtZW50XG4gICAgICB0aGlzLl9zdGF0ZU1hbmFnZXIuaW5pdGlhbGl6ZUZyb21IYXNzKHRoaXMuaGFzcyk7XG4gICAgICBhd2FpdCB0aGlzLl9zdWJzY3JpcHRpb25NYW5hZ2VyLnN0YXJ0TGlzdGVuaW5nKCk7XG4gICAgICBcbiAgICAgIGxvZ2dlci5pbmZvKCdEYXNoYm9hcmQgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXNoYm9hcmQ6JywgZXJyb3IpO1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBpbml0aWFsaXplIGRhc2hib2FyZCc7XG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGxvYWRIb21lSW5mbygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMud3NDb25uZWN0aW9uKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xuICAgICAgXG4gICAgICBsb2dnZXIuZGVidWcoJ0xvYWRpbmcgaG9tZSBpbmZvcm1hdGlvbicpO1xuICAgICAgdGhpcy5ob21lSW5mbyA9IGF3YWl0IHRoaXMud3NDb25uZWN0aW9uLmdldEhvbWVJbmZvKCk7XG4gICAgICBcbiAgICAgIGxvZ2dlci5pbmZvKCdIb21lIGluZm8gbG9hZGVkOicsIHRoaXMuaG9tZUluZm8pO1xuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignRmFpbGVkIHRvIGxvYWQgaG9tZSBpbmZvOicsIGVycm9yKTtcbiAgICAgIHRoaXMuZXJyb3IgPSAnRmFpbGVkIHRvIGxvYWQgaG9tZSBpbmZvcm1hdGlvbic7XG4gICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmxvYWRpbmcpIHtcbiAgICAgIHJldHVybiBodG1sYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGFzaHZpZXctY29udGFpbmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImRhc2h2aWV3LWxvYWRpbmdcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkaW5nLXNwaW5uZXJcIj48L2Rpdj5cbiAgICAgICAgICAgIDxwPkxvYWRpbmcgeW91ciBkYXNoYm9hcmQuLi48L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXNodmlldy1jb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGFzaHZpZXctZXJyb3JcIj5cbiAgICAgICAgICAgIDxoMj5FcnJvcjwvaDI+XG4gICAgICAgICAgICA8cD4ke3RoaXMuZXJyb3J9PC9wPlxuICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9JHsoKSA9PiB0aGlzLmluaXRpYWxpemVEYXNoYm9hcmQoKX0+UmV0cnk8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgd2lkZ2V0cywgc2hvdyB0aGUgZGFzaGJvYXJkIHZpZXdcbiAgICBpZiAodGhpcy53aWRnZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRhc2hib2FyZCgpO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSBzaG93IHRoZSB3ZWxjb21lL2luZm8gdmlld1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImRhc2h2aWV3LWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGFzaHZpZXctY29udGVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ3ZWxjb21lLWhlYWRlclwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzPVwid2VsY29tZS10aXRsZVwiPldlbGNvbWUgdG8gRGFzaHZpZXcgVjI8L2gxPlxuICAgICAgICAgICAgPHAgY2xhc3M9XCJ3ZWxjb21lLXN1YnRpdGxlXCI+XG4gICAgICAgICAgICAgIFlvdXIgaW50ZWxsaWdlbnQgaG9tZSBkYXNoYm9hcmQgZm9yICR7dGhpcy5ob21lSW5mbz8uZW50aXR5Q291bnQgfHwgMH0gZW50aXRpZXNcbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICR7dGhpcy5ob21lSW5mbyA/IHRoaXMucmVuZGVySG9tZUluZm8oKSA6IHRoaXMucmVuZGVyTm9EYXRhKCl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVySG9tZUluZm8oKSB7XG4gICAgaWYgKCF0aGlzLmhvbWVJbmZvKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IGNvbXBsZXhpdHlQZXJjZW50YWdlID0gTWF0aC5taW4oMTAwLCB0aGlzLmhvbWVJbmZvLmNvbXBsZXhpdHlTY29yZSAqIDEwKTtcblxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImluZm8tZ3JpZFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5mby1jYXJkXCI+XG4gICAgICAgICAgPHAgY2xhc3M9XCJpbmZvLXZhbHVlXCI+JHt0aGlzLmhvbWVJbmZvLnJvb21Db3VudH08L3A+XG4gICAgICAgICAgPHAgY2xhc3M9XCJpbmZvLWxhYmVsXCI+Um9vbXM8L3A+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbmZvLWNhcmRcIj5cbiAgICAgICAgICA8cCBjbGFzcz1cImluZm8tdmFsdWVcIj4ke3RoaXMuaG9tZUluZm8uZW50aXR5Q291bnR9PC9wPlxuICAgICAgICAgIDxwIGNsYXNzPVwiaW5mby1sYWJlbFwiPkVudGl0aWVzPC9wPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5mby1jYXJkXCI+XG4gICAgICAgICAgPHAgY2xhc3M9XCJpbmZvLXZhbHVlXCI+JHt0aGlzLmhvbWVJbmZvLmFyZWFzLmxlbmd0aH08L3A+XG4gICAgICAgICAgPHAgY2xhc3M9XCJpbmZvLWxhYmVsXCI+QXJlYXM8L3A+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbmZvLWNhcmRcIj5cbiAgICAgICAgICA8cCBjbGFzcz1cImluZm8tdmFsdWVcIj4ke3RoaXMuaG9tZUluZm8uY29tcGxleGl0eVNjb3JlfS8xMDwvcD5cbiAgICAgICAgICA8cCBjbGFzcz1cImluZm8tbGFiZWxcIj5Db21wbGV4aXR5IFNjb3JlPC9wPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb21wbGV4aXR5LW1ldGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29tcGxleGl0eS1maWxsXCIgc3R5bGU9XCJ3aWR0aDogJHtjb21wbGV4aXR5UGVyY2VudGFnZX0lXCI+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgICR7dGhpcy5ob21lSW5mby5hcmVhcy5sZW5ndGggPiAwID8gaHRtbGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImRhc2h2aWV3LWNhcmRcIj5cbiAgICAgICAgICA8aDM+RGV0ZWN0ZWQgQXJlYXM8L2gzPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcmVhcy1saXN0XCI+XG4gICAgICAgICAgICAke3RoaXMuaG9tZUluZm8uYXJlYXMubWFwKGFyZWEgPT4gaHRtbGBcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhcmVhLXRhZ1wiPiR7YXJlYX08L3NwYW4+XG4gICAgICAgICAgICBgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICBgIDogJyd9XG4gICAgYDtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyTm9EYXRhKCkge1xuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImRhc2h2aWV3LWNhcmRcIj5cbiAgICAgICAgPHA+Tm8gaG9tZSBpbmZvcm1hdGlvbiBhdmFpbGFibGUuIE1ha2Ugc3VyZSB5b3VyIEhvbWUgQXNzaXN0YW50IGlzIGNvbmZpZ3VyZWQgd2l0aCBhcmVhcyBhbmQgZW50aXRpZXMuPC9wPlxuICAgICAgPC9kaXY+XG4gICAgYDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIGhvbWUgY29tcGxleGl0eSBhbmQgYXJlYXMuXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGFuYWx5emVIb21lKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy5ob21lSW5mbyB8fCAhdGhpcy53c0Nvbm5lY3Rpb24pIHJldHVybjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgZGV0YWlsZWQgYXJlYSBpbmZvcm1hdGlvblxuICAgICAgY29uc3QgYXJlYURhdGEgPSBhd2FpdCB0aGlzLmNhbGxXZWJTb2NrZXQ8UmVjb3JkPHN0cmluZywgYW55Pj4oJ2dldF9hcmVhX2VudGl0aWVzJywge30pO1xuICAgICAgXG4gICAgICAvLyBDb252ZXJ0IHRvIEFyZWFJbmZvIGZvcm1hdFxuICAgICAgZm9yIChjb25zdCBbYXJlYUlkLCBkYXRhXSBvZiBPYmplY3QuZW50cmllcyhhcmVhRGF0YSkpIHtcbiAgICAgICAgdGhpcy5hcmVhcy5zZXQoYXJlYUlkLCB7XG4gICAgICAgICAgYXJlYUlkLFxuICAgICAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgICAgICBlbnRpdGllczogZGF0YS5lbnRpdGllcyB8fCBbXSxcbiAgICAgICAgICBlbnRpdHlDb3VudDogZGF0YS5lbnRpdHlfY291bnQgfHwgMCxcbiAgICAgICAgICBkZXZpY2VDb3VudDogZGF0YS5kZXZpY2VfY291bnQgfHwgMCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGxvZ2dlci5pbmZvKGBBbmFseXplZCAke3RoaXMuYXJlYXMuc2l6ZX0gYXJlYXNgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gYW5hbHl6ZSBob21lOicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IG9wdGltYWwgbGF5b3V0IGJhc2VkIG9uIGNvbXBsZXhpdHkgc2NvcmUgYW5kIGFyZWEgY291bnQuXG4gICAqL1xuICBwcml2YXRlIHNlbGVjdE9wdGltYWxMYXlvdXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmhvbWVJbmZvIHx8ICF0aGlzLmxheW91dEVuZ2luZSkgcmV0dXJuO1xuXG4gICAgY29uc3QgY29tcGxleGl0eVNjb3JlID0gdGhpcy5ob21lSW5mby5jb21wbGV4aXR5U2NvcmU7XG4gICAgY29uc3QgYXJlYUNvdW50ID0gdGhpcy5hcmVhcy5zaXplO1xuICAgIFxuICAgIHRoaXMuY3VycmVudExheW91dCA9IHRoaXMubGF5b3V0RW5naW5lLnNlbGVjdExheW91dChjb21wbGV4aXR5U2NvcmUsIGFyZWFDb3VudCk7XG4gICAgXG4gICAgLy8gVXBkYXRlIGJyZWFrcG9pbnRcbiAgICBjb25zdCBjb250YWluZXJXaWR0aCA9IHRoaXMub2Zmc2V0V2lkdGggfHwgd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy5jdXJyZW50QnJlYWtwb2ludCA9IHRoaXMuY3VycmVudExheW91dC5nZXRCcmVha3BvaW50KGNvbnRhaW5lcldpZHRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHdpZGdldHMgYmFzZWQgb24gYXJlYXMgYW5kIGxheW91dC5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZVdpZGdldHMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmxheW91dEVuZ2luZSB8fCAhdGhpcy5jdXJyZW50TGF5b3V0KSByZXR1cm47XG5cbiAgICAvLyBPcmdhbml6ZSB3aWRnZXRzIGZyb20gYXJlYXNcbiAgICBjb25zdCBhcmVhSW5mb3MgPSBBcnJheS5mcm9tKHRoaXMuYXJlYXMudmFsdWVzKCkpO1xuICAgIHRoaXMud2lkZ2V0cyA9IHRoaXMubGF5b3V0RW5naW5lLm9yZ2FuaXplV2lkZ2V0cyhhcmVhSW5mb3MpO1xuICAgIFxuICAgIC8vIEhhbmRsZSBvdmVyZmxvd1xuICAgIGNvbnN0IHsgdmlzaWJsZSB9ID0gdGhpcy5sYXlvdXRFbmdpbmUuaGFuZGxlT3ZlcmZsb3coXG4gICAgICB0aGlzLndpZGdldHMsXG4gICAgICB0aGlzLmN1cnJlbnRMYXlvdXQsXG4gICAgICB0aGlzLmN1cnJlbnRCcmVha3BvaW50XG4gICAgKTtcbiAgICBcbiAgICB0aGlzLndpZGdldHMgPSB2aXNpYmxlO1xuICAgIFxuICAgIGxvZ2dlci5pbmZvKGBJbml0aWFsaXplZCAke3RoaXMud2lkZ2V0cy5sZW5ndGh9IHdpZGdldHNgKTtcbiAgICBcbiAgICAvLyBVcGRhdGUgc3Vic2NyaXB0aW9ucyBmb3IgdmlzaWJsZSBlbnRpdGllc1xuICAgIGF3YWl0IHRoaXMudXBkYXRlVmlzaWJsZVN1YnNjcmlwdGlvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgc3Vic2NyaXB0aW9ucyBiYXNlZCBvbiB2aXNpYmxlIHdpZGdldHMuXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHVwZGF0ZVZpc2libGVTdWJzY3JpcHRpb25zKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy5fc3Vic2NyaXB0aW9uTWFuYWdlcikgcmV0dXJuO1xuXG4gICAgY29uc3QgdmlzaWJsZUVudGl0aWVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgXG4gICAgZm9yIChjb25zdCB3aWRnZXQgb2YgdGhpcy53aWRnZXRzKSB7XG4gICAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiB3aWRnZXQuZW50aXRpZXMpIHtcbiAgICAgICAgdmlzaWJsZUVudGl0aWVzLmFkZChlbnRpdHkpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25NYW5hZ2VyLnVwZGF0ZVZpc2libGVFbnRpdGllcyhBcnJheS5mcm9tKHZpc2libGVFbnRpdGllcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB1cCByZXNpemUgb2JzZXJ2ZXIgZm9yIHJlc3BvbnNpdmUgYmVoYXZpb3IuXG4gICAqL1xuICBwcml2YXRlIHNldHVwUmVzaXplT2JzZXJ2ZXIoKTogdm9pZCB7XG4gICAgY29uc3QgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICBpZiAoZW50cnkudGFyZ2V0ID09PSB0aGlzKSB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVSZXNpemUoZW50cnkuY29udGVudFJlY3Qud2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgY29udGFpbmVyIHJlc2l6ZS5cbiAgICovXG4gIHByaXZhdGUgaGFuZGxlUmVzaXplKHdpZHRoOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudExheW91dCkgcmV0dXJuO1xuXG4gICAgY29uc3QgYnJlYWtwb2ludENoYW5nZWQgPSB0aGlzLmN1cnJlbnRMYXlvdXQudXBkYXRlQ29udGFpbmVyV2lkdGgod2lkdGgpO1xuICAgIFxuICAgIGlmIChicmVha3BvaW50Q2hhbmdlZCkge1xuICAgICAgdGhpcy5jdXJyZW50QnJlYWtwb2ludCA9IHRoaXMuY3VycmVudExheW91dC5nZXRCcmVha3BvaW50KCk7XG4gICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBkYXNoYm9hcmQgZ3JpZCB3aXRoIHdpZGdldHMuXG4gICAqL1xuICBwcml2YXRlIHJlbmRlckRhc2hib2FyZCgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRMYXlvdXQgfHwgdGhpcy53aWRnZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXNoYm9hcmQtbG9hZGluZ1wiPlxuICAgICAgICAgIDxwPlNldHRpbmcgdXAgeW91ciBkYXNoYm9hcmQuLi48L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9XG5cbiAgICBjb25zdCBncmlkQ1NTID0gdGhpcy5jdXJyZW50TGF5b3V0LmdlbmVyYXRlR3JpZENTUyh0aGlzLmN1cnJlbnRCcmVha3BvaW50KTtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLmxheW91dEVuZ2luZSEuY2FsY3VsYXRlUG9zaXRpb25zKHRoaXMud2lkZ2V0cywgdGhpcy5hcmVhcy5zaXplKTtcblxuICAgIHJldHVybiBodG1sYFxuICAgICAgPGRpdiBjbGFzcz1cImRhc2hib2FyZC1ncmlkXCIgc3R5bGU9XCIke2dyaWRDU1N9XCI+XG4gICAgICAgICR7cG9zaXRpb25zLm1hcChwb3MgPT4ge1xuICAgICAgICAgIGNvbnN0IHdpZGdldCA9IHRoaXMud2lkZ2V0cy5maW5kKHcgPT4gXG4gICAgICAgICAgICB0aGlzLmdldFdpZGdldElkKHcpID09PSBwb3Mud2lkZ2V0SWRcbiAgICAgICAgICApO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICghd2lkZ2V0KSByZXR1cm4gJyc7XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyV2lkZ2V0KHdpZGdldCwgcG9zKTtcbiAgICAgICAgfSl9XG4gICAgICA8L2Rpdj5cbiAgICBgO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIHNpbmdsZSB3aWRnZXQuXG4gICAqL1xuICBwcml2YXRlIHJlbmRlcldpZGdldCh3aWRnZXQ6IFdpZGdldENvbmZpZywgcG9zaXRpb246IGFueSk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICBjb25zdCBzdHlsZSA9IGBcbiAgICAgIGdyaWQtYXJlYTogJHtwb3NpdGlvbi5ncmlkQXJlYX07XG4gICAgICAke3Bvc2l0aW9uLmdyaWRDb2x1bW4gPyBgZ3JpZC1jb2x1bW46ICR7cG9zaXRpb24uZ3JpZENvbHVtbn07YCA6ICcnfVxuICAgICAgJHtwb3NpdGlvbi5ncmlkUm93ID8gYGdyaWQtcm93OiAke3Bvc2l0aW9uLmdyaWRSb3d9O2AgOiAnJ31cbiAgICBgO1xuXG4gICAgc3dpdGNoICh3aWRnZXQudHlwZSkge1xuICAgICAgY2FzZSAncm9vbSc6XG4gICAgICAgIGNvbnN0IGFyZWEgPSBBcnJheS5mcm9tKHRoaXMuYXJlYXMudmFsdWVzKCkpLmZpbmQoYSA9PiBcbiAgICAgICAgICBhLmVudGl0aWVzLnNvbWUoZSA9PiB3aWRnZXQuZW50aXRpZXMuaW5jbHVkZXMoZSkpXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwid2lkZ2V0LWNvbnRhaW5lclwiIHN0eWxlPVwiJHtzdHlsZX1cIj5cbiAgICAgICAgICAgIDxkYXNodmlldy1yb29tLXdpZGdldFxuICAgICAgICAgICAgICAuaGFzcz0ke3RoaXMuaGFzc31cbiAgICAgICAgICAgICAgLndpZGdldENvbmZpZz0ke3dpZGdldH1cbiAgICAgICAgICAgICAgLmFyZWFJZD0ke2FyZWE/LmFyZWFJZH1cbiAgICAgICAgICAgICAgLmFyZWFOYW1lPSR7YXJlYT8ubmFtZSB8fCB3aWRnZXQudGl0bGV9XG4gICAgICAgICAgICA+PC9kYXNodmlldy1yb29tLXdpZGdldD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgIFxuICAgICAgLy8gVE9ETzogQWRkIG90aGVyIHdpZGdldCB0eXBlcyB3aGVuIGltcGxlbWVudGVkXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwid2lkZ2V0LWNvbnRhaW5lclwiIHN0eWxlPVwiJHtzdHlsZX1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkYXNodmlldy1jYXJkXCI+XG4gICAgICAgICAgICAgIDxwPldpZGdldCB0eXBlICcke3dpZGdldC50eXBlfScgbm90IGltcGxlbWVudGVkIHlldDwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSB3aWRnZXQgSUQuXG4gICAqL1xuICBwcml2YXRlIGdldFdpZGdldElkKHdpZGdldDogV2lkZ2V0Q29uZmlnKTogc3RyaW5nIHtcbiAgICBjb25zdCBmaXJzdEVudGl0eSA9IHdpZGdldC5lbnRpdGllc1swXSB8fCAndW5rbm93bic7XG4gICAgcmV0dXJuIGAke3dpZGdldC50eXBlfS0ke2ZpcnN0RW50aXR5LnJlcGxhY2UoL1xcLi9nLCAnXycpfWA7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgcmVzb3VyY2VzLlxuICAgKi9cbiAgcHJpdmF0ZSBjbGVhbnVwKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9zdWJzY3JpcHRpb25NYW5hZ2VyKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25NYW5hZ2VyLmNsZWFyKCk7XG4gICAgfVxuICAgIFxuICAgIGlmICh0aGlzLl9zdGF0ZU1hbmFnZXIpIHtcbiAgICAgIHRoaXMuX3N0YXRlTWFuYWdlci5jbGVhcigpO1xuICAgIH1cbiAgfVxufSIsIi8qKlxuICogSG9tZSBBc3Npc3RhbnQgUGFuZWwgRW50cnkgUG9pbnRcbiAqIFRoaXMgZmlsZSBjcmVhdGVzIHRoZSBwcm9wZXIgcGFuZWwgc3RydWN0dXJlIHRoYXQgSG9tZSBBc3Npc3RhbnQgZXhwZWN0c1xuICovXG5cbmltcG9ydCAnLi9kYXNoYm9hcmQvZGFzaHZpZXctZGFzaGJvYXJkJztcbmltcG9ydCB7IExvZ0xldmVsLCBsb2dnZXIgfSBmcm9tICcuL3V0aWxzL2xvZ2dlcic7XG5cbi8vIFNldCB1cCBsb2dnZXIgYmFzZWQgb24gZW52aXJvbm1lbnRcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICBsb2dnZXIuc2V0TGV2ZWwoTG9nTGV2ZWwuREVCVUcpO1xufVxuXG4vLyBFeHBvcnQgdmVyc2lvbiBmb3IgZGVidWdnaW5nXG5leHBvcnQgY29uc3QgREFTSFZJRVdfVkVSU0lPTiA9ICcwLjIuNyc7XG5cbi8qKlxuICogQ3JlYXRlIEhvbWUgQXNzaXN0YW50IHBhbmVsIGZ1bmN0aW9uXG4gKiBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IEhvbWUgQXNzaXN0YW50IHdpbGwgY2FsbCB0byBjcmVhdGUgdGhlIHBhbmVsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURhc2h2aWV3UGFuZWwoaGFzczogYW55LCBuYXJyb3c6IGJvb2xlYW4sIHJvdXRlOiBhbnksIHBhbmVsOiBhbnkpIHtcbiAgbG9nZ2VyLmluZm8oYENyZWF0aW5nIERhc2h2aWV3IFYyIFBhbmVsIHYke0RBU0hWSUVXX1ZFUlNJT059YCk7XG4gIFxuICAvLyBDcmVhdGUgY29udGFpbmVyIGVsZW1lbnRcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gYFxuICAgIGhlaWdodDogMTAwdmg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLXByaW1hcnktYmFja2dyb3VuZC1jb2xvcik7XG4gIGA7XG5cbiAgLy8gQ3JlYXRlIGRhc2hib2FyZCBlbGVtZW50XG4gIGNvbnN0IGRhc2hib2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Rhc2h2aWV3LWRhc2hib2FyZCcpO1xuICBkYXNoYm9hcmQuaGFzcyA9IGhhc3M7XG4gIGRhc2hib2FyZC5uYXJyb3cgPSBuYXJyb3c7XG4gIGRhc2hib2FyZC5yb3V0ZSA9IHJvdXRlO1xuICBkYXNoYm9hcmQucGFuZWwgPSBwYW5lbDtcblxuICAvLyBTdHlsZSB0aGUgZGFzaGJvYXJkIHRvIGZpbGwgdGhlIGNvbnRhaW5lclxuICBkYXNoYm9hcmQuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICBmbGV4OiAxO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYDtcblxuICAvLyBBZGQgZGFzaGJvYXJkIHRvIGNvbnRhaW5lclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGFzaGJvYXJkKTtcblxuICAvLyBSZXR1cm4gb2JqZWN0IHdpdGggcmVxdWlyZWQgbWV0aG9kc1xuICByZXR1cm4ge1xuICAgIHJlbmRlcjogKCkgPT4gY29udGFpbmVyLFxuICAgIFxuICAgIHVwZGF0ZTogKG5ld0hhc3M6IGFueSwgbmV3TmFycm93OiBib29sZWFuLCBuZXdSb3V0ZTogYW55KSA9PiB7XG4gICAgICBkYXNoYm9hcmQuaGFzcyA9IG5ld0hhc3M7XG4gICAgICBkYXNoYm9hcmQubmFycm93ID0gbmV3TmFycm93O1xuICAgICAgZGFzaGJvYXJkLnJvdXRlID0gbmV3Um91dGU7XG4gICAgfSxcbiAgICBcbiAgICBkZXN0cm95OiAoKSA9PiB7XG4gICAgICBpZiAoY29udGFpbmVyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgY29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8vIFZlcmlmeSBkYXNoYm9hcmQgZWxlbWVudCBpcyByZWdpc3RlcmVkXG5jb25zdCBkYXNoYm9hcmRFbGVtZW50ID0gY3VzdG9tRWxlbWVudHMuZ2V0KCdkYXNodmlldy1kYXNoYm9hcmQnKTtcbmlmIChkYXNoYm9hcmRFbGVtZW50KSB7XG4gIGxvZ2dlci5pbmZvKCdEYXNodmlldyBWMiBkYXNoYm9hcmQgZWxlbWVudCByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseScpO1xufSBlbHNlIHtcbiAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gcmVnaXN0ZXIgZGFzaHZpZXctZGFzaGJvYXJkIGVsZW1lbnQnKTtcbn1cblxuLy8gU2V0IHVwIGdsb2JhbCBlcnJvciBoYW5kbGVyIGZvciBkZWJ1Z2dpbmdcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldmVudCkgPT4ge1xuICBsb2dnZXIuZXJyb3IoJ0dsb2JhbCBlcnJvcjonLCBldmVudC5lcnJvcik7XG59KTtcblxuLy8gU2V0IHVwIHVuaGFuZGxlZCByZWplY3Rpb24gaGFuZGxlclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIChldmVudCkgPT4ge1xuICBsb2dnZXIuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbjonLCBldmVudC5yZWFzb24pO1xufSk7XG5cbi8vIExvZyBpbml0aWFsaXphdGlvblxubG9nZ2VyLmluZm8oYERhc2h2aWV3IFYyIFBhbmVsIEVudHJ5IHYke0RBU0hWSUVXX1ZFUlNJT059IGluaXRpYWxpemVkYCk7XG5cbi8vIEV4cG9ydCB0aGUgcGFuZWwgY3JlYXRpb24gZnVuY3Rpb24gYXMgZGVmYXVsdFxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRGFzaHZpZXdQYW5lbDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///366\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[366]();
/******/ 	
/******/ })()
;