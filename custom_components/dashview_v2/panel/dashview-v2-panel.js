/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["DashviewV2"] = factory();
	else
		root["DashviewV2"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 767:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ panel_entry)\n});\n\n// UNUSED EXPORTS: DASHVIEW_VERSION\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.mjs\nvar tslib_es6 = __webpack_require__(635);\n// EXTERNAL MODULE: ./node_modules/lit/index.js + 2 modules\nvar lit = __webpack_require__(174);\n// EXTERNAL MODULE: ./node_modules/lit/decorators.js + 3 modules\nvar decorators = __webpack_require__(791);\n;// ./src/core/base-element.ts\n\n\n\nclass DashviewBaseElement extends lit/* LitElement */.WF {\n    shouldUpdate(changedProps) {\n        if (!this.hass) {\n            console.warn('DashviewBaseElement: hass object not available');\n            return false;\n        }\n        return super.shouldUpdate(changedProps);\n    }\n    async callWebSocket(command, data) {\n        if (!this.hass) {\n            throw new Error('Home Assistant connection not available');\n        }\n        try {\n            const result = await this.hass.callWS({\n                type: `dashview_v2/${command}`,\n                ...data,\n            });\n            return result;\n        }\n        catch (error) {\n            console.error(`WebSocket call failed for ${command}:`, error);\n            throw error;\n        }\n    }\n    handleError(error, context) {\n        console.error(`[Dashview V2] Error in ${context}:`, error);\n        // In the future, we can show user-friendly error messages here\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        console.log('DashviewBaseElement connected');\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        console.log('DashviewBaseElement disconnected');\n    }\n}\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* property */.MZ)({ attribute: false }),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewBaseElement.prototype, \"hass\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* property */.MZ)({ type: Object }),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewBaseElement.prototype, \"config\", void 0);\n\n;// ./src/core/websocket-connection.ts\nclass WebSocketConnection {\n    constructor(hass) {\n        this.hass = hass;\n    }\n    async getHomeInfo() {\n        try {\n            const result = await this.hass.callWS({\n                type: 'dashview_v2/get_home_info',\n            });\n            return result;\n        }\n        catch (error) {\n            console.error('Failed to get home info:', error);\n            throw error;\n        }\n    }\n    async subscribeToStateChanges(callback, entityIds) {\n        if (!this.hass.connection) {\n            throw new Error('WebSocket connection not available');\n        }\n        const unsubscribe = await this.hass.connection.subscribeEvents((event) => {\n            if (!entityIds || entityIds.includes(event.data.entity_id)) {\n                callback(event);\n            }\n        }, 'state_changed');\n        return unsubscribe;\n    }\n    isConnected() {\n        return !!this.hass && !!this.hass.connection;\n    }\n}\n\n;// ./src/utils/logger.ts\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n})(LogLevel || (LogLevel = {}));\nclass Logger {\n    constructor() {\n        this.level = LogLevel.INFO;\n        this.prefix = '[Dashview V2]';\n        // Check if we're in development mode\n        if (false) // removed by dead control flow\n{}\n    }\n    static getInstance() {\n        if (!Logger.instance) {\n            Logger.instance = new Logger();\n        }\n        return Logger.instance;\n    }\n    setLevel(level) {\n        this.level = level;\n    }\n    debug(...args) {\n        if (this.level <= LogLevel.DEBUG) {\n            console.debug(this.prefix, ...args);\n        }\n    }\n    info(...args) {\n        if (this.level <= LogLevel.INFO) {\n            console.info(this.prefix, ...args);\n        }\n    }\n    warn(...args) {\n        if (this.level <= LogLevel.WARN) {\n            console.warn(this.prefix, ...args);\n        }\n    }\n    error(...args) {\n        if (this.level <= LogLevel.ERROR) {\n            console.error(this.prefix, ...args);\n        }\n    }\n}\nconst logger = Logger.getInstance();\n\n;// ./src/core/state-manager.ts\n/**\n * State management for Dashview V2 dashboard.\n * Handles efficient state updates with diffing and batching.\n */\n\nconst state_manager_logger = new Logger('StateManager');\nclass StateManager {\n    constructor(config = {}) {\n        this.updateQueue = [];\n        this.rafId = null;\n        this.lastState = new Map();\n        this.listeners = new Map();\n        this.globalListeners = new Set();\n        this.config = {\n            batchInterval: config.batchInterval ?? 16, // 60fps\n            maxBatchSize: config.maxBatchSize ?? 100,\n        };\n    }\n    /**\n     * Compute differences between old and new state.\n     */\n    computeStateDiff(entityId, newState) {\n        const oldState = this.lastState.get(entityId);\n        if (!oldState) {\n            return {\n                type: 'added',\n                entityId,\n                newState,\n            };\n        }\n        // Quick equality check\n        if (oldState.state === newState.state &&\n            JSON.stringify(oldState.attributes) === JSON.stringify(newState.attributes)) {\n            return null;\n        }\n        // Find changed properties\n        const changedProps = this.getChangedProps(oldState, newState);\n        if (changedProps.length === 0) {\n            return null;\n        }\n        return {\n            type: 'changed',\n            entityId,\n            oldState,\n            newState,\n            changedProps,\n        };\n    }\n    /**\n     * Get list of changed properties between states.\n     */\n    getChangedProps(oldState, newState) {\n        const changed = [];\n        // Check main state\n        if (oldState.state !== newState.state) {\n            changed.push('state');\n        }\n        // Check attributes\n        const oldAttrs = oldState.attributes || {};\n        const newAttrs = newState.attributes || {};\n        const allKeys = new Set([...Object.keys(oldAttrs), ...Object.keys(newAttrs)]);\n        for (const key of allKeys) {\n            if (JSON.stringify(oldAttrs[key]) !== JSON.stringify(newAttrs[key])) {\n                changed.push(`attributes.${key}`);\n            }\n        }\n        // Check last_changed and last_updated\n        if (oldState.last_changed !== newState.last_changed) {\n            changed.push('last_changed');\n        }\n        if (oldState.last_updated !== newState.last_updated) {\n            changed.push('last_updated');\n        }\n        return changed;\n    }\n    /**\n     * Batch state updates for efficient rendering.\n     */\n    batchUpdate(updates) {\n        this.updateQueue.push(...updates);\n        // If we have too many updates, process immediately\n        if (this.updateQueue.length >= this.config.maxBatchSize) {\n            this.processBatch();\n            return;\n        }\n        // Otherwise, schedule processing\n        if (!this.rafId) {\n            this.rafId = requestAnimationFrame(() => {\n                this.processBatch();\n                this.rafId = null;\n            });\n        }\n    }\n    /**\n     * Process a single state update immediately.\n     */\n    updateState(entityId, newState) {\n        this.batchUpdate([{\n                entityId,\n                state: newState,\n                timestamp: Date.now(),\n            }]);\n    }\n    /**\n     * Process all batched updates.\n     */\n    processBatch() {\n        if (this.updateQueue.length === 0) {\n            return;\n        }\n        const startTime = performance.now();\n        const updateMap = new Map();\n        const diffs = [];\n        // Deduplicate updates (keep latest for each entity)\n        for (const update of this.updateQueue) {\n            updateMap.set(update.entityId, update);\n        }\n        // Process each unique update\n        for (const [entityId, update] of updateMap) {\n            const diff = this.computeStateDiff(entityId, update.state);\n            if (diff) {\n                diffs.push(diff);\n                this.lastState.set(entityId, update.state);\n                // Notify entity-specific listeners\n                const entityListeners = this.listeners.get(entityId);\n                if (entityListeners) {\n                    for (const listener of entityListeners) {\n                        try {\n                            listener(diff);\n                        }\n                        catch (error) {\n                            state_manager_logger.error(`Error in entity listener for ${entityId}:`, error);\n                        }\n                    }\n                }\n            }\n        }\n        // Notify global listeners\n        if (diffs.length > 0) {\n            for (const listener of this.globalListeners) {\n                try {\n                    listener(diffs);\n                }\n                catch (error) {\n                    state_manager_logger.error('Error in global state listener:', error);\n                }\n            }\n        }\n        // Clear queue\n        this.updateQueue = [];\n        // Log performance\n        const processingTime = performance.now() - startTime;\n        if (processingTime > this.config.batchInterval) {\n            state_manager_logger.warn(`Batch processing took ${processingTime.toFixed(2)}ms for ${updateMap.size} updates`);\n        }\n    }\n    /**\n     * Subscribe to state changes for a specific entity.\n     */\n    subscribeToEntity(entityId, callback) {\n        if (!this.listeners.has(entityId)) {\n            this.listeners.set(entityId, new Set());\n        }\n        this.listeners.get(entityId).add(callback);\n        // Return unsubscribe function\n        return () => {\n            const listeners = this.listeners.get(entityId);\n            if (listeners) {\n                listeners.delete(callback);\n                if (listeners.size === 0) {\n                    this.listeners.delete(entityId);\n                }\n            }\n        };\n    }\n    /**\n     * Subscribe to all state changes.\n     */\n    subscribeToAll(callback) {\n        this.globalListeners.add(callback);\n        // Return unsubscribe function\n        return () => {\n            this.globalListeners.delete(callback);\n        };\n    }\n    /**\n     * Get current state for an entity.\n     */\n    getState(entityId) {\n        return this.lastState.get(entityId);\n    }\n    /**\n     * Get all current states.\n     */\n    getAllStates() {\n        return new Map(this.lastState);\n    }\n    /**\n     * Initialize state from Home Assistant.\n     */\n    initializeFromHass(hass) {\n        const updates = [];\n        for (const [entityId, state] of Object.entries(hass.states)) {\n            updates.push({\n                entityId,\n                state,\n                timestamp: Date.now(),\n            });\n        }\n        this.batchUpdate(updates);\n        state_manager_logger.info(`Initialized state for ${updates.length} entities`);\n    }\n    /**\n     * Clear all state and listeners.\n     */\n    clear() {\n        if (this.rafId) {\n            cancelAnimationFrame(this.rafId);\n            this.rafId = null;\n        }\n        this.updateQueue = [];\n        this.lastState.clear();\n        this.listeners.clear();\n        this.globalListeners.clear();\n    }\n    /**\n     * Get statistics about the state manager.\n     */\n    getStats() {\n        return {\n            entityCount: this.lastState.size,\n            listenerCount: this.listeners.size + this.globalListeners.size,\n            queueSize: this.updateQueue.length,\n        };\n    }\n}\n\n;// ./src/core/subscription-manager.ts\n/**\n * Subscription manager for smart entity subscriptions.\n * Only subscribes to visible entities to optimize performance.\n */\n\nconst subscription_manager_logger = new Logger('SubscriptionManager');\nclass SubscriptionManager {\n    constructor(websocket, stateManager, config = {}) {\n        this.visibleEntities = new Set();\n        this.subscribedEntities = new Set();\n        this.debounceTimer = null;\n        this.unsubscribeHandler = null;\n        this.websocket = websocket;\n        this.stateManager = stateManager;\n        this.config = {\n            debounceDelay: config.debounceDelay ?? 300,\n            maxSubscriptions: config.maxSubscriptions ?? 500,\n        };\n    }\n    /**\n     * Update the list of visible entities.\n     * This will trigger subscription updates after debouncing.\n     */\n    updateVisibleEntities(entities) {\n        const newVisible = new Set(entities);\n        // Check if there's actually a change\n        const hasChanges = entities.length !== this.visibleEntities.size ||\n            entities.some(id => !this.visibleEntities.has(id));\n        if (!hasChanges) {\n            return;\n        }\n        // Update visible set\n        this.visibleEntities = newVisible;\n        // Debounce the sync operation\n        if (this.debounceTimer) {\n            clearTimeout(this.debounceTimer);\n        }\n        this.debounceTimer = window.setTimeout(() => {\n            this.syncSubscriptions();\n            this.debounceTimer = null;\n        }, this.config.debounceDelay);\n    }\n    /**\n     * Sync subscriptions with the backend.\n     * Subscribes to newly visible entities and unsubscribes from hidden ones.\n     */\n    async syncSubscriptions() {\n        if (!this.websocket.isConnected()) {\n            subscription_manager_logger.warn('WebSocket not connected, skipping subscription sync');\n            return;\n        }\n        try {\n            // Limit subscriptions if needed\n            const targetEntities = Array.from(this.visibleEntities).slice(0, this.config.maxSubscriptions);\n            // Call backend to update subscriptions\n            const result = await this.callUpdateSubscriptions(targetEntities);\n            // Update local tracking\n            this.subscribedEntities = new Set([\n                ...this.subscribedEntities,\n                ...result.subscribed\n            ]);\n            for (const entityId of result.unsubscribed) {\n                this.subscribedEntities.delete(entityId);\n            }\n            subscription_manager_logger.info(`Subscription sync complete: ${result.subscribed.length} added, ` +\n                `${result.unsubscribed.length} removed, ${this.subscribedEntities.size} total`);\n            // Log any failures\n            if (result.failed.length > 0) {\n                subscription_manager_logger.warn(`Failed to subscribe to ${result.failed.length} entities:`, result.failed);\n            }\n        }\n        catch (error) {\n            subscription_manager_logger.error('Failed to sync subscriptions:', error);\n        }\n    }\n    /**\n     * Call the backend WebSocket command to update subscriptions.\n     */\n    async callUpdateSubscriptions(entities) {\n        const hass = this.websocket.hass;\n        const response = await hass.callWS({\n            type: 'dashview_v2/update_subscriptions',\n            entities: entities,\n        });\n        return response;\n    }\n    /**\n     * Subscribe to specific entities immediately.\n     */\n    async subscribeToEntities(entities) {\n        const hass = this.websocket.hass;\n        const response = await hass.callWS({\n            type: 'dashview_v2/subscribe_visible_entities',\n            entities: entities,\n        });\n        // Update local tracking\n        for (const entityId of response.subscribed) {\n            this.subscribedEntities.add(entityId);\n        }\n        return {\n            subscribed: response.subscribed,\n            unsubscribed: [],\n            failed: response.failed || [],\n        };\n    }\n    /**\n     * Unsubscribe from specific entities immediately.\n     */\n    async unsubscribeFromEntities(entities) {\n        const hass = this.websocket.hass;\n        const response = await hass.callWS({\n            type: 'dashview_v2/unsubscribe_hidden_entities',\n            entities: entities,\n        });\n        // Update local tracking\n        for (const entityId of response.unsubscribed) {\n            this.subscribedEntities.delete(entityId);\n        }\n        return {\n            subscribed: [],\n            unsubscribed: response.unsubscribed,\n            failed: response.failed || [],\n        };\n    }\n    /**\n     * Start listening for state changes.\n     * This sets up the WebSocket event listener for state updates.\n     */\n    async startListening() {\n        if (this.unsubscribeHandler) {\n            subscription_manager_logger.warn('Already listening for state changes');\n            return;\n        }\n        try {\n            // Set up WebSocket event listener\n            this.unsubscribeHandler = await this.websocket.subscribeToStateChanges((event) => {\n                if (event.event_type === 'state_changed' && event.data) {\n                    const { entity_id, new_state } = event.data;\n                    // Only process if we're subscribed to this entity\n                    if (this.subscribedEntities.has(entity_id) && new_state) {\n                        this.stateManager.updateState(entity_id, new_state);\n                    }\n                }\n            });\n            subscription_manager_logger.info('Started listening for state changes');\n        }\n        catch (error) {\n            subscription_manager_logger.error('Failed to start listening:', error);\n            throw error;\n        }\n    }\n    /**\n     * Stop listening for state changes.\n     */\n    stopListening() {\n        if (this.unsubscribeHandler) {\n            this.unsubscribeHandler();\n            this.unsubscribeHandler = null;\n            subscription_manager_logger.info('Stopped listening for state changes');\n        }\n    }\n    /**\n     * Get the current list of subscribed entities.\n     */\n    getSubscribedEntities() {\n        return Array.from(this.subscribedEntities);\n    }\n    /**\n     * Get the current list of visible entities.\n     */\n    getVisibleEntities() {\n        return Array.from(this.visibleEntities);\n    }\n    /**\n     * Check if an entity is currently subscribed.\n     */\n    isSubscribed(entityId) {\n        return this.subscribedEntities.has(entityId);\n    }\n    /**\n     * Get subscription statistics.\n     */\n    getStats() {\n        return {\n            visibleCount: this.visibleEntities.size,\n            subscribedCount: this.subscribedEntities.size,\n            maxSubscriptions: this.config.maxSubscriptions,\n        };\n    }\n    /**\n     * Clear all subscriptions and stop listening.\n     */\n    async clear() {\n        // Stop listening\n        this.stopListening();\n        // Clear debounce timer\n        if (this.debounceTimer) {\n            clearTimeout(this.debounceTimer);\n            this.debounceTimer = null;\n        }\n        // Unsubscribe from all entities\n        if (this.subscribedEntities.size > 0) {\n            await this.unsubscribeFromEntities(Array.from(this.subscribedEntities));\n        }\n        // Clear sets\n        this.visibleEntities.clear();\n        this.subscribedEntities.clear();\n        subscription_manager_logger.info('Cleared all subscriptions');\n    }\n}\n\n;// ./src/layouts/base-layout.ts\n/**\n * Base layout class for Dashview V2 dashboard layouts.\n * Provides grid system and responsive breakpoint handling.\n */\nclass BaseLayout {\n    constructor() {\n        this.currentBreakpoint = 'desktop';\n        this.containerWidth = 0;\n        this.config = this.getLayoutConfig();\n    }\n    /**\n     * Get current breakpoint based on container width.\n     */\n    getBreakpoint(width) {\n        const w = width || this.containerWidth;\n        if (w < this.config.breakpoints.tablet) {\n            return 'mobile';\n        }\n        else if (w < this.config.breakpoints.desktop) {\n            return 'tablet';\n        }\n        else if (w < this.config.breakpoints.large) {\n            return 'desktop';\n        }\n        else {\n            return 'large';\n        }\n    }\n    /**\n     * Update container width and return if breakpoint changed.\n     */\n    updateContainerWidth(width) {\n        this.containerWidth = width;\n        const newBreakpoint = this.getBreakpoint(width);\n        if (newBreakpoint !== this.currentBreakpoint) {\n            this.currentBreakpoint = newBreakpoint;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Get number of columns for current breakpoint.\n     */\n    getColumnCount(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        switch (bp) {\n            case 'mobile':\n                return 4;\n            case 'tablet':\n                return 8;\n            case 'desktop':\n                return 12;\n            case 'large':\n                return 12;\n            default:\n                return 12;\n        }\n    }\n    /**\n     * Get grid gap size for current breakpoint.\n     */\n    getGridGap(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        switch (bp) {\n            case 'mobile':\n                return '8px';\n            case 'tablet':\n                return '12px';\n            case 'desktop':\n                return '16px';\n            case 'large':\n                return '20px';\n            default:\n                return '16px';\n        }\n    }\n    /**\n     * Get container padding for current breakpoint.\n     */\n    getContainerPadding(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        switch (bp) {\n            case 'mobile':\n                return '8px';\n            case 'tablet':\n                return '16px';\n            case 'desktop':\n                return '24px';\n            case 'large':\n                return '32px';\n            default:\n                return '24px';\n        }\n    }\n    /**\n     * Check if layout is suitable for given area count.\n     */\n    isSuitableForAreaCount(areaCount) {\n        return areaCount >= this.config.minAreas &&\n            areaCount <= this.config.maxAreas;\n    }\n    /**\n     * Sort widgets by priority for placement.\n     */\n    sortWidgetsByPriority(widgets) {\n        // Priority order: room > climate > device-group > quick-controls\n        const priorityMap = {\n            'room': 4,\n            'climate': 3,\n            'device-group': 2,\n            'quick-controls': 1,\n        };\n        return [...widgets].sort((a, b) => {\n            const priorityA = priorityMap[a.type] || 0;\n            const priorityB = priorityMap[b.type] || 0;\n            // Sort by priority first\n            if (priorityA !== priorityB) {\n                return priorityB - priorityA;\n            }\n            // Then by entity count\n            return b.entities.length - a.entities.length;\n        });\n    }\n    /**\n     * Group widgets by type.\n     */\n    groupWidgetsByType(widgets) {\n        const groups = new Map();\n        for (const widget of widgets) {\n            const type = widget.type;\n            if (!groups.has(type)) {\n                groups.set(type, []);\n            }\n            groups.get(type).push(widget);\n        }\n        return groups;\n    }\n    /**\n     * Generate CSS for grid template.\n     */\n    generateGridCSS(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        const template = this.generateGridTemplate(bp);\n        const gap = this.getGridGap(bp);\n        const padding = this.getContainerPadding(bp);\n        return `\n      display: grid;\n      grid-template: ${template};\n      gap: ${gap};\n      padding: ${padding};\n      width: 100%;\n      height: 100%;\n      box-sizing: border-box;\n    `;\n    }\n    /**\n     * Get layout metadata.\n     */\n    getMetadata() {\n        return {\n            name: this.config.name,\n            description: this.config.description,\n            currentBreakpoint: this.currentBreakpoint,\n            supportedAreaRange: [this.config.minAreas, this.config.maxAreas],\n        };\n    }\n}\n\n;// ./src/layouts/standard-layout.ts\n/**\n * Standard layout for 2-3 bedroom homes.\n * Optimized grid layout with room widgets in main area,\n * device groups in sidebar, climate in header, and quick controls in footer.\n */\n\nclass StandardLayout extends BaseLayout {\n    getLayoutConfig() {\n        return {\n            name: 'Standard',\n            description: 'Optimized layout for 2-3 bedroom homes',\n            minAreas: 2,\n            maxAreas: 5,\n            breakpoints: {\n                mobile: 768,\n                tablet: 1024,\n                desktop: 1440,\n                large: 1920,\n            },\n        };\n    }\n    generateGridTemplate(breakpoint) {\n        switch (breakpoint) {\n            case 'mobile':\n                // Single column layout\n                return `\n          \"header\" auto\n          \"main\" 1fr\n          \"sidebar\" auto\n          \"footer\" auto\n          / 1fr\n        `;\n            case 'tablet':\n                // Two column layout\n                return `\n          \"header header\" auto\n          \"main main\" 1fr\n          \"sidebar sidebar\" auto\n          \"footer footer\" auto\n          / 1fr 1fr\n        `;\n            case 'desktop':\n                // Three column layout with sidebar\n                return `\n          \"header header header\" auto\n          \"main main sidebar\" 1fr\n          \"footer footer footer\" auto\n          / 1fr 1fr minmax(280px, 0.5fr)\n        `;\n            case 'large':\n                // Three column layout with larger sidebar\n                return `\n          \"header header header\" auto\n          \"main main sidebar\" 1fr\n          \"footer footer footer\" auto\n          / 1fr 1fr minmax(320px, 0.6fr)\n        `;\n            default:\n                return this.generateGridTemplate('desktop');\n        }\n    }\n    getGridAreas(breakpoint) {\n        const areas = [\n            {\n                name: 'header',\n                gridArea: 'header',\n                minWidgets: 0,\n                maxWidgets: 2,\n                widgetTypes: ['climate', 'quick-controls'],\n            },\n            {\n                name: 'main',\n                gridArea: 'main',\n                minWidgets: 1,\n                maxWidgets: 6,\n                widgetTypes: ['room'],\n            },\n            {\n                name: 'sidebar',\n                gridArea: 'sidebar',\n                minWidgets: 0,\n                maxWidgets: 4,\n                widgetTypes: ['device-group', 'quick-controls'],\n            },\n            {\n                name: 'footer',\n                gridArea: 'footer',\n                minWidgets: 0,\n                maxWidgets: 1,\n                widgetTypes: ['quick-controls'],\n            },\n        ];\n        // Adjust for mobile\n        if (breakpoint === 'mobile') {\n            // On mobile, everything stacks vertically\n            areas.forEach(area => {\n                if (area.name === 'main') {\n                    area.maxWidgets = 4; // Limit room widgets on mobile\n                }\n            });\n        }\n        return areas;\n    }\n    calculateWidgetPositions(widgets, areaCount) {\n        const positions = [];\n        const sortedWidgets = this.sortWidgetsByPriority(widgets);\n        const widgetsByType = this.groupWidgetsByType(sortedWidgets);\n        // Place climate widgets in header\n        const climateWidgets = widgetsByType.get('climate') || [];\n        climateWidgets.slice(0, 1).forEach((widget, index) => {\n            positions.push({\n                widgetId: this.generateWidgetId(widget),\n                gridArea: 'header',\n                order: index,\n            });\n        });\n        // Place room widgets in main area\n        const roomWidgets = widgetsByType.get('room') || [];\n        const mainColumns = this.currentBreakpoint === 'mobile' ? 1 : 2;\n        const mainRows = Math.ceil(roomWidgets.length / mainColumns);\n        roomWidgets.slice(0, 6).forEach((widget, index) => {\n            const col = (index % mainColumns) + 1;\n            const row = Math.floor(index / mainColumns) + 1;\n            positions.push({\n                widgetId: this.generateWidgetId(widget),\n                gridArea: 'main',\n                gridColumn: this.currentBreakpoint === 'mobile'\n                    ? '1'\n                    : `${col} / span 1`,\n                gridRow: `${row} / span 1`,\n                order: index,\n            });\n        });\n        // Place device groups in sidebar\n        const deviceGroups = widgetsByType.get('device-group') || [];\n        deviceGroups.slice(0, 3).forEach((widget, index) => {\n            positions.push({\n                widgetId: this.generateWidgetId(widget),\n                gridArea: 'sidebar',\n                order: index,\n            });\n        });\n        // Place quick controls\n        const quickControls = widgetsByType.get('quick-controls') || [];\n        if (quickControls.length > 0) {\n            // First quick controls in footer\n            positions.push({\n                widgetId: this.generateWidgetId(quickControls[0]),\n                gridArea: 'footer',\n                order: 0,\n            });\n            // Additional quick controls in sidebar\n            quickControls.slice(1, 3).forEach((widget, index) => {\n                positions.push({\n                    widgetId: this.generateWidgetId(widget),\n                    gridArea: 'sidebar',\n                    order: deviceGroups.length + index,\n                });\n            });\n        }\n        return positions;\n    }\n    /**\n     * Generate a unique widget ID.\n     */\n    generateWidgetId(widget) {\n        // Use type and first entity as ID\n        const firstEntity = widget.entities[0] || 'unknown';\n        return `${widget.type}-${firstEntity.replace(/\\./g, '_')}`;\n    }\n    /**\n     * Get recommended widget configuration for area count.\n     */\n    getRecommendedWidgets(areaCount) {\n        // Base recommendations\n        const config = {\n            roomWidgets: Math.min(areaCount, 4),\n            deviceGroups: 2,\n            climateWidgets: 1,\n            quickControls: 1,\n        };\n        // Adjust based on area count\n        if (areaCount <= 2) {\n            // Small home: fewer widgets\n            config.roomWidgets = areaCount;\n            config.deviceGroups = 1;\n        }\n        else if (areaCount >= 4) {\n            // Larger home: more widgets\n            config.deviceGroups = 3;\n            config.quickControls = 2;\n        }\n        // Adjust for breakpoint\n        if (this.currentBreakpoint === 'mobile') {\n            config.roomWidgets = Math.min(config.roomWidgets, 3);\n            config.deviceGroups = Math.min(config.deviceGroups, 2);\n        }\n        return config;\n    }\n    /**\n     * Get CSS for specific grid areas.\n     */\n    getAreaStyles(breakpoint) {\n        const bp = breakpoint || this.currentBreakpoint;\n        const baseStyles = {\n            header: `\n        grid-area: header;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 16px;\n        align-items: center;\n      `,\n            main: `\n        grid-area: main;\n        display: grid;\n        gap: 16px;\n        align-content: start;\n      `,\n            sidebar: `\n        grid-area: sidebar;\n        display: flex;\n        flex-direction: column;\n        gap: 16px;\n      `,\n            footer: `\n        grid-area: footer;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      `,\n        };\n        // Adjust main grid for different breakpoints\n        if (bp === 'mobile') {\n            baseStyles.main += `\n        grid-template-columns: 1fr;\n      `;\n        }\n        else {\n            baseStyles.main += `\n        grid-template-columns: repeat(2, 1fr);\n      `;\n        }\n        return baseStyles;\n    }\n}\n\n;// ./src/layouts/layout-engine.ts\n/**\n * Layout engine for Dashview V2.\n * Handles layout selection, widget organization, and overflow management.\n */\n\n\nconst layout_engine_logger = new Logger('LayoutEngine');\nclass LayoutEngine {\n    constructor(config = {}) {\n        this.currentLayout = null;\n        this.config = {\n            maxWidgetsPerArea: config.maxWidgetsPerArea ?? 2,\n            prioritizeByUsage: config.prioritizeByUsage ?? true,\n        };\n        // Initialize available layouts\n        this.layouts = new Map();\n        this.registerLayout('standard', new StandardLayout());\n        // Future layouts can be registered here:\n        // this.registerLayout('compact', new CompactLayout());\n        // this.registerLayout('complex', new ComplexLayout());\n        // this.registerLayout('estate', new EstateLayout());\n    }\n    /**\n     * Register a layout.\n     */\n    registerLayout(name, layout) {\n        this.layouts.set(name, layout);\n        layout_engine_logger.info(`Registered layout: ${name}`);\n    }\n    /**\n     * Select optimal layout based on complexity score.\n     */\n    selectLayout(complexityScore, areaCount) {\n        // For now, we only have StandardLayout\n        // In the future, this will select based on complexity\n        let selectedLayout;\n        let selectedName = '';\n        // Find suitable layout for area count\n        for (const [name, layout] of this.layouts) {\n            if (layout.isSuitableForAreaCount(areaCount)) {\n                selectedLayout = layout;\n                selectedName = name;\n                break;\n            }\n        }\n        // Fallback to standard if no suitable layout found\n        if (!selectedLayout) {\n            selectedLayout = this.layouts.get('standard');\n            selectedName = 'standard';\n            layout_engine_logger.warn(`No suitable layout for ${areaCount} areas, using standard layout`);\n        }\n        this.currentLayout = selectedLayout;\n        layout_engine_logger.info(`Selected ${selectedName} layout for complexity ${complexityScore} and ${areaCount} areas`);\n        return selectedLayout;\n    }\n    /**\n     * Organize widgets based on areas and layout.\n     */\n    organizeWidgets(areas) {\n        const widgets = [];\n        // Sort areas by entity count and priority\n        const sortedAreas = this.sortAreasByPriority(areas);\n        // Create room widgets for each area\n        for (const area of sortedAreas) {\n            if (area.entityCount === 0)\n                continue;\n            const roomWidget = {\n                type: 'room',\n                entities: area.entities,\n                title: area.name,\n            };\n            widgets.push(roomWidget);\n        }\n        // Create device group widgets\n        const deviceGroups = this.createDeviceGroups(areas);\n        widgets.push(...deviceGroups);\n        // Create climate widget if climate entities exist\n        const climateWidget = this.createClimateWidget(areas);\n        if (climateWidget) {\n            widgets.push(climateWidget);\n        }\n        // Create quick controls widget\n        const quickControls = this.createQuickControlsWidget(areas);\n        if (quickControls) {\n            widgets.push(quickControls);\n        }\n        layout_engine_logger.info(`Organized ${widgets.length} widgets from ${areas.length} areas`);\n        return widgets;\n    }\n    /**\n     * Handle widget overflow for current layout.\n     */\n    handleOverflow(widgets, layout, breakpoint) {\n        const areas = layout.getGridAreas(breakpoint);\n        const visible = [];\n        const overflow = [];\n        // Group widgets by type\n        const widgetsByType = new Map();\n        for (const widget of widgets) {\n            if (!widgetsByType.has(widget.type)) {\n                widgetsByType.set(widget.type, []);\n            }\n            widgetsByType.get(widget.type).push(widget);\n        }\n        // Place widgets according to area constraints\n        for (const area of areas) {\n            let remainingSlots = area.maxWidgets || 999;\n            for (const widgetType of area.widgetTypes || []) {\n                const availableWidgets = widgetsByType.get(widgetType) || [];\n                for (const widget of availableWidgets) {\n                    if (remainingSlots > 0 && !visible.includes(widget)) {\n                        visible.push(widget);\n                        remainingSlots--;\n                    }\n                    else if (!visible.includes(widget) && !overflow.includes(widget)) {\n                        overflow.push(widget);\n                    }\n                }\n            }\n        }\n        layout_engine_logger.info(`Layout overflow: ${visible.length} visible, ${overflow.length} overflow`);\n        return { visible, overflow };\n    }\n    /**\n     * Sort areas by priority.\n     */\n    sortAreasByPriority(areas) {\n        return [...areas].sort((a, b) => {\n            // Prioritize named areas over \"unassigned\"\n            if (a.areaId === 'unassigned')\n                return 1;\n            if (b.areaId === 'unassigned')\n                return -1;\n            // Prioritize by entity count\n            if (a.entityCount !== b.entityCount) {\n                return b.entityCount - a.entityCount;\n            }\n            // Then by device count\n            return b.deviceCount - a.deviceCount;\n        });\n    }\n    /**\n     * Create device group widgets.\n     */\n    createDeviceGroups(areas) {\n        const groups = [];\n        const allEntities = [];\n        // Collect all entities\n        for (const area of areas) {\n            allEntities.push(...area.entities);\n        }\n        // Group by domain\n        const entityByDomain = new Map();\n        for (const entityId of allEntities) {\n            const domain = entityId.split('.')[0];\n            if (!entityByDomain.has(domain)) {\n                entityByDomain.set(domain, []);\n            }\n            entityByDomain.get(domain).push(entityId);\n        }\n        // Create groups for specific domains\n        const groupableDomains = ['light', 'switch', 'cover', 'fan'];\n        for (const domain of groupableDomains) {\n            const entities = entityByDomain.get(domain) || [];\n            if (entities.length >= 3) { // Only create group if enough entities\n                groups.push({\n                    type: 'device-group',\n                    entities: entities,\n                    title: `All ${domain}s`,\n                });\n            }\n        }\n        return groups;\n    }\n    /**\n     * Create climate widget.\n     */\n    createClimateWidget(areas) {\n        const climateEntities = [];\n        for (const area of areas) {\n            for (const entityId of area.entities) {\n                if (entityId.startsWith('climate.') ||\n                    entityId.includes('temperature') ||\n                    entityId.includes('humidity')) {\n                    climateEntities.push(entityId);\n                }\n            }\n        }\n        if (climateEntities.length === 0) {\n            return null;\n        }\n        return {\n            type: 'climate',\n            entities: climateEntities,\n            title: 'Climate Control',\n        };\n    }\n    /**\n     * Create quick controls widget.\n     */\n    createQuickControlsWidget(areas) {\n        const quickEntities = [];\n        // Find most important entities (scenes, main lights, etc.)\n        for (const area of areas) {\n            for (const entityId of area.entities) {\n                if (entityId.startsWith('scene.') ||\n                    entityId.includes('main') ||\n                    entityId.includes('all')) {\n                    quickEntities.push(entityId);\n                }\n            }\n        }\n        // Limit to reasonable number\n        const limitedEntities = quickEntities.slice(0, 8);\n        if (limitedEntities.length === 0) {\n            return null;\n        }\n        return {\n            type: 'quick-controls',\n            entities: limitedEntities,\n            title: 'Quick Controls',\n        };\n    }\n    /**\n     * Get current layout.\n     */\n    getCurrentLayout() {\n        return this.currentLayout;\n    }\n    /**\n     * Calculate widget positions for current layout.\n     */\n    calculatePositions(widgets, areaCount) {\n        if (!this.currentLayout) {\n            layout_engine_logger.error('No layout selected');\n            return [];\n        }\n        return this.currentLayout.calculateWidgetPositions(widgets, areaCount);\n    }\n    /**\n     * Update container width and check for breakpoint changes.\n     */\n    updateContainerWidth(width) {\n        if (!this.currentLayout) {\n            return false;\n        }\n        return this.currentLayout.updateContainerWidth(width);\n    }\n}\n\n;// ./src/styles/theme.ts\n\nconst dashviewTheme = (0,lit/* css */.AH) `\n  :host {\n    --dashview-primary-color: var(--primary-color);\n    --dashview-primary-text-color: var(--primary-text-color);\n    --dashview-secondary-text-color: var(--secondary-text-color);\n    --dashview-disabled-text-color: var(--disabled-text-color);\n    --dashview-divider-color: var(--divider-color);\n    --dashview-error-color: var(--error-color);\n    --dashview-success-color: var(--success-color);\n    --dashview-warning-color: var(--warning-color);\n    --dashview-info-color: var(--info-color);\n    --dashview-background: var(--lovelace-background, var(--primary-background-color));\n    --dashview-card-background: var(--card-background-color);\n    --dashview-spacing-xs: 4px;\n    --dashview-spacing-sm: 8px;\n    --dashview-spacing-md: 16px;\n    --dashview-spacing-lg: 24px;\n    --dashview-spacing-xl: 32px;\n    --dashview-border-radius: var(--ha-card-border-radius, 12px);\n    --dashview-box-shadow: var(--ha-card-box-shadow, none);\n  }\n`;\nconst dashviewStyles = (0,lit/* css */.AH) `\n  * {\n    box-sizing: border-box;\n  }\n\n  .dashview-container {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    background: var(--dashview-background);\n  }\n\n  .dashview-header {\n    padding: var(--dashview-spacing-lg);\n    background: var(--dashview-card-background);\n    border-bottom: 1px solid var(--dashview-divider-color);\n    box-shadow: var(--dashview-box-shadow);\n  }\n\n  .dashview-content {\n    flex: 1;\n    padding: var(--dashview-spacing-lg);\n    overflow-y: auto;\n  }\n\n  .dashview-card {\n    background: var(--dashview-card-background);\n    border-radius: var(--dashview-border-radius);\n    padding: var(--dashview-spacing-lg);\n    margin-bottom: var(--dashview-spacing-md);\n    box-shadow: var(--dashview-box-shadow);\n  }\n\n  .dashview-loading {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    color: var(--dashview-secondary-text-color);\n  }\n\n  .dashview-error {\n    color: var(--dashview-error-color);\n    padding: var(--dashview-spacing-md);\n    text-align: center;\n  }\n\n  @media (max-width: 768px) {\n    .dashview-header {\n      padding: var(--dashview-spacing-md);\n    }\n\n    .dashview-content {\n      padding: var(--dashview-spacing-md);\n    }\n  }\n`;\n\n;// ./src/utils/gestures.ts\n/**\n * Touch gesture utilities for Dashview V2.\n * Provides swipe detection, long press handling, and haptic feedback.\n */\nconst DEFAULT_OPTIONS = {\n    swipeThreshold: 50,\n    longPressDelay: 500,\n    velocityThreshold: 0.3,\n    preventScroll: false\n};\nclass GestureHandler {\n    constructor(element, options = {}) {\n        this.startX = 0;\n        this.startY = 0;\n        this.startTime = 0;\n        this.isLongPress = false;\n        this.isSwiping = false;\n        this.element = element;\n        this.options = { ...DEFAULT_OPTIONS, ...options };\n        this.bindEvents();\n    }\n    onSwipeDetected(callback) {\n        this.onSwipe = callback;\n    }\n    onLongPressDetected(callback) {\n        this.onLongPress = callback;\n    }\n    onTapDetected(callback) {\n        this.onTap = callback;\n    }\n    bindEvents() {\n        this.element.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: !this.options.preventScroll });\n        this.element.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: !this.options.preventScroll });\n        this.element.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: true });\n        this.element.addEventListener('touchcancel', this.handleTouchCancel.bind(this), { passive: true });\n    }\n    handleTouchStart(event) {\n        const touch = event.touches[0];\n        this.startX = touch.clientX;\n        this.startY = touch.clientY;\n        this.startTime = Date.now();\n        this.isLongPress = false;\n        this.isSwiping = false;\n        // Start long press timer\n        if (this.onLongPress) {\n            this.longPressTimeout = window.setTimeout(() => {\n                this.isLongPress = true;\n                this.onLongPress({\n                    element: this.element,\n                    x: this.startX,\n                    y: this.startY\n                });\n                this.triggerHapticFeedback('medium');\n            }, this.options.longPressDelay);\n        }\n    }\n    handleTouchMove(event) {\n        if (this.isLongPress)\n            return;\n        const touch = event.touches[0];\n        const deltaX = Math.abs(touch.clientX - this.startX);\n        const deltaY = Math.abs(touch.clientY - this.startY);\n        // Cancel long press if moving too much\n        if ((deltaX > 10 || deltaY > 10) && this.longPressTimeout) {\n            clearTimeout(this.longPressTimeout);\n            this.longPressTimeout = undefined;\n        }\n        // Detect swipe start\n        if (!this.isSwiping && (deltaX > this.options.swipeThreshold || deltaY > this.options.swipeThreshold)) {\n            this.isSwiping = true;\n            if (this.options.preventScroll) {\n                event.preventDefault();\n            }\n        }\n    }\n    handleTouchEnd(event) {\n        const touch = event.changedTouches[0];\n        const endTime = Date.now();\n        const deltaX = touch.clientX - this.startX;\n        const deltaY = touch.clientY - this.startY;\n        const duration = endTime - this.startTime;\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n        // Clear long press timer\n        if (this.longPressTimeout) {\n            clearTimeout(this.longPressTimeout);\n            this.longPressTimeout = undefined;\n        }\n        if (this.isLongPress) {\n            // Long press already handled\n            return;\n        }\n        if (this.isSwiping && distance >= this.options.swipeThreshold) {\n            // Handle swipe\n            const velocity = distance / duration;\n            if (velocity >= this.options.velocityThreshold) {\n                const direction = this.getSwipeDirection(deltaX, deltaY);\n                if (this.onSwipe) {\n                    this.onSwipe({\n                        direction,\n                        distance,\n                        velocity,\n                        element: this.element\n                    });\n                }\n                this.triggerHapticFeedback('light');\n            }\n        }\n        else if (!this.isSwiping && duration < 200) {\n            // Handle tap\n            if (this.onTap) {\n                this.onTap(event);\n            }\n        }\n        this.reset();\n    }\n    handleTouchCancel() {\n        if (this.longPressTimeout) {\n            clearTimeout(this.longPressTimeout);\n            this.longPressTimeout = undefined;\n        }\n        this.reset();\n    }\n    getSwipeDirection(deltaX, deltaY) {\n        const absDeltaX = Math.abs(deltaX);\n        const absDeltaY = Math.abs(deltaY);\n        if (absDeltaX > absDeltaY) {\n            return deltaX > 0 ? 'right' : 'left';\n        }\n        else {\n            return deltaY > 0 ? 'down' : 'up';\n        }\n    }\n    reset() {\n        this.isLongPress = false;\n        this.isSwiping = false;\n    }\n    triggerHapticFeedback(intensity) {\n        if ('vibrate' in navigator) {\n            const patterns = {\n                light: 10,\n                medium: 20,\n                heavy: 50\n            };\n            navigator.vibrate(patterns[intensity]);\n        }\n    }\n    destroy() {\n        if (this.longPressTimeout) {\n            clearTimeout(this.longPressTimeout);\n        }\n        this.element.removeEventListener('touchstart', this.handleTouchStart.bind(this));\n        this.element.removeEventListener('touchmove', this.handleTouchMove.bind(this));\n        this.element.removeEventListener('touchend', this.handleTouchEnd.bind(this));\n        this.element.removeEventListener('touchcancel', this.handleTouchCancel.bind(this));\n    }\n}\n/**\n * Simple swipe detection for elements\n */\nfunction addSwipeListener(element, callback, options) {\n    const handler = new GestureHandler(element, options);\n    handler.onSwipeDetected(callback);\n    return () => handler.destroy();\n}\n/**\n * Simple long press detection for elements\n */\nfunction addLongPressListener(element, callback, options) {\n    const handler = new GestureHandler(element, options);\n    handler.onLongPressDetected(callback);\n    return () => handler.destroy();\n}\n/**\n * Haptic feedback utilities\n */\nclass HapticFeedback {\n    static isSupported() {\n        return 'vibrate' in navigator;\n    }\n    static light() {\n        if (this.isSupported()) {\n            navigator.vibrate(10);\n        }\n    }\n    static medium() {\n        if (this.isSupported()) {\n            navigator.vibrate(20);\n        }\n    }\n    static heavy() {\n        if (this.isSupported()) {\n            navigator.vibrate([50, 50, 50]);\n        }\n    }\n    static success() {\n        if (this.isSupported()) {\n            navigator.vibrate([10, 100, 10]);\n        }\n    }\n    static error() {\n        if (this.isSupported()) {\n            navigator.vibrate([100, 50, 100, 50, 100]);\n        }\n    }\n    static selection() {\n        if (this.isSupported()) {\n            navigator.vibrate(5);\n        }\n    }\n    static custom(pattern) {\n        if (this.isSupported()) {\n            navigator.vibrate(pattern);\n        }\n    }\n}\n/**\n * Touch target size helpers\n */\nconst TouchTarget = {\n    /**\n     * Minimum touch target size (44px) as per WCAG guidelines\n     */\n    MIN_SIZE: 44,\n    /**\n     * Check if an element meets minimum touch target requirements\n     */\n    meetsMinimumSize(element) {\n        const rect = element.getBoundingClientRect();\n        return rect.width >= this.MIN_SIZE && rect.height >= this.MIN_SIZE;\n    },\n    /**\n     * Add touch target padding to an element if needed\n     */\n    ensureMinimumSize(element) {\n        const rect = element.getBoundingClientRect();\n        if (rect.width < this.MIN_SIZE) {\n            const padding = (this.MIN_SIZE - rect.width) / 2;\n            element.style.paddingLeft = `${padding}px`;\n            element.style.paddingRight = `${padding}px`;\n        }\n        if (rect.height < this.MIN_SIZE) {\n            const padding = (this.MIN_SIZE - rect.height) / 2;\n            element.style.paddingTop = `${padding}px`;\n            element.style.paddingBottom = `${padding}px`;\n        }\n    }\n};\n/**\n * Gesture-enabled base class for Lit elements\n */\nclass GestureElement extends (/* unused pure expression or super */ null && (EventTarget)) {\n    enableGestures(element, options) {\n        this.gestureHandler = new GestureHandler(element, options);\n        this.gestureHandler.onSwipeDetected((event) => {\n            this.dispatchEvent(new CustomEvent('gesture-swipe', { detail: event }));\n        });\n        this.gestureHandler.onLongPressDetected((event) => {\n            this.dispatchEvent(new CustomEvent('gesture-longpress', { detail: event }));\n        });\n        this.gestureHandler.onTapDetected((event) => {\n            this.dispatchEvent(new CustomEvent('gesture-tap', { detail: event }));\n        });\n    }\n    disableGestures() {\n        if (this.gestureHandler) {\n            this.gestureHandler.destroy();\n            this.gestureHandler = undefined;\n        }\n    }\n}\n\n;// ./src/styles/animations.ts\n/**\n * Animation constants and utilities for Dashview V2 widgets.\n * Provides consistent timing, easing, and keyframe animations.\n */\n\nconst ANIMATION_DURATION = {\n    fast: '150ms',\n    normal: '250ms',\n    slow: '350ms'\n};\nconst EASING = {\n    standard: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n    decelerate: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n    accelerate: 'cubic-bezier(0.4, 0.0, 1, 1)',\n    sharp: 'cubic-bezier(0.4, 0.0, 0.6, 1)'\n};\n/**\n * Skeleton loading animation styles\n */\nconst skeletonStyles = (0,lit/* css */.AH) `\n  @keyframes skeleton-loading {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n  \n  .skeleton {\n    background: linear-gradient(\n      90deg,\n      var(--card-background-color) 0%,\n      var(--divider-color) 50%,\n      var(--card-background-color) 100%\n    );\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s ease-in-out infinite;\n    border-radius: 4px;\n  }\n  \n  .skeleton-text {\n    height: 16px;\n    margin: 4px 0;\n  }\n  \n  .skeleton-text.large {\n    height: 20px;\n  }\n  \n  .skeleton-text.small {\n    height: 12px;\n  }\n  \n  .skeleton-button {\n    height: 36px;\n    width: 100px;\n  }\n  \n  .skeleton-icon {\n    width: 24px;\n    height: 24px;\n    border-radius: 50%;\n  }\n  \n  .skeleton-card {\n    height: 120px;\n    width: 100%;\n    border-radius: 8px;\n  }\n`;\n/**\n * Smooth expand/collapse animation styles\n */\nconst expandCollapseStyles = (0,lit/* css */.AH) `\n  @keyframes expand {\n    from {\n      max-height: 0;\n      opacity: 0;\n    }\n    to {\n      max-height: 600px;\n      opacity: 1;\n    }\n  }\n  \n  @keyframes collapse {\n    from {\n      max-height: 600px;\n      opacity: 1;\n    }\n    to {\n      max-height: 0;\n      opacity: 0;\n    }\n  }\n  \n  .expand-enter {\n    animation: expand 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n    overflow: hidden;\n  }\n  \n  .collapse-exit {\n    animation: collapse 250ms cubic-bezier(0.4, 0.0, 1, 1);\n    overflow: hidden;\n  }\n  \n  .content-expandable {\n    overflow: hidden;\n    transition: max-height 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n  }\n  \n  .content-collapsed {\n    max-height: 0;\n  }\n  \n  .content-expanded {\n    max-height: 600px;\n  }\n`;\n/**\n * Touch interaction animations\n */\nconst touchStyles = (0,lit/* css */.AH) `\n  @keyframes touch-feedback {\n    0% { transform: scale(1); }\n    50% { transform: scale(0.95); }\n    100% { transform: scale(1); }\n  }\n  \n  .touch-target {\n    min-height: 44px;\n    min-width: 44px;\n    cursor: pointer;\n    -webkit-tap-highlight-color: transparent;\n    transition: transform 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n  \n  .touch-target:active {\n    animation: touch-feedback 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n  \n  .touch-target:hover {\n    background: var(--secondary-background-color);\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    .touch-target:active {\n      animation: none;\n      transform: scale(0.98);\n    }\n  }\n`;\n/**\n * Loading spinner animation\n */\nconst spinnerStyles = (0,lit/* css */.AH) `\n  @keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n  \n  .spinner {\n    animation: spin 1s linear infinite;\n  }\n  \n  .loading-dots {\n    display: inline-flex;\n    gap: 4px;\n  }\n  \n  .loading-dots::after {\n    content: '';\n    animation: loading-dots 1.5s ease-in-out infinite;\n  }\n  \n  @keyframes loading-dots {\n    0%, 20% { content: ''; }\n    40% { content: '.'; }\n    60% { content: '..'; }\n    80%, 100% { content: '...'; }\n  }\n`;\n/**\n * Fade in/out animations\n */\nconst fadeStyles = (0,lit/* css */.AH) `\n  @keyframes fade-in {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n  \n  @keyframes fade-out {\n    from { opacity: 1; }\n    to { opacity: 0; }\n  }\n  \n  .fade-in {\n    animation: fade-in 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n  }\n  \n  .fade-out {\n    animation: fade-out 250ms cubic-bezier(0.4, 0.0, 1, 1);\n  }\n  \n  .fade-transition {\n    transition: opacity 250ms cubic-bezier(0.4, 0.0, 0.2, 1);\n  }\n`;\n/**\n * Slide animations for mobile interactions\n */\nconst slideStyles = (0,lit/* css */.AH) `\n  @keyframes slide-in-right {\n    from { transform: translateX(100%); }\n    to { transform: translateX(0); }\n  }\n  \n  @keyframes slide-in-left {\n    from { transform: translateX(-100%); }\n    to { transform: translateX(0); }\n  }\n  \n  @keyframes slide-out-right {\n    from { transform: translateX(0); }\n    to { transform: translateX(100%); }\n  }\n  \n  @keyframes slide-out-left {\n    from { transform: translateX(0); }\n    to { transform: translateX(-100%); }\n  }\n  \n  .slide-in-right {\n    animation: slide-in-right 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n  }\n  \n  .slide-in-left {\n    animation: slide-in-left 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n  }\n  \n  .slide-out-right {\n    animation: slide-out-right 250ms cubic-bezier(0.4, 0.0, 1, 1);\n  }\n  \n  .slide-out-left {\n    animation: slide-out-left 250ms cubic-bezier(0.4, 0.0, 1, 1);\n  }\n`;\n/**\n * Combined animation styles for easy import\n */\nconst animationStyles = (0,lit/* css */.AH) `\n  ${skeletonStyles}\n  ${expandCollapseStyles}\n  ${touchStyles}\n  ${spinnerStyles}\n  ${fadeStyles}\n  ${slideStyles}\n  \n  /* Respect user's motion preferences */\n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n    }\n  }\n`;\n\n;// ./src/core/widget-base.ts\n/**\n * Base class for all Dashview widgets.\n * Provides lifecycle management, state handling, and visibility tracking.\n */\nvar _a;\n\n\n\n\n\n\nclass DashviewWidget extends DashviewBaseElement {\n    constructor() {\n        super(...arguments);\n        this.entityStates = new Map();\n        this.isVisible = false;\n        this.isLoading = true;\n        this.error = null;\n        this.stateUnsubscribers = [];\n        this.keyboardHandlers = new Map();\n    }\n    /**\n     * Get the list of entity IDs this widget wants to subscribe to.\n     * Can be overridden by subclasses for dynamic subscriptions.\n     */\n    subscribedEntities() {\n        return this.widgetConfig?.entities || [];\n    }\n    /**\n     * Called when widget configuration is set.\n     * Subclasses should override to validate their specific config.\n     */\n    setConfig(config) {\n        if (!config) {\n            throw new Error('Invalid configuration');\n        }\n        const errors = this.validateConfig(config);\n        if (errors.length > 0) {\n            throw new Error(`Configuration errors: ${errors.join(', ')}`);\n        }\n        this.widgetConfig = config;\n    }\n    /**\n     * Validate widget configuration.\n     * Returns array of error messages, empty if valid.\n     */\n    validateConfig(config) {\n        const errors = [];\n        if (!config.type) {\n            errors.push('Widget type is required');\n        }\n        if (!config.entities || !Array.isArray(config.entities)) {\n            errors.push('Entities must be an array');\n        }\n        return errors;\n    }\n    /**\n     * Called when entity state changes.\n     * Subclasses can override to handle state changes.\n     */\n    onStateChanged(entityId, newState, oldState) {\n        // Default implementation updates the local state map\n        if (newState) {\n            this.entityStates.set(entityId, newState);\n        }\n        else {\n            this.entityStates.delete(entityId);\n        }\n    }\n    /**\n     * Lifecycle: Called when element is added to DOM.\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.setupVisibilityObserver();\n        this.setupKeyboardHandlers();\n    }\n    /**\n     * Lifecycle: Called after first update.\n     */\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.initializeWidget();\n    }\n    /**\n     * Lifecycle: Called when element is removed from DOM.\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.cleanup();\n    }\n    /**\n     * Initialize the widget.\n     */\n    async initializeWidget() {\n        try {\n            this.isLoading = true;\n            this.error = null;\n            // Get managers from dashboard context\n            this.stateManager = this.getStateManager();\n            this.subscriptionManager = this.getSubscriptionManager();\n            if (!this.stateManager || !this.subscriptionManager) {\n                throw new Error('State or subscription manager not available');\n            }\n            // Load initial entity states\n            await this.loadInitialStates();\n            // Subscribe to state changes\n            this.subscribeToStateChanges();\n            this.isLoading = false;\n        }\n        catch (error) {\n            this.error = error instanceof Error ? error.message : 'Unknown error';\n            this.isLoading = false;\n            this.handleError(error, 'Widget initialization');\n        }\n    }\n    /**\n     * Get state manager from dashboard context.\n     * This should be provided by the parent dashboard.\n     */\n    getStateManager() {\n        // Try to get from parent dashboard element\n        const dashboard = this.closest('dashview-dashboard');\n        return dashboard?.stateManager;\n    }\n    /**\n     * Get subscription manager from dashboard context.\n     */\n    getSubscriptionManager() {\n        const dashboard = this.closest('dashview-dashboard');\n        return dashboard?.subscriptionManager;\n    }\n    /**\n     * Load initial states for all entities.\n     */\n    async loadInitialStates() {\n        const entities = this.subscribedEntities();\n        for (const entityId of entities) {\n            const state = this.hass.states[entityId];\n            if (state) {\n                this.entityStates.set(entityId, state);\n            }\n        }\n    }\n    /**\n     * Subscribe to state changes for our entities.\n     */\n    subscribeToStateChanges() {\n        if (!this.stateManager)\n            return;\n        const entities = this.subscribedEntities();\n        for (const entityId of entities) {\n            const unsubscribe = this.stateManager.subscribeToEntity(entityId, (diff) => {\n                this.onStateChanged(diff.entityId, diff.newState, diff.oldState);\n            });\n            this.stateUnsubscribers.push(unsubscribe);\n        }\n    }\n    /**\n     * Setup intersection observer for visibility tracking.\n     */\n    setupVisibilityObserver() {\n        this.intersectionObserver = new IntersectionObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === this) {\n                    this.handleVisibilityChange(entry.isIntersecting);\n                }\n            }\n        }, {\n            root: null,\n            rootMargin: '50px', // Start loading slightly before visible\n            threshold: 0.01,\n        });\n        this.intersectionObserver.observe(this);\n    }\n    /**\n     * Handle visibility changes.\n     */\n    handleVisibilityChange(isVisible) {\n        if (this.isVisible === isVisible)\n            return;\n        this.isVisible = isVisible;\n        if (isVisible) {\n            this.onBecameVisible();\n        }\n        else {\n            this.onBecameHidden();\n        }\n        // Update subscriptions based on visibility\n        this.updateSubscriptions();\n    }\n    /**\n     * Called when widget becomes visible.\n     * Subclasses can override for custom behavior.\n     */\n    onBecameVisible() {\n        // Default: no action\n    }\n    /**\n     * Called when widget becomes hidden.\n     * Subclasses can override for custom behavior.\n     */\n    onBecameHidden() {\n        // Default: no action\n    }\n    /**\n     * Update subscriptions based on current visibility.\n     */\n    updateSubscriptions() {\n        if (!this.subscriptionManager)\n            return;\n        const entities = this.subscribedEntities();\n        if (this.isVisible) {\n            // Widget is visible, ensure we're subscribed\n            const visibleEntities = this.subscriptionManager.getVisibleEntities();\n            const allVisible = new Set([...visibleEntities, ...entities]);\n            this.subscriptionManager.updateVisibleEntities(Array.from(allVisible));\n        }\n        else {\n            // Widget is hidden, we could unsubscribe\n            // But this is handled globally by the dashboard\n        }\n    }\n    /**\n     * Clean up resources.\n     */\n    cleanup() {\n        // Unsubscribe from state changes\n        for (const unsubscribe of this.stateUnsubscribers) {\n            unsubscribe();\n        }\n        this.stateUnsubscribers = [];\n        // Clean up intersection observer\n        if (this.intersectionObserver) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = undefined;\n        }\n        // Clean up keyboard handlers\n        this.removeKeyboardHandlers();\n        // Cancel any pending animation frames\n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n        }\n        // Clear state\n        this.entityStates.clear();\n    }\n    /**\n     * Helper to call Home Assistant service.\n     */\n    async callService(domain, service, data) {\n        try {\n            await this.hass.callService(domain, service, data);\n        }\n        catch (error) {\n            this.handleError(error, `Service call ${domain}.${service}`);\n            throw error;\n        }\n    }\n    /**\n     * Helper to toggle an entity.\n     */\n    async toggleEntity(entityId) {\n        const domain = entityId.split('.')[0];\n        await this.callService(domain, 'toggle', { entity_id: entityId });\n    }\n    /**\n     * Helper to turn on an entity.\n     */\n    async turnOn(entityId, data) {\n        const domain = entityId.split('.')[0];\n        await this.callService(domain, 'turn_on', { entity_id: entityId, ...data });\n    }\n    /**\n     * Helper to turn off an entity.\n     */\n    async turnOff(entityId) {\n        const domain = entityId.split('.')[0];\n        await this.callService(domain, 'turn_off', { entity_id: entityId });\n    }\n    /**\n     * Trigger haptic feedback with the specified intensity.\n     */\n    triggerHapticFeedback(intensity) {\n        HapticFeedback[intensity]();\n    }\n    /**\n     * Animate an element with the specified animation.\n     */\n    animateElement(element, animation, duration) {\n        return new Promise((resolve) => {\n            const animationDuration = duration || ANIMATION_DURATION.normal;\n            element.style.animation = `${animation} ${animationDuration} ${EASING.standard}`;\n            const handleAnimationEnd = () => {\n                element.style.animation = '';\n                element.removeEventListener('animationend', handleAnimationEnd);\n                resolve();\n            };\n            element.addEventListener('animationend', handleAnimationEnd);\n        });\n    }\n    /**\n     * Focus management helper.\n     */\n    focusElement(element, options) {\n        element.focus(options);\n    }\n    /**\n     * Set up keyboard event handlers for accessibility.\n     */\n    setupKeyboardHandlers() {\n        // Default keyboard handlers\n        this.addKeyboardHandler('Escape', this.handleEscapeKey.bind(this));\n        this.addKeyboardHandler('Tab', this.handleTabKey.bind(this));\n        this.addEventListener('keydown', this.handleKeydown.bind(this));\n    }\n    /**\n     * Remove keyboard event handlers.\n     */\n    removeKeyboardHandlers() {\n        this.keyboardHandlers.clear();\n        this.removeEventListener('keydown', this.handleKeydown.bind(this));\n    }\n    /**\n     * Add a keyboard event handler.\n     */\n    addKeyboardHandler(key, handler) {\n        this.keyboardHandlers.set(key, handler);\n    }\n    /**\n     * Handle keyboard events.\n     */\n    handleKeydown(event) {\n        const handler = this.keyboardHandlers.get(event.key);\n        if (handler) {\n            handler(event);\n        }\n    }\n    /**\n     * Handle Escape key (default: blur active element).\n     */\n    handleEscapeKey(_event) {\n        const activeElement = this.shadowRoot?.activeElement;\n        if (activeElement) {\n            activeElement.blur();\n        }\n    }\n    /**\n     * Handle Tab key for focus management.\n     */\n    handleTabKey(_event) {\n        // Default behavior - could be overridden by subclasses\n    }\n    /**\n     * Get all focusable elements within the widget.\n     */\n    getFocusableElements() {\n        const focusableSelectors = [\n            'button:not([disabled])',\n            'input:not([disabled])',\n            'select:not([disabled])',\n            'textarea:not([disabled])',\n            'a[href]',\n            '[tabindex]:not([tabindex=\"-1\"])',\n            'ha-icon-button:not([disabled])',\n            'mwc-button:not([disabled])',\n            'ha-switch:not([disabled])'\n        ].join(', ');\n        const elements = this.shadowRoot?.querySelectorAll(focusableSelectors) || [];\n        return Array.from(elements);\n    }\n}\n/**\n * Base styles for all widgets.\n */\nDashviewWidget.styles = (0,lit/* css */.AH) `\n    :host {\n      display: block;\n      position: relative;\n    }\n\n    .widget-container {\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .widget-loading {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n      color: var(--primary-text-color);\n    }\n\n    .widget-error {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n      color: var(--error-color, #f44336);\n      padding: 16px;\n      text-align: center;\n    }\n  `;\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* property */.MZ)({ type: Object }),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewWidget.prototype, \"widgetConfig\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", typeof (_a = typeof Map !== \"undefined\" && Map) === \"function\" ? _a : Object)\n], DashviewWidget.prototype, \"entityStates\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewWidget.prototype, \"isVisible\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewWidget.prototype, \"isLoading\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewWidget.prototype, \"error\", void 0);\n\n;// ./src/utils/icons.ts\n/**\n * Entity type to icon mapping utility.\n * Maps entity types and domains to Material Design Icons.\n */\nconst ENTITY_ICONS = {\n    // Lights\n    'light': 'mdi:lightbulb',\n    'light.ceiling': 'mdi:ceiling-light',\n    'light.floor': 'mdi:floor-lamp',\n    'light.desk': 'mdi:desk-lamp',\n    'light.strip': 'mdi:led-strip-variant',\n    'light.spot': 'mdi:spotlight-beam',\n    // Climate\n    'climate': 'mdi:thermostat',\n    'temperature': 'mdi:thermometer',\n    'humidity': 'mdi:water-percent',\n    'air_quality': 'mdi:air-filter',\n    // Security\n    'lock': 'mdi:lock',\n    'door': 'mdi:door',\n    'window': 'mdi:window-closed',\n    'motion': 'mdi:motion-sensor',\n    'presence': 'mdi:home-account',\n    'camera': 'mdi:cctv',\n    'alarm': 'mdi:shield-home',\n    // Media\n    'media_player': 'mdi:television',\n    'speaker': 'mdi:speaker',\n    'remote': 'mdi:remote',\n    // Switches & Controls\n    'switch': 'mdi:light-switch',\n    'fan': 'mdi:fan',\n    'cover': 'mdi:window-shutter',\n    'blind': 'mdi:blinds',\n    'curtain': 'mdi:curtains',\n    // Sensors\n    'sensor': 'mdi:eye',\n    'binary_sensor': 'mdi:radiobox-marked',\n    'battery': 'mdi:battery',\n    'power': 'mdi:flash',\n    'energy': 'mdi:lightning-bolt',\n    // Other devices\n    'vacuum': 'mdi:robot-vacuum',\n    'person': 'mdi:account',\n    'device_tracker': 'mdi:cellphone',\n    'sun': 'mdi:weather-sunny',\n    'weather': 'mdi:weather-partly-cloudy',\n    // Default\n    'default': 'mdi:home-assistant'\n};\nfunction getEntityIcon(entityId, state) {\n    // Check custom icon first\n    if (state?.attributes?.icon) {\n        return state.attributes.icon;\n    }\n    // Check device class for more specific icons\n    const deviceClass = state?.attributes?.device_class;\n    if (deviceClass && ENTITY_ICONS[deviceClass]) {\n        return ENTITY_ICONS[deviceClass];\n    }\n    // Match by entity ID patterns\n    for (const [pattern, icon] of Object.entries(ENTITY_ICONS)) {\n        if (entityId.includes(pattern)) {\n            return icon;\n        }\n    }\n    // Domain fallback\n    const domain = entityId.split('.')[0];\n    return ENTITY_ICONS[domain] || ENTITY_ICONS.default;\n}\n/**\n * Get icon color based on entity state and domain.\n */\nfunction getEntityIconColor(entityId, state) {\n    const domain = entityId.split('.')[0];\n    const isOn = state?.state === 'on';\n    const isActive = ['playing', 'open', 'unlocked', 'home', 'detected'].includes(state?.state);\n    const isUnavailable = state?.state === 'unavailable';\n    if (isUnavailable) {\n        return 'var(--disabled-text-color)';\n    }\n    // Domain-specific colors when active\n    if (isOn || isActive) {\n        switch (domain) {\n            case 'light':\n                return state?.attributes?.rgb_color\n                    ? `rgb(${state.attributes.rgb_color.join(',')})`\n                    : 'var(--primary-color)';\n            case 'climate':\n                const mode = state?.state;\n                if (mode === 'heat')\n                    return '#ff6b00';\n                if (mode === 'cool')\n                    return '#0288d1';\n                if (mode === 'heat_cool' || mode === 'auto')\n                    return '#388e3c';\n                return 'var(--primary-color)';\n            case 'lock':\n                return state?.state === 'locked' ? '#4caf50' : '#f44336';\n            case 'alarm_control_panel':\n                if (state?.state === 'armed_away')\n                    return '#f44336';\n                if (state?.state === 'armed_home')\n                    return '#ff9800';\n                if (state?.state === 'disarmed')\n                    return '#4caf50';\n                return 'var(--primary-color)';\n            default:\n                return 'var(--primary-color)';\n        }\n    }\n    return 'var(--secondary-text-color)';\n}\n/**\n * Get a mini icon for entity summaries.\n */\nfunction getMiniIcon(entityType) {\n    const miniIcons = {\n        'lights': 'mdi:lightbulb',\n        'temperature': 'mdi:thermometer',\n        'humidity': 'mdi:water-percent',\n        'motion': 'mdi:motion-sensor',\n        'doors': 'mdi:door',\n        'windows': 'mdi:window-closed',\n        'media': 'mdi:television',\n        'climate': 'mdi:thermostat'\n    };\n    return miniIcons[entityType] || 'mdi:circle';\n}\n\n;// ./src/widgets/room-widget.ts\n/**\n * Room widget for Dashview V2.\n * Displays all entities in a room with summary and controls.\n */\nvar room_widget_a, _b;\n\n\n\n\n\n\nlet RoomWidget = class RoomWidget extends DashviewWidget {\n    constructor() {\n        super(...arguments);\n        this.expanded = false;\n        this.lightCount = 0;\n        this.lightsOn = 0;\n        this.groupedEntities = {};\n    }\n    subscribedEntities() {\n        // Subscribe to all entities when expanded, or just key entities when collapsed\n        if (this.expanded || this.entityStates.size < 10) {\n            return this.widgetConfig?.entities || [];\n        }\n        // When collapsed with many entities, only subscribe to key entities\n        const entities = this.widgetConfig?.entities || [];\n        return entities.filter(id => id.includes('motion') ||\n            id.includes('door') ||\n            id.includes('presence') ||\n            id.includes('temperature') ||\n            id.includes('humidity') ||\n            id.startsWith('light.'));\n    }\n    getDefaultConfig() {\n        return {\n            type: 'room',\n            entities: [],\n            showEmpty: false,\n        };\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.updateSummary();\n    }\n    onStateChanged(entityId, newState, oldState) {\n        super.onStateChanged(entityId, newState, oldState);\n        this.updateSummary();\n    }\n    updateSummary() {\n        let lightCount = 0;\n        let lightsOn = 0;\n        let temperature;\n        let humidity;\n        let lastMotion;\n        // Group entities by type for better organization\n        this.groupedEntities = this.groupEntitiesByType();\n        for (const [entityId, state] of this.entityStates) {\n            if (entityId.startsWith('light.')) {\n                lightCount++;\n                if (state.state === 'on') {\n                    lightsOn++;\n                }\n            }\n            else if (entityId.includes('temperature') && state.state !== 'unavailable') {\n                const temp = parseFloat(state.state);\n                if (!isNaN(temp)) {\n                    temperature = temp;\n                }\n            }\n            else if (entityId.includes('humidity') && state.state !== 'unavailable') {\n                const hum = parseFloat(state.state);\n                if (!isNaN(hum)) {\n                    humidity = hum;\n                }\n            }\n            else if (entityId.includes('motion') || entityId.includes('presence')) {\n                if (state.state === 'on' && state.last_changed) {\n                    const motionTime = new Date(state.last_changed);\n                    if (!lastMotion || motionTime > lastMotion) {\n                        lastMotion = motionTime;\n                    }\n                }\n            }\n        }\n        this.lightCount = lightCount;\n        this.lightsOn = lightsOn;\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.lastMotion = lastMotion;\n    }\n    render() {\n        const roomName = this.areaName || this.widgetConfig?.title || 'Unknown Room';\n        if (this.isLoading) {\n            return this.renderSkeleton();\n        }\n        if (this.error) {\n            return (0,lit/* html */.qy) `\n        <div class=\"widget-error\">\n          ${this.error}\n        </div>\n      `;\n        }\n        return (0,lit/* html */.qy) `\n      <ha-card role=\"region\" aria-label=\"${roomName} room controls\">\n        <div class=\"header touch-target\" @click=${this.toggleExpanded} @keydown=${this.handleHeaderKeydown}>\n          <h2>${roomName}</h2>\n          <div class=\"summary\">\n            ${this.renderSummary()}\n          </div>\n          <ha-icon\n            class=\"expand-icon ${this.expanded ? 'expanded' : ''}\"\n            icon=\"mdi:chevron-down\"\n            aria-label=\"${this.expanded ? 'Collapse' : 'Expand'} room details\"\n          ></ha-icon>\n        </div>\n        \n        <div class=\"content ${this.expanded ? 'expanded' : 'collapsed'}\">\n          ${this.renderExpanded()}\n        </div>\n        \n        <div class=\"actions\">\n          ${this.lightCount > 0 ? (0,lit/* html */.qy) `\n            <mwc-button @click=${this.turnAllLightsOff} aria-label=\"Turn all lights off\">\n              <ha-icon icon=\"mdi:lightbulb-off\"></ha-icon>\n              All Off\n            </mwc-button>\n          ` : ''}\n        </div>\n      </ha-card>\n    `;\n    }\n    renderSummary() {\n        const summary = [];\n        // Light status\n        if (this.lightCount > 0) {\n            summary.push((0,lit/* html */.qy) `\n        <span class=\"summary-item\">\n          <ha-icon icon=\"mdi:lightbulb\"></ha-icon>\n          ${this.lightsOn}/${this.lightCount}\n        </span>\n      `);\n        }\n        // Temperature\n        if (this.temperature !== undefined) {\n            summary.push((0,lit/* html */.qy) `\n        <span class=\"summary-item\">\n          <ha-icon icon=\"mdi:thermometer\"></ha-icon>\n          ${this.temperature.toFixed(1)}°\n        </span>\n      `);\n        }\n        // Humidity\n        if (this.humidity !== undefined) {\n            summary.push((0,lit/* html */.qy) `\n        <span class=\"summary-item\">\n          <ha-icon icon=\"mdi:water-percent\"></ha-icon>\n          ${this.humidity.toFixed(0)}%\n        </span>\n      `);\n        }\n        // Last motion\n        if (this.lastMotion) {\n            const minutesAgo = Math.floor((Date.now() - this.lastMotion.getTime()) / 60000);\n            const timeStr = minutesAgo < 1 ? 'now' :\n                minutesAgo < 60 ? `${minutesAgo}m ago` :\n                    `${Math.floor(minutesAgo / 60)}h ago`;\n            summary.push((0,lit/* html */.qy) `\n        <span class=\"summary-item\">\n          <ha-icon icon=\"mdi:motion-sensor\"></ha-icon>\n          ${timeStr}\n        </span>\n      `);\n        }\n        return summary;\n    }\n    renderExpanded() {\n        return (0,lit/* html */.qy) `\n      <div class=\"entity-list\">\n        ${Object.entries(this.groupedEntities).map(([type, entities]) => this.renderEntityGroup(type, entities))}\n      </div>\n    `;\n    }\n    renderEntity(entityId) {\n        const state = this.entityStates.get(entityId);\n        if (!state)\n            return (0,lit/* html */.qy) ``;\n        const name = state.attributes.friendly_name || entityId;\n        const domain = entityId.split('.')[0];\n        const isToggleable = ['light', 'switch', 'fan', 'input_boolean'].includes(domain);\n        const icon = getEntityIcon(entityId, state);\n        const iconColor = getEntityIconColor(entityId, state);\n        return (0,lit/* html */.qy) `\n      <div class=\"entity-item touch-target\" @click=${isToggleable ? () => this.toggleEntity(entityId) : undefined}>\n        <ha-icon \n          class=\"entity-icon ${state.state} ${state.state === 'unavailable' ? 'unavailable' : ''}\"\n          icon=\"${icon}\"\n          style=\"color: ${iconColor}\"\n        ></ha-icon>\n        <span class=\"entity-name\">${name}</span>\n        <div class=\"entity-controls\">\n          ${isToggleable ? (0,lit/* html */.qy) `\n            <ha-switch\n              .checked=${state.state === 'on'}\n              @change=${(e) => {\n            e.stopPropagation();\n            this.toggleEntity(entityId);\n        }}\n              aria-label=\"Toggle ${name}\"\n            ></ha-switch>\n          ` : (0,lit/* html */.qy) `\n            <span class=\"entity-state\">${state.state}</span>\n          `}\n        </div>\n      </div>\n    `;\n    }\n    getSortedEntities() {\n        const entities = Array.from(this.entityStates.keys());\n        // Sort by domain priority, then by name\n        const domainPriority = {\n            'light': 1,\n            'switch': 2,\n            'fan': 3,\n            'climate': 4,\n            'cover': 5,\n            'sensor': 6,\n            'binary_sensor': 7,\n        };\n        return entities.sort((a, b) => {\n            const domainA = a.split('.')[0];\n            const domainB = b.split('.')[0];\n            const priorityA = domainPriority[domainA] || 999;\n            const priorityB = domainPriority[domainB] || 999;\n            if (priorityA !== priorityB) {\n                return priorityA - priorityB;\n            }\n            return a.localeCompare(b);\n        });\n    }\n    toggleExpanded() {\n        this.expanded = !this.expanded;\n        // Update subscriptions when expanding/collapsing\n        if (this.expanded) {\n            this.updateSubscriptions();\n        }\n    }\n    handleHeaderKeydown(event) {\n        if (event.key === 'Enter' || event.key === ' ') {\n            event.preventDefault();\n            this.toggleExpanded();\n        }\n    }\n    groupEntitiesByType() {\n        const groups = {};\n        for (const entityId of this.entityStates.keys()) {\n            const domain = entityId.split('.')[0];\n            // Group by domain with friendly names\n            const groupName = this.getDomainGroupName(domain);\n            if (!groups[groupName]) {\n                groups[groupName] = [];\n            }\n            groups[groupName].push(entityId);\n        }\n        // Sort entities within each group\n        for (const [groupName, entities] of Object.entries(groups)) {\n            groups[groupName] = entities.sort((a, b) => {\n                const stateA = this.entityStates.get(a);\n                const stateB = this.entityStates.get(b);\n                const nameA = stateA?.attributes?.friendly_name || a;\n                const nameB = stateB?.attributes?.friendly_name || b;\n                return nameA.localeCompare(nameB);\n            });\n        }\n        return groups;\n    }\n    getDomainGroupName(domain) {\n        const domainNames = {\n            'light': 'Lights',\n            'switch': 'Switches',\n            'fan': 'Fans',\n            'climate': 'Climate',\n            'cover': 'Covers',\n            'lock': 'Locks',\n            'sensor': 'Sensors',\n            'binary_sensor': 'Binary Sensors',\n            'media_player': 'Media',\n            'camera': 'Cameras',\n            'alarm_control_panel': 'Security'\n        };\n        return domainNames[domain] || domain.charAt(0).toUpperCase() + domain.slice(1);\n    }\n    renderEntityGroup(type, entities) {\n        if (entities.length === 0)\n            return (0,lit/* html */.qy) ``;\n        const typeIcons = {\n            'Lights': 'mdi:lightbulb',\n            'Switches': 'mdi:light-switch',\n            'Sensors': 'mdi:eye',\n            'Climate': 'mdi:thermostat',\n            'Media': 'mdi:television',\n            'Covers': 'mdi:window-shutter',\n            'Locks': 'mdi:lock',\n            'Fans': 'mdi:fan',\n            'Cameras': 'mdi:cctv',\n            'Security': 'mdi:shield-home'\n        };\n        return (0,lit/* html */.qy) `\n      <div class=\"entity-group\">\n        <div class=\"entity-group-header\">\n          <ha-icon icon=${typeIcons[type] || 'mdi:home'}></ha-icon>\n          <span>${type}</span>\n          <span class=\"count\">(${entities.length})</span>\n        </div>\n        ${entities.map(entity => this.renderEntity(entity))}\n      </div>\n    `;\n    }\n    renderSkeleton() {\n        return (0,lit/* html */.qy) `\n      <ha-card>\n        <div class=\"header\">\n          <div class=\"skeleton skeleton-text large\" style=\"width: 120px;\"></div>\n          <div class=\"summary\">\n            <div class=\"skeleton skeleton-text\" style=\"width: 40px;\"></div>\n            <div class=\"skeleton skeleton-text\" style=\"width: 50px;\"></div>\n            <div class=\"skeleton skeleton-text\" style=\"width: 45px;\"></div>\n          </div>\n          <div class=\"skeleton skeleton-icon\"></div>\n        </div>\n      </ha-card>\n    `;\n    }\n    async turnAllLightsOff() {\n        const lights = Array.from(this.entityStates.keys()).filter(id => id.startsWith('light.') && this.entityStates.get(id)?.state === 'on');\n        for (const light of lights) {\n            await this.turnOff(light);\n        }\n    }\n};\nRoomWidget.styles = (0,lit/* css */.AH) `\n    ${DashviewWidget.styles}\n    ${skeletonStyles}\n    ${touchStyles}\n      ha-card {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .header {\n        padding: 16px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        border-radius: 8px;\n        -webkit-tap-highlight-color: transparent;\n        transition: background 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n      }\n\n      .header:hover {\n        background: var(--secondary-background-color);\n      }\n\n      .header:focus {\n        outline: 2px solid var(--primary-color);\n        outline-offset: 2px;\n      }\n\n      .header h2 {\n        margin: 0;\n        font-size: 1.2em;\n        font-weight: 500;\n        flex: 1;\n      }\n\n      .summary {\n        display: flex;\n        gap: 16px;\n        align-items: center;\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n      }\n\n      .summary-item {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n      }\n\n      .summary-item ha-icon {\n        --mdc-icon-size: 16px;\n      }\n\n      .expand-icon {\n        transition: transform 250ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        --mdc-icon-size: 24px;\n      }\n\n      .expand-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      /* Enhanced content with smooth animations */\n      .content {\n        overflow: hidden;\n        transition: max-height 250ms cubic-bezier(0.0, 0.0, 0.2, 1);\n      }\n\n      .content.collapsed {\n        max-height: 0;\n      }\n\n      .content.expanded {\n        max-height: 600px;\n      }\n\n      .entity-list {\n        display: flex;\n        flex-direction: column;\n        gap: 2px;\n        max-height: 400px;\n        overflow-y: auto;\n        scrollbar-width: thin;\n        padding: 0 16px 16px;\n      }\n\n      .entity-group {\n        margin-bottom: 16px;\n      }\n\n      .entity-group:last-child {\n        margin-bottom: 0;\n      }\n\n      .entity-group-header {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        padding: 8px 0;\n        font-weight: 500;\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n        border-bottom: 1px solid var(--divider-color);\n        margin-bottom: 8px;\n      }\n\n      .entity-group-header ha-icon {\n        --mdc-icon-size: 18px;\n      }\n\n      .count {\n        opacity: 0.7;\n        font-size: 0.85em;\n      }\n\n      .entity-item {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        padding: 12px;\n        border-radius: 8px;\n        transition: all 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        min-height: 44px;\n        cursor: pointer;\n        -webkit-tap-highlight-color: transparent;\n      }\n\n      .entity-item:hover {\n        background: var(--secondary-background-color);\n      }\n\n      .entity-item:active {\n        transform: scale(0.98);\n      }\n\n      .entity-icon {\n        --mdc-icon-size: 24px;\n        transition: color 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        flex-shrink: 0;\n      }\n\n      .entity-icon.unavailable {\n        color: var(--disabled-text-color);\n      }\n\n      .entity-name {\n        flex: 1;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        font-size: 0.95em;\n      }\n\n      .entity-controls {\n        display: flex;\n        align-items: center;\n        flex-shrink: 0;\n      }\n\n      .entity-state {\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n        text-align: right;\n        min-width: 60px;\n      }\n\n      .actions {\n        padding: 8px 16px;\n        border-top: 1px solid var(--divider-color);\n        display: flex;\n        justify-content: flex-end;\n        gap: 8px;\n      }\n\n      .actions:empty {\n        display: none;\n      }\n\n      mwc-button {\n        --mdc-theme-primary: var(--primary-color);\n        min-height: 44px;\n      }\n\n      mwc-button ha-icon {\n        margin-right: 4px;\n      }\n\n      /* Mobile optimizations */\n      @media (max-width: 768px) {\n        .header {\n          padding: 12px;\n        }\n\n        .summary {\n          gap: 12px;\n          font-size: 0.85em;\n        }\n\n        .entity-item {\n          padding: 10px 12px;\n        }\n\n        .entity-name {\n          font-size: 0.9em;\n        }\n      }\n\n      /* Accessibility enhancements */\n      @media (prefers-reduced-motion: reduce) {\n        .header,\n        .expand-icon,\n        .entity-item,\n        .entity-icon,\n        .content {\n          transition: none;\n        }\n\n        .entity-item:active {\n          transform: none;\n        }\n      }\n\n      /* Focus indicators */\n      .entity-item:focus,\n      ha-switch:focus {\n        outline: 2px solid var(--primary-color);\n        outline-offset: 2px;\n      }\n    `;\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* property */.MZ)({ type: String }),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", String)\n], RoomWidget.prototype, \"areaId\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* property */.MZ)({ type: String }),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", String)\n], RoomWidget.prototype, \"areaName\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], RoomWidget.prototype, \"expanded\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], RoomWidget.prototype, \"lightCount\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], RoomWidget.prototype, \"lightsOn\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Number)\n], RoomWidget.prototype, \"temperature\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Number)\n], RoomWidget.prototype, \"humidity\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", typeof (room_widget_a = typeof Date !== \"undefined\" && Date) === \"function\" ? room_widget_a : Object)\n], RoomWidget.prototype, \"lastMotion\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", typeof (_b = typeof Record !== \"undefined\" && Record) === \"function\" ? _b : Object)\n], RoomWidget.prototype, \"groupedEntities\", void 0);\nRoomWidget = (0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* customElement */.EM)('dashview-room-widget')\n], RoomWidget);\n\n\n;// ./src/widgets/device-group-widget.ts\n/**\n * Device group widget for Dashview V2.\n * Groups and displays devices by type (switches, sensors, etc).\n */\n\n\n\n\nlet DeviceGroupWidget = class DeviceGroupWidget extends DashviewWidget {\n    constructor() {\n        super(...arguments);\n        this.deviceType = 'switch';\n        this.expanded = false;\n        this.groupedEntities = [];\n        this.onlineCount = 0;\n        this.activeCount = 0;\n    }\n    subscribedEntities() {\n        // Subscribe to all entities when expanded, or just active ones when collapsed\n        const entities = this.widgetConfig?.entities || [];\n        if (this.expanded) {\n            return entities;\n        }\n        // When collapsed, only subscribe to active entities\n        return entities.filter(id => {\n            const state = this.entityStates.get(id);\n            return state && state.state !== 'unavailable' && state.state !== 'unknown';\n        });\n    }\n    getDefaultConfig() {\n        return {\n            type: 'device-group',\n            deviceType: 'switch',\n            entities: [],\n            showOffline: false,\n            showGroupControls: true,\n        };\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.updateGroupedEntities();\n    }\n    onStateChanged(entityId, newState, oldState) {\n        super.onStateChanged(entityId, newState, oldState);\n        this.updateGroupedEntities();\n    }\n    updateGroupedEntities() {\n        const grouped = [];\n        let onlineCount = 0;\n        let activeCount = 0;\n        for (const [entityId, state] of this.entityStates) {\n            const isOnline = state.state !== 'unavailable' && state.state !== 'unknown';\n            const isToggleable = this.isToggleableEntity(entityId);\n            const isActive = isToggleable ? state.state === 'on' : isOnline;\n            if (isOnline)\n                onlineCount++;\n            if (isActive)\n                activeCount++;\n            grouped.push({\n                entityId,\n                name: state.attributes.friendly_name || entityId.split('.')[1].replace(/_/g, ' '),\n                state: state.state,\n                icon: state.attributes.icon || this.getDefaultIcon(entityId),\n                lastChanged: state.last_changed ? new Date(state.last_changed) : undefined,\n                isToggleable,\n                isOnline,\n            });\n        }\n        // Sort by online status, then by state, then by name\n        grouped.sort((a, b) => {\n            if (a.isOnline !== b.isOnline)\n                return b.isOnline ? 1 : -1;\n            if (a.state !== b.state) {\n                if (a.state === 'on')\n                    return -1;\n                if (b.state === 'on')\n                    return 1;\n            }\n            return a.name.localeCompare(b.name);\n        });\n        this.groupedEntities = grouped;\n        this.onlineCount = onlineCount;\n        this.activeCount = activeCount;\n    }\n    isToggleableEntity(entityId) {\n        const domain = entityId.split('.')[0];\n        return ['switch', 'light', 'fan', 'input_boolean', 'cover'].includes(domain);\n    }\n    getDefaultIcon(entityId) {\n        const domain = entityId.split('.')[0];\n        const iconMap = {\n            'switch': 'mdi:toggle-switch',\n            'sensor': 'mdi:eye',\n            'binary_sensor': 'mdi:radiobox-blank',\n            'cover': 'mdi:window-shutter',\n            'fan': 'mdi:fan',\n            'light': 'mdi:lightbulb',\n        };\n        return iconMap[domain] || 'mdi:devices';\n    }\n    render() {\n        const title = this.groupName ||\n            this.widgetConfig?.title ||\n            `${this.deviceType.charAt(0).toUpperCase() + this.deviceType.slice(1)}s`;\n        if (this.isLoading) {\n            return (0,lit/* html */.qy) `\n        <div class=\"widget-loading\">\n          Loading devices...\n        </div>\n      `;\n        }\n        if (this.error) {\n            return (0,lit/* html */.qy) `\n        <div class=\"widget-error\">\n          ${this.error}\n        </div>\n      `;\n        }\n        const config = this.widgetConfig;\n        const showOffline = config?.showOffline ?? false;\n        const filteredEntities = showOffline ?\n            this.groupedEntities :\n            this.groupedEntities.filter(e => e.isOnline);\n        return (0,lit/* html */.qy) `\n      <ha-card>\n        <div class=\"header\" @click=${this.toggleExpanded}>\n          <div class=\"header-content\">\n            <h2>${title}</h2>\n            <div class=\"device-count\">\n              ${this.activeCount}/${this.onlineCount}\n            </div>\n          </div>\n          <ha-icon\n            class=\"expand-icon ${this.expanded ? 'expanded' : ''}\"\n            icon=\"mdi:chevron-down\"\n          ></ha-icon>\n        </div>\n\n        ${this.expanded ? (0,lit/* html */.qy) `\n          <div class=\"entities\">\n            ${filteredEntities.length === 0 ? (0,lit/* html */.qy) `\n              <div class=\"empty-state\">\n                No ${showOffline ? '' : 'online'} devices found\n              </div>\n            ` : filteredEntities.map(entity => this.renderEntity(entity))}\n          </div>\n        ` : ''}\n\n        ${this.renderActions()}\n      </ha-card>\n    `;\n    }\n    renderEntity(entity) {\n        const stateDisplay = this.getStateDisplay(entity);\n        const stateClass = entity.isOnline ? '' : 'offline';\n        return (0,lit/* html */.qy) `\n      <div class=\"entity-row ${stateClass}\">\n        <ha-icon \n          icon=\"${entity.icon}\"\n          class=\"entity-icon ${entity.state === 'on' ? 'active' : ''}\"\n        ></ha-icon>\n        <span class=\"entity-name\">${entity.name}</span>\n        ${entity.isToggleable && entity.isOnline ? (0,lit/* html */.qy) `\n          <ha-switch\n            .checked=${entity.state === 'on'}\n            @change=${() => this.toggleEntity(entity.entityId)}\n          ></ha-switch>\n        ` : (0,lit/* html */.qy) `\n          <span class=\"entity-state\">${stateDisplay}</span>\n        `}\n      </div>\n    `;\n    }\n    getStateDisplay(entity) {\n        if (!entity.isOnline)\n            return 'Offline';\n        // For sensors, show the value with unit\n        if (entity.entityId.includes('sensor')) {\n            const state = this.entityStates.get(entity.entityId);\n            const unit = state?.attributes?.unit_of_measurement || '';\n            return `${entity.state}${unit ? ' ' + unit : ''}`;\n        }\n        // For binary sensors, show more descriptive text\n        if (entity.entityId.includes('binary_sensor')) {\n            return entity.state === 'on' ? 'Detected' : 'Clear';\n        }\n        return entity.state;\n    }\n    renderActions() {\n        const config = this.widgetConfig;\n        const showGroupControls = config?.showGroupControls ?? true;\n        if (!showGroupControls || !this.hasToggleableEntities()) {\n            return (0,lit/* html */.qy) ``;\n        }\n        const hasActiveDevices = this.groupedEntities.some(e => e.isToggleable && e.isOnline && e.state === 'on');\n        return (0,lit/* html */.qy) `\n      <div class=\"actions\">\n        ${hasActiveDevices ? (0,lit/* html */.qy) `\n          <mwc-button @click=${this.turnAllOff}>\n            <ha-icon icon=\"mdi:power-off\"></ha-icon>\n            All Off\n          </mwc-button>\n        ` : ''}\n        <mwc-button @click=${this.turnAllOn}>\n          <ha-icon icon=\"mdi:power-on\"></ha-icon>\n          All On\n        </mwc-button>\n      </div>\n    `;\n    }\n    hasToggleableEntities() {\n        return this.groupedEntities.some(e => e.isToggleable && e.isOnline);\n    }\n    toggleExpanded() {\n        this.expanded = !this.expanded;\n        // Update subscriptions when expanding/collapsing\n        if (this.expanded) {\n            this.updateSubscriptions();\n        }\n    }\n    async turnAllOff() {\n        const toggleable = this.groupedEntities.filter(e => e.isToggleable && e.isOnline && e.state === 'on');\n        for (const entity of toggleable) {\n            await this.turnOff(entity.entityId);\n        }\n    }\n    async turnAllOn() {\n        const toggleable = this.groupedEntities.filter(e => e.isToggleable && e.isOnline && e.state === 'off');\n        for (const entity of toggleable) {\n            await this.turnOn(entity.entityId);\n        }\n    }\n};\nDeviceGroupWidget.styles = [\n    DashviewWidget.styles,\n    (0,lit/* css */.AH) `\n      ha-card {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .header {\n        padding: 16px;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        background: linear-gradient(to bottom, rgba(var(--rgb-primary-color), 0.05), transparent);\n      }\n\n      .header-content {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .header h2 {\n        margin: 0;\n        font-size: 1.2em;\n        font-weight: 500;\n      }\n\n      .device-count {\n        background: var(--primary-color);\n        color: var(--text-primary-color, white);\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-size: 0.8em;\n        font-weight: 500;\n      }\n\n      .expand-icon {\n        transition: transform 0.3s ease;\n        color: var(--secondary-text-color);\n      }\n\n      .expand-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .entities {\n        flex: 1;\n        overflow-y: auto;\n        padding: 0 16px;\n        max-height: 400px;\n      }\n\n      .entity-row {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        padding: 12px 0;\n        border-bottom: 1px solid var(--divider-color);\n        transition: opacity 0.2s ease;\n      }\n\n      .entity-row:last-child {\n        border-bottom: none;\n      }\n\n      .entity-row.offline {\n        opacity: 0.5;\n      }\n\n      .entity-icon {\n        --mdc-icon-size: 20px;\n        color: var(--secondary-text-color);\n        transition: color 0.2s ease;\n      }\n\n      .entity-icon.active {\n        color: var(--primary-color);\n      }\n\n      .entity-name {\n        flex: 1;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      .entity-state {\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n        min-width: 60px;\n        text-align: right;\n      }\n\n      .empty-state {\n        padding: 32px;\n        text-align: center;\n        color: var(--secondary-text-color);\n        font-style: italic;\n      }\n\n      .actions {\n        padding: 8px 16px;\n        border-top: 1px solid var(--divider-color);\n        display: flex;\n        justify-content: flex-end;\n        gap: 8px;\n      }\n\n      .actions:empty {\n        display: none;\n      }\n\n      mwc-button {\n        --mdc-theme-primary: var(--primary-color);\n      }\n\n      mwc-button ha-icon {\n        margin-right: 4px;\n      }\n    `\n];\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* property */.MZ)({ type: String }),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", String)\n], DeviceGroupWidget.prototype, \"deviceType\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* property */.MZ)({ type: String }),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", String)\n], DeviceGroupWidget.prototype, \"groupName\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DeviceGroupWidget.prototype, \"expanded\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Array)\n], DeviceGroupWidget.prototype, \"groupedEntities\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DeviceGroupWidget.prototype, \"onlineCount\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DeviceGroupWidget.prototype, \"activeCount\", void 0);\nDeviceGroupWidget = (0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* customElement */.EM)('dashview-device-group-widget')\n], DeviceGroupWidget);\n\n\n;// ./src/widgets/climate-widget.ts\n/**\n * Climate widget for Dashview V2.\n * Controls HVAC systems, thermostats, and climate entities.\n */\n\n\n\n\n\nlet ClimateWidget = class ClimateWidget extends DashviewWidget {\n    constructor() {\n        super(...arguments);\n        this.hvacMode = 'off';\n        this.availableModes = [];\n        this.availablePresets = [];\n        this.isAdjusting = false;\n        this.showTempDial = true;\n    }\n    subscribedEntities() {\n        const entities = [];\n        // Primary climate entity\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (climateId) {\n            entities.push(climateId);\n        }\n        // Related humidity sensor if any\n        const humidityEntity = this.widgetConfig?.entities?.find(e => e.includes('humidity') && !e.includes('climate'));\n        if (humidityEntity) {\n            entities.push(humidityEntity);\n        }\n        return entities;\n    }\n    getDefaultConfig() {\n        return {\n            type: 'climate',\n            entities: [],\n            showHumidity: true,\n            showPresets: true,\n            temperatureStep: 0.5,\n        };\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.updateClimateState();\n    }\n    onStateChanged(entityId, newState, oldState) {\n        super.onStateChanged(entityId, newState, oldState);\n        this.updateClimateState();\n    }\n    updateClimateState() {\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (!climateId)\n            return;\n        const climateState = this.entityStates.get(climateId);\n        if (!climateState)\n            return;\n        // Update temperature values\n        this.currentTemp = climateState.attributes.current_temperature;\n        this.hvacMode = climateState.state;\n        this.presetMode = climateState.attributes.preset_mode;\n        // Handle different temperature control modes\n        if (climateState.attributes.target_temp_low && climateState.attributes.target_temp_high) {\n            this.targetTempLow = climateState.attributes.target_temp_low;\n            this.targetTempHigh = climateState.attributes.target_temp_high;\n            this.targetTemp = undefined;\n        }\n        else {\n            this.targetTemp = climateState.attributes.temperature;\n            this.targetTempLow = undefined;\n            this.targetTempHigh = undefined;\n        }\n        // Available modes\n        this.availableModes = climateState.attributes.hvac_modes || [];\n        this.availablePresets = climateState.attributes.preset_modes || [];\n        // Check for humidity sensor\n        const humidityEntity = this.widgetConfig?.entities?.find(e => e.includes('humidity') && !e.includes('climate'));\n        if (humidityEntity) {\n            const humidityState = this.entityStates.get(humidityEntity);\n            if (humidityState && humidityState.state !== 'unavailable') {\n                this.humidity = parseFloat(humidityState.state);\n            }\n        }\n    }\n    render() {\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        const title = this.widgetConfig?.title || 'Climate Control';\n        if (this.isLoading) {\n            return this.renderSkeleton();\n        }\n        if (this.error || !climateId) {\n            return (0,lit/* html */.qy) `\n        <div class=\"widget-error\">\n          ${this.error || 'No climate entity configured'}\n        </div>\n      `;\n        }\n        return (0,lit/* html */.qy) `\n      <ha-card>\n        <div class=\"header\">\n          <h2>${title}</h2>\n          <div class=\"hvac-mode ${this.hvacMode}\">\n            ${this.hvacMode.toUpperCase()}\n          </div>\n        </div>\n\n        <div class=\"temperature-display\">\n          ${this.showTempDial ? this.renderTemperatureDial() : this.renderTemperatureDisplay()}\n        </div>\n\n        ${this.renderTemperatureControls()}\n        ${this.renderModeSelector()}\n        ${this.renderPresetSelector()}\n        ${this.renderHumidity()}\n      </ha-card>\n    `;\n    }\n    renderTemperatureDisplay() {\n        if (this.currentTemp === undefined) {\n            return (0,lit/* html */.qy) `<span class=\"temp-unavailable\">--</span>`;\n        }\n        return (0,lit/* html */.qy) `\n      <div class=\"current-temp\">\n        <span class=\"temp-value\">${this.currentTemp.toFixed(1)}</span>\n        <span class=\"temp-unit\">°C</span>\n      </div>\n      ${this.renderTargetTemp()}\n    `;\n    }\n    renderTemperatureDial() {\n        if (this.currentTemp === undefined) {\n            return (0,lit/* html */.qy) `<div class=\"temp-dial-unavailable\">Temperature Unavailable</div>`;\n        }\n        const minTemp = 10;\n        const maxTemp = 35;\n        const currentPercent = Math.max(0, Math.min(100, ((this.currentTemp - minTemp) / (maxTemp - minTemp)) * 100));\n        const targetPercent = this.targetTemp ? Math.max(0, Math.min(100, ((this.targetTemp - minTemp) / (maxTemp - minTemp)) * 100)) : currentPercent;\n        return (0,lit/* html */.qy) `\n      <div class=\"temp-dial-container\">\n        <div class=\"temp-dial\">\n          <svg viewBox=\"0 0 200 200\" class=\"dial-svg\">\n            <!-- Background circle -->\n            <circle cx=\"100\" cy=\"100\" r=\"80\" class=\"dial-bg\" />\n            <!-- Current temperature arc -->\n            <circle \n              cx=\"100\" \n              cy=\"100\" \n              r=\"80\" \n              class=\"dial-current\"\n              stroke-dasharray=\"${(currentPercent / 100) * 502.6} 502.6\"\n              transform=\"rotate(-90 100 100)\"\n            />\n            <!-- Target temperature indicator -->\n            ${this.targetTemp ? (0,lit/* html */.qy) `\n              <circle \n                cx=\"100\" \n                cy=\"100\" \n                r=\"80\" \n                class=\"dial-target\"\n                stroke-dasharray=\"3 502.6\"\n                stroke-dashoffset=\"${-((targetPercent / 100) * 502.6)}\"\n                transform=\"rotate(-90 100 100)\"\n              />\n            ` : ''}\n          </svg>\n          <div class=\"dial-center\">\n            <div class=\"current-temp-dial\">\n              <span class=\"temp-value-dial\">${this.currentTemp.toFixed(1)}</span>\n              <span class=\"temp-unit-dial\">°C</span>\n            </div>\n            ${this.targetTemp ? (0,lit/* html */.qy) `\n              <div class=\"target-temp-dial\">\n                Target: ${this.targetTemp.toFixed(1)}°C\n              </div>\n            ` : ''}\n          </div>\n        </div>\n        <div class=\"temp-trend\">\n          ${this.renderTemperatureTrend()}\n        </div>\n      </div>\n    `;\n    }\n    renderTemperatureTrend() {\n        // Placeholder for temperature trend mini-graph\n        // In a real implementation, this would show historical data\n        return (0,lit/* html */.qy) `\n      <div class=\"trend-indicator\">\n        <ha-icon icon=\"mdi:trending-up\" class=\"trend-icon\"></ha-icon>\n        <span class=\"trend-text\">Trending up</span>\n      </div>\n    `;\n    }\n    renderTargetTemp() {\n        if (this.hvacMode === 'off') {\n            return (0,lit/* html */.qy) ``;\n        }\n        if (this.targetTempLow !== undefined && this.targetTempHigh !== undefined) {\n            return (0,lit/* html */.qy) `\n        <div class=\"target-temp-range\">\n          <span class=\"target-label\">Target:</span>\n          <span class=\"target-value\">${this.targetTempLow.toFixed(1)} - ${this.targetTempHigh.toFixed(1)}°C</span>\n        </div>\n      `;\n        }\n        if (this.targetTemp !== undefined) {\n            return (0,lit/* html */.qy) `\n        <div class=\"target-temp\">\n          <span class=\"target-label\">Target:</span>\n          <span class=\"target-value\">${this.targetTemp.toFixed(1)}°C</span>\n        </div>\n      `;\n        }\n        return (0,lit/* html */.qy) ``;\n    }\n    renderTemperatureControls() {\n        if (this.hvacMode === 'off' || this.hvacMode === 'fan_only') {\n            return (0,lit/* html */.qy) ``;\n        }\n        const config = this.widgetConfig;\n        const step = config?.temperatureStep || 0.5;\n        if (this.targetTempLow !== undefined && this.targetTempHigh !== undefined) {\n            return (0,lit/* html */.qy) `\n        <div class=\"temp-controls-dual\">\n          <div class=\"temp-control\">\n            <span class=\"control-label\">Cool to</span>\n            <div class=\"control-buttons\">\n              <ha-icon-button\n                icon=\"mdi:minus\"\n                @click=${() => this.adjustTargetTemp('low', -step)}\n              ></ha-icon-button>\n              <span class=\"control-value\">${this.targetTempLow.toFixed(1)}°C</span>\n              <ha-icon-button\n                icon=\"mdi:plus\"\n                @click=${() => this.adjustTargetTemp('low', step)}\n              ></ha-icon-button>\n            </div>\n          </div>\n          <div class=\"temp-control\">\n            <span class=\"control-label\">Heat to</span>\n            <div class=\"control-buttons\">\n              <ha-icon-button\n                icon=\"mdi:minus\"\n                @click=${() => this.adjustTargetTemp('high', -step)}\n              ></ha-icon-button>\n              <span class=\"control-value\">${this.targetTempHigh.toFixed(1)}°C</span>\n              <ha-icon-button\n                icon=\"mdi:plus\"\n                @click=${() => this.adjustTargetTemp('high', step)}\n              ></ha-icon-button>\n            </div>\n          </div>\n        </div>\n      `;\n        }\n        if (this.targetTemp !== undefined) {\n            return (0,lit/* html */.qy) `\n        <div class=\"temp-controls\">\n          <ha-icon-button\n            icon=\"mdi:minus\"\n            @click=${() => this.adjustTargetTemp('single', -step)}\n          ></ha-icon-button>\n          <span class=\"control-value\">${this.targetTemp.toFixed(1)}°C</span>\n          <ha-icon-button\n            icon=\"mdi:plus\"\n            @click=${() => this.adjustTargetTemp('single', step)}\n          ></ha-icon-button>\n        </div>\n      `;\n        }\n        return (0,lit/* html */.qy) ``;\n    }\n    renderModeSelector() {\n        if (this.availableModes.length <= 1) {\n            return (0,lit/* html */.qy) ``;\n        }\n        const modeIcons = {\n            'off': 'mdi:power',\n            'heat': 'mdi:fire',\n            'cool': 'mdi:snowflake',\n            'heat_cool': 'mdi:autorenew',\n            'auto': 'mdi:calendar-sync',\n            'dry': 'mdi:water-percent',\n            'fan_only': 'mdi:fan',\n        };\n        const modeColors = {\n            'off': 'var(--secondary-text-color)',\n            'heat': '#ff6b00',\n            'cool': '#0288d1',\n            'heat_cool': '#388e3c',\n            'auto': '#388e3c',\n            'dry': '#9c27b0',\n            'fan_only': '#607d8b',\n        };\n        return (0,lit/* html */.qy) `\n      <div class=\"mode-selector\">\n        ${this.availableModes.map(mode => (0,lit/* html */.qy) `\n          <button\n            class=\"mode-button touch-target ${mode === this.hvacMode ? 'active' : ''}\"\n            @click=${() => this.setHvacMode(mode)}\n            aria-label=\"Set ${mode.replace('_', ' ')} mode\"\n            style=\"--mode-color: ${modeColors[mode]}\"\n          >\n            <ha-icon icon=\"${modeIcons[mode]}\"></ha-icon>\n            <span>${mode.replace('_', ' ')}</span>\n          </button>\n        `)}\n      </div>\n    `;\n    }\n    renderPresetSelector() {\n        const config = this.widgetConfig;\n        if (!config?.showPresets || this.availablePresets.length === 0) {\n            return (0,lit/* html */.qy) ``;\n        }\n        const presetIcons = {\n            'eco': 'mdi:leaf',\n            'away': 'mdi:home-export-outline',\n            'boost': 'mdi:rocket-launch',\n            'comfort': 'mdi:sofa',\n            'home': 'mdi:home',\n            'sleep': 'mdi:sleep',\n            'activity': 'mdi:run'\n        };\n        return (0,lit/* html */.qy) `\n      <div class=\"preset-selector\">\n        <span class=\"preset-label\">Presets:</span>\n        <div class=\"preset-buttons\">\n          <button \n            class=\"preset-button touch-target ${!this.presetMode ? 'active' : ''}\"\n            @click=${() => this.setPresetMode(null)}\n            aria-label=\"No preset\"\n          >\n            <ha-icon icon=\"mdi:close\"></ha-icon>\n            <span>None</span>\n          </button>\n          ${this.availablePresets.map(preset => (0,lit/* html */.qy) `\n            <button\n              class=\"preset-button touch-target ${preset === this.presetMode ? 'active' : ''}\"\n              @click=${() => this.setPresetMode(preset)}\n              aria-label=\"Set ${preset} preset\"\n            >\n              <ha-icon icon=\"${presetIcons[preset] || 'mdi:cog'}\"></ha-icon>\n              <span>${preset}</span>\n            </button>\n          `)}\n        </div>\n      </div>\n    `;\n    }\n    renderHumidity() {\n        const config = this.widgetConfig;\n        if (!config?.showHumidity || this.humidity === undefined) {\n            return (0,lit/* html */.qy) ``;\n        }\n        return (0,lit/* html */.qy) `\n      <div class=\"humidity-display\">\n        <ha-icon icon=\"mdi:water-percent\"></ha-icon>\n        <span>Humidity: ${this.humidity.toFixed(0)}%</span>\n      </div>\n    `;\n    }\n    async adjustTargetTemp(type, change) {\n        if (this.isAdjusting)\n            return;\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (!climateId)\n            return;\n        this.isAdjusting = true;\n        try {\n            const service_data = {};\n            if (type === 'single' && this.targetTemp !== undefined) {\n                service_data.temperature = Math.round((this.targetTemp + change) * 2) / 2;\n            }\n            else if (type === 'low' && this.targetTempLow !== undefined) {\n                service_data.target_temp_low = Math.round((this.targetTempLow + change) * 2) / 2;\n                service_data.target_temp_high = this.targetTempHigh;\n            }\n            else if (type === 'high' && this.targetTempHigh !== undefined) {\n                service_data.target_temp_low = this.targetTempLow;\n                service_data.target_temp_high = Math.round((this.targetTempHigh + change) * 2) / 2;\n            }\n            await this.hass.callService('climate', 'set_temperature', {\n                entity_id: climateId,\n                ...service_data\n            });\n        }\n        catch (error) {\n            console.error('Failed to adjust temperature:', error);\n        }\n        finally {\n            this.isAdjusting = false;\n        }\n    }\n    async setHvacMode(mode) {\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (!climateId)\n            return;\n        try {\n            await this.hass.callService('climate', 'set_hvac_mode', {\n                entity_id: climateId,\n                hvac_mode: mode\n            });\n        }\n        catch (error) {\n            console.error('Failed to set HVAC mode:', error);\n        }\n    }\n    async setPresetMode(preset) {\n        const climateId = this.climateEntityId || this.widgetConfig?.entities?.[0];\n        if (!climateId)\n            return;\n        try {\n            await this.hass.callService('climate', 'set_preset_mode', {\n                entity_id: climateId,\n                preset_mode: preset\n            });\n        }\n        catch (error) {\n            console.error('Failed to set preset mode:', error);\n        }\n    }\n    renderSkeleton() {\n        return (0,lit/* html */.qy) `\n      <ha-card>\n        <div class=\"header\">\n          <div class=\"skeleton skeleton-text large\" style=\"width: 140px;\"></div>\n          <div class=\"skeleton skeleton-button\" style=\"width: 80px; height: 28px;\"></div>\n        </div>\n        <div class=\"temperature-display\">\n          <div class=\"skeleton skeleton-card\" style=\"height: 200px; margin: 16px;\"></div>\n        </div>\n        <div class=\"mode-selector\">\n          <div class=\"skeleton skeleton-button\" style=\"margin: 8px;\"></div>\n          <div class=\"skeleton skeleton-button\" style=\"margin: 8px;\"></div>\n          <div class=\"skeleton skeleton-button\" style=\"margin: 8px;\"></div>\n        </div>\n      </ha-card>\n    `;\n    }\n};\nClimateWidget.styles = (0,lit/* css */.AH) `\n    ${DashviewWidget.styles}\n    ${skeletonStyles}\n    ${touchStyles}\n      ha-card {\n        height: 100%;\n        min-height: 250px;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .header {\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n\n      .header h2 {\n        margin: 0;\n        font-size: 1.2em;\n        font-weight: 500;\n      }\n\n      .hvac-mode {\n        padding: 4px 12px;\n        border-radius: 16px;\n        font-size: 0.8em;\n        font-weight: 500;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n      }\n\n      .hvac-mode.off {\n        background: var(--secondary-background-color);\n        color: var(--secondary-text-color);\n      }\n\n      .hvac-mode.heat {\n        background: rgba(255, 152, 0, 0.2);\n        color: #ff6b00;\n      }\n\n      .hvac-mode.cool {\n        background: rgba(33, 150, 243, 0.2);\n        color: #0288d1;\n      }\n\n      .hvac-mode.heat_cool,\n      .hvac-mode.auto {\n        background: rgba(76, 175, 80, 0.2);\n        color: #388e3c;\n      }\n\n      .temperature-display {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        padding: 16px;\n      }\n\n      .current-temp {\n        display: flex;\n        align-items: baseline;\n        gap: 4px;\n      }\n\n      .temp-value {\n        font-size: 3.5em;\n        font-weight: 300;\n        color: var(--primary-color);\n        line-height: 1;\n      }\n\n      .temp-unit {\n        font-size: 1.5em;\n        color: var(--secondary-text-color);\n      }\n\n      .temp-unavailable {\n        font-size: 3em;\n        color: var(--secondary-text-color);\n      }\n\n      .target-temp,\n      .target-temp-range {\n        margin-top: 8px;\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n      }\n\n      .target-label {\n        opacity: 0.8;\n        margin-right: 4px;\n      }\n\n      .temp-controls {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 16px;\n        padding: 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      .temp-controls-dual {\n        display: flex;\n        gap: 24px;\n        padding: 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      .temp-control {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 8px;\n      }\n\n      .control-label {\n        font-size: 0.85em;\n        color: var(--secondary-text-color);\n      }\n\n      .control-buttons {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n      }\n\n      .control-value {\n        font-size: 1.4em;\n        min-width: 60px;\n        text-align: center;\n      }\n\n      .mode-selector {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));\n        gap: 8px;\n        padding: 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      .mode-button {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 4px;\n        padding: 12px 8px;\n        border: 2px solid var(--divider-color);\n        border-radius: 12px;\n        background: var(--card-background-color);\n        cursor: pointer;\n        transition: all 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        font-size: 0.75em;\n        text-transform: capitalize;\n        min-height: 44px;\n        min-width: 44px;\n      }\n\n      .mode-button:hover {\n        background: var(--secondary-background-color);\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      }\n\n      .mode-button.active {\n        background: var(--mode-color, var(--primary-color));\n        color: white;\n        border-color: var(--mode-color, var(--primary-color));\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n      }\n\n      .mode-button:active {\n        transform: translateY(0) scale(0.95);\n      }\n\n      .mode-button ha-icon {\n        --mdc-icon-size: 24px;\n      }\n\n      .preset-selector {\n        padding: 12px 16px;\n        border-top: 1px solid var(--divider-color);\n      }\n\n      .preset-label {\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n        margin-bottom: 8px;\n        display: block;\n      }\n\n      .preset-buttons {\n        display: flex;\n        gap: 8px;\n        flex-wrap: wrap;\n      }\n\n      .preset-button {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 2px;\n        padding: 8px 12px;\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n        background: var(--card-background-color);\n        cursor: pointer;\n        transition: all 150ms cubic-bezier(0.4, 0.0, 0.2, 1);\n        font-size: 0.7em;\n        text-transform: capitalize;\n        min-height: 44px;\n        min-width: 44px;\n      }\n\n      .preset-button:hover {\n        background: var(--secondary-background-color);\n      }\n\n      .preset-button.active {\n        background: var(--primary-color);\n        color: white;\n        border-color: var(--primary-color);\n      }\n\n      .preset-button ha-icon {\n        --mdc-icon-size: 18px;\n      }\n\n      .humidity-display {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 8px;\n        padding: 12px 16px;\n        border-top: 1px solid var(--divider-color);\n        color: var(--secondary-text-color);\n        font-size: 0.9em;\n      }\n\n      .humidity-display ha-icon {\n        --mdc-icon-size: 18px;\n      }\n\n      ha-icon-button {\n        --mdc-icon-button-size: 48px;\n        --mdc-icon-size: 24px;\n        min-height: 44px;\n        min-width: 44px;\n      }\n\n      /* Temperature dial styles */\n      .temp-dial-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: 16px;\n      }\n\n      .temp-dial {\n        position: relative;\n        width: 200px;\n        height: 200px;\n      }\n\n      .dial-svg {\n        width: 100%;\n        height: 100%;\n      }\n\n      .dial-bg {\n        fill: none;\n        stroke: var(--divider-color);\n        stroke-width: 8;\n      }\n\n      .dial-current {\n        fill: none;\n        stroke: var(--primary-color);\n        stroke-width: 8;\n        stroke-linecap: round;\n        transition: stroke-dasharray 350ms cubic-bezier(0.0, 0.0, 0.2, 1);\n      }\n\n      .dial-target {\n        fill: none;\n        stroke: var(--secondary-text-color);\n        stroke-width: 4;\n        stroke-linecap: round;\n      }\n\n      .dial-center {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        text-align: center;\n      }\n\n      .current-temp-dial {\n        display: flex;\n        align-items: baseline;\n        justify-content: center;\n        gap: 4px;\n      }\n\n      .temp-value-dial {\n        font-size: 2.5em;\n        font-weight: 300;\n        color: var(--primary-color);\n        line-height: 1;\n      }\n\n      .temp-unit-dial {\n        font-size: 1.2em;\n        color: var(--secondary-text-color);\n      }\n\n      .target-temp-dial {\n        margin-top: 8px;\n        color: var(--secondary-text-color);\n        font-size: 0.8em;\n      }\n\n      .temp-dial-unavailable {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 200px;\n        color: var(--secondary-text-color);\n        font-size: 1.1em;\n      }\n\n      .trend-indicator {\n        display: flex;\n        align-items: center;\n        gap: 6px;\n        color: var(--secondary-text-color);\n        font-size: 0.85em;\n      }\n\n      .trend-icon {\n        --mdc-icon-size: 16px;\n        color: var(--success-color, #4caf50);\n      }\n\n      /* Mobile optimizations */\n      @media (max-width: 768px) {\n        .temp-dial {\n          width: 160px;\n          height: 160px;\n        }\n\n        .temp-value-dial {\n          font-size: 2em;\n        }\n\n        .temp-unit-dial {\n          font-size: 1em;\n        }\n\n        .mode-selector {\n          grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));\n        }\n\n        .preset-buttons {\n          justify-content: center;\n        }\n      }\n\n      /* Accessibility */\n      @media (prefers-reduced-motion: reduce) {\n        .mode-button:hover {\n          transform: none;\n        }\n\n        .mode-button:active {\n          transform: scale(0.98);\n        }\n\n        .dial-current {\n          transition: none;\n        }\n      }\n    `;\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* property */.MZ)({ type: String }),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", String)\n], ClimateWidget.prototype, \"climateEntityId\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Number)\n], ClimateWidget.prototype, \"currentTemp\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Number)\n], ClimateWidget.prototype, \"targetTemp\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Number)\n], ClimateWidget.prototype, \"targetTempLow\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Number)\n], ClimateWidget.prototype, \"targetTempHigh\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Number)\n], ClimateWidget.prototype, \"humidity\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", String)\n], ClimateWidget.prototype, \"hvacMode\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", String)\n], ClimateWidget.prototype, \"presetMode\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Array)\n], ClimateWidget.prototype, \"availableModes\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Array)\n], ClimateWidget.prototype, \"availablePresets\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], ClimateWidget.prototype, \"isAdjusting\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], ClimateWidget.prototype, \"showTempDial\", void 0);\nClimateWidget = (0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* customElement */.EM)('dashview-climate-widget')\n], ClimateWidget);\n\n\n;// ./src/widgets/quick-controls-widget.ts\n/**\n * Quick controls widget for Dashview V2.\n * Provides fast access to frequently used controls and scenes.\n */\nvar quick_controls_widget_a;\n\n\n\n\nlet QuickControlsWidget = class QuickControlsWidget extends DashviewWidget {\n    constructor() {\n        super(...arguments);\n        this.controlStates = new Map();\n        this.executingControl = null;\n    }\n    subscribedEntities() {\n        const config = this.widgetConfig;\n        if (!config?.controls)\n            return [];\n        // Subscribe to all control entities\n        return config.controls\n            .map(control => control.entityId)\n            .filter(id => id && !id.startsWith('script.') && !id.startsWith('scene.'));\n    }\n    getDefaultConfig() {\n        return {\n            type: 'quick-controls',\n            controls: [],\n            columns: 4,\n            showLabels: true,\n            iconSize: 'medium',\n        };\n    }\n    firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        this.updateControlStates();\n    }\n    onStateChanged(entityId, newState, oldState) {\n        super.onStateChanged(entityId, newState, oldState);\n        this.updateControlStates();\n    }\n    updateControlStates() {\n        const config = this.widgetConfig;\n        if (!config?.controls)\n            return;\n        const newStates = new Map();\n        for (const control of config.controls) {\n            const entityId = control.entityId;\n            if (!entityId)\n                continue;\n            const state = this.entityStates.get(entityId);\n            if (state) {\n                // For toggleable entities, track on/off state\n                const domain = entityId.split('.')[0];\n                if (['light', 'switch', 'fan', 'input_boolean'].includes(domain)) {\n                    newStates.set(entityId, state.state === 'on');\n                }\n            }\n        }\n        this.controlStates = newStates;\n    }\n    render() {\n        const config = this.widgetConfig;\n        const title = this.widgetConfig?.title || 'Quick Controls';\n        if (this.isLoading) {\n            return (0,lit/* html */.qy) `\n        <div class=\"widget-loading\">\n          Loading controls...\n        </div>\n      `;\n        }\n        if (this.error || !config?.controls || config.controls.length === 0) {\n            return (0,lit/* html */.qy) `\n        <div class=\"widget-error\">\n          ${this.error || 'No controls configured'}\n        </div>\n      `;\n        }\n        const columns = config.columns || 4;\n        const iconSize = config.iconSize || 'medium';\n        return (0,lit/* html */.qy) `\n      <ha-card>\n        <div class=\"header\">\n          <h2>${title}</h2>\n        </div>\n\n        <div \n          class=\"controls-grid\"\n          style=\"grid-template-columns: repeat(${columns}, 1fr)\"\n        >\n          ${config.controls.map(control => this.renderControl(control, iconSize))}\n        </div>\n      </ha-card>\n    `;\n    }\n    renderControl(control, iconSize) {\n        const config = this.widgetConfig;\n        const showLabels = config?.showLabels ?? true;\n        const entityId = control.entityId;\n        const state = entityId ? this.entityStates.get(entityId) : null;\n        const isActive = this.controlStates.get(entityId) || false;\n        const isExecuting = this.executingControl === entityId;\n        // Determine icon\n        let icon = control.icon;\n        if (!icon && state) {\n            icon = state.attributes.icon || this.getDefaultIcon(entityId);\n        }\n        // Determine label\n        let label = control.label;\n        if (!label && state) {\n            label = state.attributes.friendly_name || entityId.split('.')[1].replace(/_/g, ' ');\n        }\n        // Determine color\n        let color = control.color || 'var(--primary-color)';\n        if (isActive && !control.color) {\n            color = this.getActiveColor(entityId);\n        }\n        const buttonClass = `control-button ${iconSize} ${isActive ? 'active' : ''} ${isExecuting ? 'executing' : ''}`;\n        return (0,lit/* html */.qy) `\n      <button\n        class=\"${buttonClass}\"\n        style=\"--control-color: ${color}\"\n        @click=${() => this.handleControlClick(control)}\n        ?disabled=${isExecuting}\n      >\n        ${isExecuting ? (0,lit/* html */.qy) `\n          <div class=\"spinner\"></div>\n        ` : (0,lit/* html */.qy) `\n          <ha-icon icon=\"${icon}\"></ha-icon>\n        `}\n        ${showLabels && label ? (0,lit/* html */.qy) `\n          <span class=\"control-label\">${label}</span>\n        ` : ''}\n      </button>\n    `;\n    }\n    getDefaultIcon(entityId) {\n        const [domain, name] = entityId.split('.');\n        // Domain-based icons\n        const domainIcons = {\n            'light': 'mdi:lightbulb',\n            'switch': 'mdi:toggle-switch',\n            'fan': 'mdi:fan',\n            'scene': 'mdi:palette',\n            'script': 'mdi:script-text',\n            'automation': 'mdi:robot',\n            'input_boolean': 'mdi:toggle-switch-outline',\n        };\n        // Name-based icons\n        if (name.includes('morning'))\n            return 'mdi:weather-sunset-up';\n        if (name.includes('night') || name.includes('bedtime'))\n            return 'mdi:weather-night';\n        if (name.includes('away'))\n            return 'mdi:home-export-outline';\n        if (name.includes('home'))\n            return 'mdi:home';\n        if (name.includes('party'))\n            return 'mdi:party-popper';\n        if (name.includes('movie') || name.includes('tv'))\n            return 'mdi:television';\n        if (name.includes('dinner') || name.includes('dining'))\n            return 'mdi:silverware-fork-knife';\n        if (name.includes('reading'))\n            return 'mdi:book-open-page-variant';\n        return domainIcons[domain] || 'mdi:gesture-tap';\n    }\n    getActiveColor(entityId) {\n        const [domain] = entityId.split('.');\n        switch (domain) {\n            case 'light':\n                return 'var(--warning-color)';\n            case 'fan':\n                return 'var(--info-color)';\n            case 'switch':\n                return 'var(--success-color)';\n            default:\n                return 'var(--primary-color)';\n        }\n    }\n    async handleControlClick(control) {\n        if (this.executingControl)\n            return;\n        const entityId = control.entityId;\n        if (!entityId)\n            return;\n        // Handle confirmation if required\n        if (control.confirmAction) {\n            const label = control.label || entityId.split('.')[1].replace(/_/g, ' ');\n            if (!confirm(`Execute \"${label}\"?`)) {\n                return;\n            }\n        }\n        this.executingControl = entityId;\n        try {\n            // Custom service call\n            if (control.service) {\n                await this.hass.callService(control.service.domain, control.service.service, {\n                    entity_id: entityId,\n                    ...control.service.data\n                });\n            }\n            else {\n                // Default behavior based on entity type\n                const [domain] = entityId.split('.');\n                switch (domain) {\n                    case 'scene':\n                        await this.hass.callService('scene', 'turn_on', { entity_id: entityId });\n                        break;\n                    case 'script':\n                        await this.hass.callService('script', 'turn_on', { entity_id: entityId });\n                        break;\n                    case 'automation':\n                        await this.hass.callService('automation', 'trigger', { entity_id: entityId });\n                        break;\n                    case 'light':\n                    case 'switch':\n                    case 'fan':\n                    case 'input_boolean':\n                        await this.toggleEntity(entityId);\n                        break;\n                    default:\n                        console.warn(`Unknown entity domain: ${domain}`);\n                }\n            }\n            // Visual feedback for non-toggleable entities\n            if (['scene', 'script'].includes(entityId.split('.')[0])) {\n                // Keep spinner for a moment to show execution\n                setTimeout(() => {\n                    this.executingControl = null;\n                }, 1000);\n                return;\n            }\n        }\n        catch (error) {\n            console.error(`Failed to execute control ${entityId}:`, error);\n        }\n        this.executingControl = null;\n    }\n};\nQuickControlsWidget.styles = [\n    DashviewWidget.styles,\n    (0,lit/* css */.AH) `\n      ha-card {\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .header {\n        padding: 16px;\n        border-bottom: 1px solid var(--divider-color);\n      }\n\n      .header h2 {\n        margin: 0;\n        font-size: 1.2em;\n        font-weight: 500;\n      }\n\n      .controls-grid {\n        display: grid;\n        gap: 12px;\n        padding: 16px;\n        align-content: start;\n      }\n\n      .control-button {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        gap: 8px;\n        padding: 16px 8px;\n        border: 2px solid var(--divider-color);\n        border-radius: 12px;\n        background: var(--card-background-color);\n        cursor: pointer;\n        transition: all 0.2s ease;\n        position: relative;\n        overflow: hidden;\n      }\n\n      .control-button:hover {\n        background: var(--secondary-background-color);\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      }\n\n      .control-button:active {\n        transform: translateY(0);\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n      }\n\n      .control-button.active {\n        background: var(--control-color);\n        color: var(--text-primary-color, white);\n        border-color: var(--control-color);\n      }\n\n      .control-button.active ha-icon {\n        color: var(--text-primary-color, white);\n      }\n\n      .control-button:disabled {\n        cursor: not-allowed;\n        opacity: 0.7;\n      }\n\n      .control-button.executing {\n        pointer-events: none;\n      }\n\n      /* Icon sizes */\n      .control-button.small {\n        padding: 12px 8px;\n      }\n\n      .control-button.small ha-icon {\n        --mdc-icon-size: 24px;\n      }\n\n      .control-button.medium ha-icon {\n        --mdc-icon-size: 32px;\n      }\n\n      .control-button.large {\n        padding: 20px 12px;\n      }\n\n      .control-button.large ha-icon {\n        --mdc-icon-size: 40px;\n      }\n\n      .control-label {\n        font-size: 0.75em;\n        text-align: center;\n        line-height: 1.2;\n        max-width: 100%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        display: -webkit-box;\n        -webkit-line-clamp: 2;\n        -webkit-box-orient: vertical;\n      }\n\n      .control-button.large .control-label {\n        font-size: 0.85em;\n      }\n\n      /* Spinner animation */\n      .spinner {\n        width: 24px;\n        height: 24px;\n        border: 3px solid var(--divider-color);\n        border-top-color: var(--primary-color);\n        border-radius: 50%;\n        animation: spin 0.8s linear infinite;\n      }\n\n      @keyframes spin {\n        to { transform: rotate(360deg); }\n      }\n\n      /* Responsive adjustments */\n      @media (max-width: 480px) {\n        .controls-grid {\n          gap: 8px;\n          padding: 12px;\n        }\n\n        .control-button {\n          padding: 12px 6px;\n        }\n\n        .control-button.medium ha-icon {\n          --mdc-icon-size: 28px;\n        }\n\n        .control-label {\n          font-size: 0.7em;\n        }\n      }\n\n      /* Pulse animation for scenes/scripts */\n      @keyframes pulse {\n        0% {\n          opacity: 1;\n        }\n        50% {\n          opacity: 0.6;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n\n      .control-button.executing ha-icon {\n        animation: pulse 1s ease-in-out infinite;\n      }\n    `\n];\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", typeof (quick_controls_widget_a = typeof Map !== \"undefined\" && Map) === \"function\" ? quick_controls_widget_a : Object)\n], QuickControlsWidget.prototype, \"controlStates\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], QuickControlsWidget.prototype, \"executingControl\", void 0);\nQuickControlsWidget = (0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* customElement */.EM)('dashview-quick-controls-widget')\n], QuickControlsWidget);\n\n\n;// ./src/dashboard/dashview-dashboard.ts\nvar dashview_dashboard_a, dashview_dashboard_b, _c, _d;\n\n\n\n\n\n\n\n\n\n\n// Import widgets\n\n\n\n\nlet DashviewDashboard = class DashviewDashboard extends DashviewBaseElement {\n    constructor() {\n        super(...arguments);\n        // Private state\n        this._stateManager = null;\n        this._subscriptionManager = null;\n        this.loading = true;\n        this.error = null;\n        this.homeInfo = null;\n        this.wsConnection = null;\n        this.layoutEngine = null;\n        this.currentLayout = null;\n        this.widgets = [];\n        this.currentBreakpoint = 'desktop';\n        this.areas = new Map();\n    }\n    // Public getters for child components\n    get stateManager() {\n        return this._stateManager;\n    }\n    get subscriptionManager() {\n        return this._subscriptionManager;\n    }\n    async firstUpdated(changedProps) {\n        super.firstUpdated(changedProps);\n        await this.initializeDashboard();\n        this.setupResizeObserver();\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.cleanup();\n    }\n    async initializeDashboard() {\n        try {\n            logger.info('Initializing Dashview dashboard');\n            if (!this.hass) {\n                throw new Error('Home Assistant connection not available');\n            }\n            // Initialize core services\n            this.wsConnection = new WebSocketConnection(this.hass);\n            this._stateManager = new StateManager();\n            this._subscriptionManager = new SubscriptionManager(this.wsConnection, this._stateManager);\n            this.layoutEngine = new LayoutEngine();\n            // Load home information\n            await this.loadHomeInfo();\n            // Analyze home and set up dashboard\n            await this.analyzeHome();\n            this.selectOptimalLayout();\n            await this.initializeWidgets();\n            // Start state management\n            this._stateManager.initializeFromHass(this.hass);\n            await this._subscriptionManager.startListening();\n            logger.info('Dashboard initialized successfully');\n            this.loading = false;\n        }\n        catch (error) {\n            logger.error('Failed to initialize dashboard:', error);\n            this.error = error instanceof Error ? error.message : 'Failed to initialize dashboard';\n            this.loading = false;\n        }\n    }\n    async loadHomeInfo() {\n        if (!this.wsConnection)\n            return;\n        try {\n            this.loading = true;\n            this.error = null;\n            logger.debug('Loading home information');\n            this.homeInfo = await this.wsConnection.getHomeInfo();\n            logger.info('Home info loaded:', this.homeInfo);\n            this.loading = false;\n        }\n        catch (error) {\n            logger.error('Failed to load home info:', error);\n            this.error = 'Failed to load home information';\n            this.loading = false;\n        }\n    }\n    render() {\n        if (this.loading) {\n            return (0,lit/* html */.qy) `\n        <div class=\"dashview-container\">\n          <div class=\"dashview-loading\">\n            <div class=\"loading-spinner\"></div>\n            <p>Loading your dashboard...</p>\n          </div>\n        </div>\n      `;\n        }\n        if (this.error) {\n            return (0,lit/* html */.qy) `\n        <div class=\"dashview-container\">\n          <div class=\"dashview-error\">\n            <h2>Error</h2>\n            <p>${this.error}</p>\n            <button @click=${() => this.initializeDashboard()}>Retry</button>\n          </div>\n        </div>\n      `;\n        }\n        // If we have widgets, show the dashboard view\n        if (this.widgets.length > 0) {\n            return this.renderDashboard();\n        }\n        // Otherwise show the welcome/info view\n        return (0,lit/* html */.qy) `\n      <div class=\"dashview-container\">\n        <div class=\"dashview-content\">\n          <div class=\"welcome-header\">\n            <h1 class=\"welcome-title\">Welcome to Dashview V2</h1>\n            <p class=\"welcome-subtitle\">\n              Your intelligent home dashboard for ${this.homeInfo?.entityCount || 0} entities\n            </p>\n          </div>\n\n          ${this.homeInfo ? this.renderHomeInfo() : this.renderNoData()}\n        </div>\n      </div>\n    `;\n    }\n    renderHomeInfo() {\n        if (!this.homeInfo)\n            return null;\n        const complexityPercentage = Math.min(100, this.homeInfo.complexityScore * 10);\n        return (0,lit/* html */.qy) `\n      <div class=\"info-grid\">\n        <div class=\"info-card\">\n          <p class=\"info-value\">${this.homeInfo.roomCount}</p>\n          <p class=\"info-label\">Rooms</p>\n        </div>\n\n        <div class=\"info-card\">\n          <p class=\"info-value\">${this.homeInfo.entityCount}</p>\n          <p class=\"info-label\">Entities</p>\n        </div>\n\n        <div class=\"info-card\">\n          <p class=\"info-value\">${this.homeInfo.areas.length}</p>\n          <p class=\"info-label\">Areas</p>\n        </div>\n\n        <div class=\"info-card\">\n          <p class=\"info-value\">${this.homeInfo.complexityScore}/10</p>\n          <p class=\"info-label\">Complexity Score</p>\n          <div class=\"complexity-meter\">\n            <div class=\"complexity-fill\" style=\"width: ${complexityPercentage}%\"></div>\n          </div>\n        </div>\n      </div>\n\n      ${this.homeInfo.areas.length > 0 ? (0,lit/* html */.qy) `\n        <div class=\"dashview-card\">\n          <h3>Detected Areas</h3>\n          <div class=\"areas-list\">\n            ${this.homeInfo.areas.map(area => (0,lit/* html */.qy) `\n              <span class=\"area-tag\">${area}</span>\n            `)}\n          </div>\n        </div>\n      ` : ''}\n    `;\n    }\n    renderNoData() {\n        return (0,lit/* html */.qy) `\n      <div class=\"dashview-card\">\n        <p>No home information available. Make sure your Home Assistant is configured with areas and entities.</p>\n      </div>\n    `;\n    }\n    /**\n     * Analyze home complexity and areas.\n     */\n    async analyzeHome() {\n        if (!this.homeInfo || !this.wsConnection)\n            return;\n        try {\n            // Get detailed area information\n            const areaData = await this.callWebSocket('get_area_entities', {});\n            // Convert to AreaInfo format\n            for (const [areaId, data] of Object.entries(areaData)) {\n                this.areas.set(areaId, {\n                    areaId,\n                    name: data.name,\n                    entities: data.entities || [],\n                    entityCount: data.entity_count || 0,\n                    deviceCount: data.device_count || 0,\n                });\n            }\n            logger.info(`Analyzed ${this.areas.size} areas`);\n        }\n        catch (error) {\n            logger.error('Failed to analyze home:', error);\n        }\n    }\n    /**\n     * Select optimal layout based on complexity score and area count.\n     */\n    selectOptimalLayout() {\n        if (!this.homeInfo || !this.layoutEngine)\n            return;\n        const complexityScore = this.homeInfo.complexityScore;\n        const areaCount = this.areas.size;\n        this.currentLayout = this.layoutEngine.selectLayout(complexityScore, areaCount);\n        // Update breakpoint\n        const containerWidth = this.offsetWidth || window.innerWidth;\n        this.currentBreakpoint = this.currentLayout.getBreakpoint(containerWidth);\n    }\n    /**\n     * Initialize widgets based on areas and layout.\n     */\n    async initializeWidgets() {\n        if (!this.layoutEngine || !this.currentLayout)\n            return;\n        // Organize widgets from areas\n        const areaInfos = Array.from(this.areas.values());\n        this.widgets = this.layoutEngine.organizeWidgets(areaInfos);\n        // Handle overflow\n        const { visible } = this.layoutEngine.handleOverflow(this.widgets, this.currentLayout, this.currentBreakpoint);\n        this.widgets = visible;\n        logger.info(`Initialized ${this.widgets.length} widgets`);\n        // Update subscriptions for visible entities\n        await this.updateVisibleSubscriptions();\n    }\n    /**\n     * Update subscriptions based on visible widgets.\n     */\n    async updateVisibleSubscriptions() {\n        if (!this._subscriptionManager)\n            return;\n        const visibleEntities = new Set();\n        for (const widget of this.widgets) {\n            for (const entity of widget.entities) {\n                visibleEntities.add(entity);\n            }\n        }\n        this._subscriptionManager.updateVisibleEntities(Array.from(visibleEntities));\n    }\n    /**\n     * Set up resize observer for responsive behavior.\n     */\n    setupResizeObserver() {\n        const resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === this) {\n                    this.handleResize(entry.contentRect.width);\n                }\n            }\n        });\n        resizeObserver.observe(this);\n    }\n    /**\n     * Handle container resize.\n     */\n    handleResize(width) {\n        if (!this.currentLayout)\n            return;\n        const breakpointChanged = this.currentLayout.updateContainerWidth(width);\n        if (breakpointChanged) {\n            this.currentBreakpoint = this.currentLayout.getBreakpoint();\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Render the dashboard grid with widgets.\n     */\n    renderDashboard() {\n        if (!this.currentLayout || this.widgets.length === 0) {\n            return (0,lit/* html */.qy) `\n        <div class=\"dashboard-loading\">\n          <p>Setting up your dashboard...</p>\n        </div>\n      `;\n        }\n        const gridCSS = this.currentLayout.generateGridCSS(this.currentBreakpoint);\n        const positions = this.layoutEngine.calculatePositions(this.widgets, this.areas.size);\n        return (0,lit/* html */.qy) `\n      <div class=\"dashboard-grid\" style=\"${gridCSS}\">\n        ${positions.map(pos => {\n            const widget = this.widgets.find(w => this.getWidgetId(w) === pos.widgetId);\n            if (!widget)\n                return '';\n            return this.renderWidget(widget, pos);\n        })}\n      </div>\n    `;\n    }\n    /**\n     * Render a single widget.\n     */\n    renderWidget(widget, position) {\n        const style = `\n      grid-area: ${position.gridArea};\n      ${position.gridColumn ? `grid-column: ${position.gridColumn};` : ''}\n      ${position.gridRow ? `grid-row: ${position.gridRow};` : ''}\n    `;\n        switch (widget.type) {\n            case 'room':\n                const area = Array.from(this.areas.values()).find(a => a.entities.some(e => widget.entities.includes(e)));\n                return (0,lit/* html */.qy) `\n          <div class=\"widget-container\" style=\"${style}\">\n            <dashview-room-widget\n              .hass=${this.hass}\n              .widgetConfig=${widget}\n              .areaId=${area?.areaId}\n              .areaName=${area?.name || widget.title}\n            ></dashview-room-widget>\n          </div>\n        `;\n            // TODO: Add other widget types when implemented\n            default:\n                return (0,lit/* html */.qy) `\n          <div class=\"widget-container\" style=\"${style}\">\n            <div class=\"dashview-card\">\n              <p>Widget type '${widget.type}' not implemented yet</p>\n            </div>\n          </div>\n        `;\n        }\n    }\n    /**\n     * Generate widget ID.\n     */\n    getWidgetId(widget) {\n        const firstEntity = widget.entities[0] || 'unknown';\n        return `${widget.type}-${firstEntity.replace(/\\./g, '_')}`;\n    }\n    /**\n     * Clean up resources.\n     */\n    cleanup() {\n        if (this._subscriptionManager) {\n            this._subscriptionManager.clear();\n        }\n        if (this._stateManager) {\n            this._stateManager.clear();\n        }\n    }\n};\nDashviewDashboard.styles = [\n    dashviewTheme,\n    dashviewStyles,\n    (0,lit/* css */.AH) `\n      :host {\n        display: block;\n        height: 100%;\n        width: 100%;\n      }\n\n      .welcome-header {\n        text-align: center;\n        margin-bottom: var(--dashview-spacing-xl);\n      }\n\n      .welcome-title {\n        font-size: 2.5rem;\n        font-weight: 300;\n        color: var(--dashview-primary-text-color);\n        margin: 0 0 var(--dashview-spacing-sm);\n      }\n\n      .welcome-subtitle {\n        font-size: 1.2rem;\n        color: var(--dashview-secondary-text-color);\n        margin: 0;\n      }\n\n      .info-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n        gap: var(--dashview-spacing-md);\n        margin-top: var(--dashview-spacing-xl);\n      }\n\n      .info-card {\n        background: var(--dashview-card-background);\n        border-radius: var(--dashview-border-radius);\n        padding: var(--dashview-spacing-lg);\n        text-align: center;\n        box-shadow: var(--dashview-box-shadow);\n        transition: transform 0.2s ease;\n      }\n\n      .info-card:hover {\n        transform: translateY(-2px);\n      }\n\n      .info-value {\n        font-size: 3rem;\n        font-weight: 300;\n        color: var(--primary-color);\n        margin: 0;\n      }\n\n      .info-label {\n        font-size: 1rem;\n        color: var(--dashview-secondary-text-color);\n        margin: var(--dashview-spacing-sm) 0 0;\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n      }\n\n      .complexity-meter {\n        width: 100%;\n        height: 20px;\n        background: var(--divider-color);\n        border-radius: 10px;\n        margin-top: var(--dashview-spacing-md);\n        overflow: hidden;\n      }\n\n      .complexity-fill {\n        height: 100%;\n        background: linear-gradient(90deg, \n          var(--success-color) 0%, \n          var(--warning-color) 50%, \n          var(--error-color) 100%\n        );\n        transition: width 0.5s ease;\n      }\n\n      .areas-list {\n        display: flex;\n        flex-wrap: wrap;\n        gap: var(--dashview-spacing-sm);\n        margin-top: var(--dashview-spacing-md);\n      }\n\n      .area-tag {\n        background: var(--primary-color);\n        color: var(--text-primary-color, white);\n        padding: var(--dashview-spacing-xs) var(--dashview-spacing-sm);\n        border-radius: var(--dashview-border-radius);\n        font-size: 0.9rem;\n      }\n\n      .loading-spinner {\n        animation: spin 1s linear infinite;\n        width: 48px;\n        height: 48px;\n        border: 3px solid var(--divider-color);\n        border-top-color: var(--primary-color);\n        border-radius: 50%;\n      }\n\n      @keyframes spin {\n        to { transform: rotate(360deg); }\n      }\n\n      /* Dashboard grid layout */\n      .dashboard-grid {\n        display: grid;\n        height: 100%;\n        width: 100%;\n        overflow: auto;\n      }\n\n      .widget-container {\n        position: relative;\n        min-height: 200px;\n      }\n\n      /* Loading state for dashboard mode */\n      .dashboard-loading {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 100%;\n        flex-direction: column;\n        gap: var(--dashview-spacing-md);\n      }\n\n      .dashboard-loading p {\n        color: var(--dashview-secondary-text-color);\n      }\n    `,\n];\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewDashboard.prototype, \"loading\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewDashboard.prototype, \"error\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewDashboard.prototype, \"homeInfo\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewDashboard.prototype, \"wsConnection\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewDashboard.prototype, \"layoutEngine\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewDashboard.prototype, \"currentLayout\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Array)\n], DashviewDashboard.prototype, \"widgets\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", Object)\n], DashviewDashboard.prototype, \"currentBreakpoint\", void 0);\n(0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* state */.wk)(),\n    (0,tslib_es6/* __metadata */.Sn)(\"design:type\", typeof (_d = typeof Map !== \"undefined\" && Map) === \"function\" ? _d : Object)\n], DashviewDashboard.prototype, \"areas\", void 0);\nDashviewDashboard = (0,tslib_es6/* __decorate */.Cg)([\n    (0,decorators/* customElement */.EM)('dashview-dashboard')\n], DashviewDashboard);\n\n\n;// ./src/panel-entry.ts\n/**\n * Home Assistant Panel Entry Point\n * This file creates the proper panel structure that Home Assistant expects\n */\n\n\n// Set up logger based on environment\nif (false) // removed by dead control flow\n{}\n// Export version for debugging\nconst DASHVIEW_VERSION = '0.2.6';\n/**\n * Create Home Assistant panel function\n * This is the function that Home Assistant will call to create the panel\n */\nfunction createDashviewPanel(hass, narrow, route, panel) {\n    logger.info(`Creating Dashview V2 Panel v${DASHVIEW_VERSION}`);\n    // Create container element\n    const container = document.createElement('div');\n    container.style.cssText = `\n    height: 100vh;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    background: var(--primary-background-color);\n  `;\n    // Create dashboard element\n    const dashboard = document.createElement('dashview-dashboard');\n    dashboard.hass = hass;\n    dashboard.narrow = narrow;\n    dashboard.route = route;\n    dashboard.panel = panel;\n    // Style the dashboard to fill the container\n    dashboard.style.cssText = `\n    flex: 1;\n    width: 100%;\n    height: 100%;\n  `;\n    // Add dashboard to container\n    container.appendChild(dashboard);\n    // Return object with required methods\n    return {\n        render: () => container,\n        update: (newHass, newNarrow, newRoute) => {\n            dashboard.hass = newHass;\n            dashboard.narrow = newNarrow;\n            dashboard.route = newRoute;\n        },\n        destroy: () => {\n            if (container.parentNode) {\n                container.parentNode.removeChild(container);\n            }\n        }\n    };\n}\n// Verify dashboard element is registered\nconst dashboardElement = customElements.get('dashview-dashboard');\nif (dashboardElement) {\n    logger.info('Dashview V2 dashboard element registered successfully');\n}\nelse {\n    logger.error('Failed to register dashview-dashboard element');\n}\n// Set up global error handler for debugging\nwindow.addEventListener('error', (event) => {\n    logger.error('Global error:', event.error);\n});\n// Set up unhandled rejection handler\nwindow.addEventListener('unhandledrejection', (event) => {\n    logger.error('Unhandled promise rejection:', event.reason);\n});\n// Log initialization\nlogger.info(`Dashview V2 Panel Entry v${DASHVIEW_VERSION} initialized`);\n// Export the panel creation function as default\n/* harmony default export */ const panel_entry = (createDashviewPanel);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///767\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			256: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkDashviewV2"] = self["webpackChunkDashviewV2"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [121], () => (__webpack_require__(767)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	__webpack_exports__ = __webpack_exports__["default"];
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});